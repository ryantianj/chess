{"version":3,"file":"static/js/worker.worker.59b9fae6.worker.js","mappings":"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","sources":["Chess/ai/worker.worker.js"],"sourcesContent":["\r\n\r\n\r\n// https://stackoverflow.com/questions/50901954/webworkers-dont-seem-to-be-working-in-production\r\n//https://medium.com/@danilog1905/how-to-use-web-workers-with-react-create-app-and-not-ejecting-in-the-attempt-3718d2a1166b\r\n// eslint-disable-next-line no-restricted-globals,no-undef\r\nconst test = async (message) => {\r\n    // console.log(\"working\")\r\n    let nodes = 0\r\n    const ab =  (boardString, depth) => {\r\n        nodes = 0\r\n        const copyBoard = new Board()\r\n        copyBoard.setBoardString(boardString)\r\n        // const start = performance.now()\r\n        const result = miniMax(copyBoard, depth, -Number.MAX_VALUE, Number.MAX_VALUE, true, Piece.BLACK, Piece.BLACK)\r\n        // const result = rootNegaMax(depth, copyBoard, Piece.BLACK, Piece.BLACK)\r\n        // const end = performance.now()\r\n        // console.log(nodes, end - start)\r\n        return result[0] // should be a move\r\n    }\r\n\r\n    const evaluate = (board, colour) => { // TODO: improve heursitics, engine elo determined here\r\n        return board.getScore(colour)\r\n    }\r\n\r\n    const switchColour = (colour) => {\r\n        return colour === Piece.BLACK ? Piece.WHITE : Piece.BLACK\r\n    }\r\n\r\n    const sortMoves = (a, b) => {\r\n        if (a.ate !== null && b.ate !== null) {\r\n            return b.ate.points - a.ate.points\r\n        } else if (a.ate !== null) {\r\n            return -1\r\n        } else if (b.ate !== null) {\r\n            return 1\r\n        }\r\n        return 0\r\n    }\r\n\r\n    const miniMax = (board, depth, alpha, beta, isMax, maxPlayer, currentPlayer) => {\r\n        // nodes++\r\n        if (depth === 0) {\r\n            return [null, evaluate(board, maxPlayer)]\r\n        }\r\n        const testGameOver = board.isGameOver(currentPlayer)\r\n        if (testGameOver.isGameOver && currentPlayer === maxPlayer) {\r\n            return [null, -Number.MAX_VALUE]\r\n        }\r\n        if (testGameOver.isGameOver && currentPlayer !== maxPlayer) {\r\n            return [null, Number.MAX_VALUE]\r\n        }\r\n        const moves = testGameOver.allMoves\r\n        moves.sort(sortMoves)\r\n        const randomIndex = Math.floor(Math.random() * (moves.length - 1))\r\n        let bestMove = moves.length > 0 ? moves[randomIndex] : null\r\n\r\n        if (isMax){\r\n            let maxEval = -Number.MAX_VALUE\r\n            for (const move of moves) {\r\n                board.movePiece(move.piece, move)\r\n                const currentEval = miniMax(board, depth - 1, alpha, beta, false, maxPlayer, switchColour(currentPlayer))[1]\r\n                board.undoMove()\r\n                if (currentEval > maxEval) {\r\n                    maxEval = currentEval\r\n                    bestMove = move\r\n                }\r\n                alpha = Math.max(alpha, currentEval)\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            return [bestMove, maxEval]\r\n        } else {\r\n            let minEval = Number.MAX_VALUE\r\n            for (const move of moves) {\r\n                board.movePiece(move.piece, move)\r\n                const currentEval = miniMax(board, depth - 1, alpha, beta, true, maxPlayer, switchColour(currentPlayer))[1]\r\n                board.undoMove()\r\n                if (currentEval < minEval) {\r\n                    minEval = currentEval\r\n                    bestMove = move\r\n                }\r\n                beta = Math.max(beta, currentEval)\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            return [bestMove, minEval]\r\n        }\r\n    }\r\n\r\n    const negaMax = (depth, board, colour, maxColour) => {\r\n        if (depth === 0) {\r\n            return evaluate(board, maxColour)\r\n        }\r\n        const testGameOver = board.isGameOver(colour).isGameOver\r\n        if (testGameOver && colour === maxColour) {\r\n            return -Number.MAX_VALUE\r\n        }\r\n        if (testGameOver && colour !== maxColour) {\r\n            return Number.MAX_VALUE\r\n        }\r\n        let max = -Number.MAX_VALUE\r\n        const moves = board.getAllMoves(colour)\r\n        for (const move of moves) {\r\n            board.movePiece(move.piece, move)\r\n            const currentEval = -negaMax(depth - 1, board, switchColour(colour), maxColour)\r\n            if (currentEval > max) {\r\n                max = currentEval\r\n            }\r\n            board.undoMove()\r\n        }\r\n        return max\r\n    }\r\n    const rootNegaMax = (depth, board, colour, maxColour) => {\r\n        const rootMoves = board.getAllMoves(maxColour)\r\n        let max = -Number.MAX_VALUE\r\n        const randomIndex = Math.floor(Math.random() * (rootMoves.length - 1))\r\n        let bestMove = rootMoves.length > 0 ? rootMoves[randomIndex] : null\r\n        for (const move of rootMoves) {\r\n            board.movePiece(move.piece, move)\r\n            const score = negaMax(depth, board, colour, maxColour)\r\n            if (score > max) {\r\n                max = score\r\n                bestMove = move\r\n            }\r\n            board.undoMove()\r\n        }\r\n        return bestMove\r\n\r\n    }\r\n    class Board {\r\n        board;\r\n\r\n        constructor() {\r\n            this.board = this.newBoard()\r\n            this.moves = []\r\n        }\r\n\r\n        newBoard = () => {\r\n            const startingBoard = [\r\n                [new Rook(Piece.BLACK, new Cell(0,0)), new Knight(Piece.BLACK, new Cell(0, 1)), new Bishop(Piece.BLACK, new Cell(0, 2)), new Queen(Piece.BLACK, new Cell(0, 3)), new King(Piece.BLACK, new Cell(0, 4)), new Bishop(Piece.BLACK, new Cell(0, 5)), new Knight(Piece.BLACK, new Cell(0, 6)), new Rook(Piece.BLACK, new Cell(0,7))],\r\n                [new Pawn(Piece.BLACK, new Cell(1, 0)), new Pawn(Piece.BLACK, new Cell(1, 1)), new Pawn(Piece.BLACK, new Cell(1, 2)), new Pawn(Piece.BLACK, new Cell(1, 3)), new Pawn(Piece.BLACK, new Cell(1, 4)), new Pawn(Piece.BLACK, new Cell(1, 5)), new Pawn(Piece.BLACK, new Cell(1, 6)), new Pawn(Piece.BLACK, new Cell(1, 7))],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [new Pawn(Piece.WHITE, new Cell(6, 0)), new Pawn(Piece.WHITE, new Cell(6, 1)), new Pawn(Piece.WHITE, new Cell(6, 2)), new Pawn(Piece.WHITE, new Cell(6, 3)), new Pawn(Piece.WHITE, new Cell(6, 4)), new Pawn(Piece.WHITE, new Cell(6, 5)), new Pawn(Piece.WHITE, new Cell(6, 6)), new Pawn(Piece.WHITE, new Cell(6, 7))],\r\n                [new Rook(Piece.WHITE, new Cell(7,0)), new Knight(Piece.WHITE, new Cell(7, 1)), new Bishop(Piece.WHITE, new Cell(7, 2)), new Queen(Piece.WHITE, new Cell(7, 3)), new King(Piece.WHITE, new Cell(7, 4)), new Bishop(Piece.WHITE, new Cell(7, 5)), new Knight(Piece.WHITE, new Cell(7, 6)), new Rook(Piece.WHITE, new Cell(7,7))],\r\n            ]\r\n            return startingBoard\r\n        }\r\n\r\n        setBoardString = (boardString) => {\r\n            const newBoard = []\r\n            for (let row = 0; row < 8; row++) {\r\n                const newRow = []\r\n                for (let col = 0; col < 8; col++) {\r\n                    const pieceString = boardString[row][col]\r\n                    if (pieceString === null) {\r\n                        newRow.push(null)\r\n                    } else {\r\n                        const pieceColour = pieceString.slice(0, 1)\r\n                        const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\r\n                        const piece = pieceString.slice(1, 2)\r\n                        if (piece === \"b\") {\r\n                            newRow.push(new Bishop(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'k') {\r\n                            newRow.push(new King(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'n') {\r\n                            newRow.push(new Knight(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'p') {\r\n                            newRow.push(new Pawn(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'q') {\r\n                            newRow.push(new Queen(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'r') {\r\n                            newRow.push(new Rook(actualColour, new Cell(row, col)))\r\n                        } else {\r\n                            newRow.push(null)\r\n                        }\r\n                    }\r\n                }\r\n                newBoard.push(newRow)\r\n            }\r\n            this.board = newBoard\r\n        }\r\n\r\n        clonePiece = (piece) => {\r\n            if (piece instanceof Pawn) {\r\n                return new Pawn(piece.colour, new Cell(piece.cell.row, piece.cell.col))\r\n            } else if (piece instanceof Bishop) {\r\n                return new Bishop(piece.colour, new Cell(piece.cell.row, piece.cell.col))\r\n            } else if (piece instanceof King) {\r\n                return new King(piece.colour, new Cell(piece.cell.row, piece.cell.col))\r\n            } else if (piece instanceof Knight) {\r\n                return new Knight(piece.colour, new Cell(piece.cell.row, piece.cell.col))\r\n            } else if (piece instanceof Queen) {\r\n                return new Queen(piece.colour, new Cell(piece.cell.row, piece.cell.col))\r\n            } else if (piece instanceof Rook) {\r\n                return new Rook(piece.colour, new Cell(piece.cell.row, piece.cell.col))\r\n            }\r\n            return null\r\n        }\r\n\r\n        /**\r\n         * Returns the board represented by the array\r\n         */\r\n        getBoard = () => {\r\n            return this.board\r\n        }\r\n        /**\r\n         * Returns piece at the coordinates\r\n         */\r\n        getPiece = (row, col) => {\r\n            return this.board[row][col]\r\n        }\r\n\r\n        /**\r\n         * Returns if the cell is empty\r\n         */\r\n        isEmpty = (row, col) => {\r\n            if (this.isOutSide(row, col)) {\r\n                return false\r\n            }\r\n            return this.board[row][col] === null\r\n        }\r\n        isUnderCheck = (colour) => {\r\n            return false\r\n        }\r\n        isOutSide = (row, col) => {\r\n            return row < 0 || col < 0 || row > 7 || col > 7\r\n        }\r\n\r\n        canEat = (row, col, colour) => {\r\n            return !this.isOutSide(row, col) && !this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour\r\n        }\r\n\r\n        canEatDefend = (row, col) => {\r\n            return !this.isOutSide(row, col) && !this.isEmpty(row, col)\r\n        }\r\n\r\n        canMove = (row, col) => {\r\n            return !this.isOutSide(row, col) && this.isEmpty(row, col)\r\n        }\r\n\r\n        canKingMove = (row, col, colour) => {\r\n            const directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\r\n            for (const direction of directions) {\r\n                const newRow = row + direction[0]\r\n                const newCol = col + direction[1]\r\n                if (!this.isOutSide(newRow, newCol) && !this.isEmpty(newRow, newCol)\r\n                    && (this.getPiece(newRow, newCol) instanceof King && this.getPiece(newRow, newCol).colour !== colour)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n        /**\r\n         * Returns the squares, marked by moves, that are under attack by the opposing colour\r\n         * @param colour\r\n         * @return {*[]}\r\n         */\r\n        getAttackingSquares = (colour) => { // colour is for piece being attacked\r\n            const squares = []\r\n            const defense = []\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        const getPc = this.getPiece(row, col)\r\n                        if (getPc.colour !== colour && !(getPc instanceof King)) {\r\n                            const moves = getPc.getAttack(this)\r\n                            squares.push.apply(squares, moves) // better performance\r\n                        }\r\n                    // else if (getPc.colour === colour && !(getPc instanceof King)) {\r\n                    //         const moves = getPc.getAttack(this)\r\n                    //         defense.push.apply(defense, moves) // TODO: may remove, performance\r\n                    //     }\r\n                    }\r\n                }\r\n            }\r\n            return [squares, defense]\r\n        }\r\n\r\n        movePiece = (piece, move) => {\r\n            const result =  this.board[move.oldCell.row][move.oldCell.col].movePiece(move, this)\r\n            this.moves.push(move)\r\n            return result\r\n        }\r\n\r\n        undoMove = () => {\r\n            if (this.moves.length > 0) {\r\n                const move = this.moves.pop()\r\n                const prevRow = move.oldCell.row\r\n                const prevCol = move.oldCell.col\r\n                const piece = this.board[move.newCell.row][move.newCell.col]\r\n                this.board[prevRow][prevCol] = piece\r\n                piece.moves.pop()\r\n                piece.cell.row = prevRow\r\n                piece.cell.col = prevCol\r\n                if (move.isEnPassant) { // add back pawn\r\n                    this.board[move.ate.cell.row][move.ate.cell.col] = move.ate\r\n                    this.board[move.newCell.row][move.newCell.col] = null\r\n                    return true\r\n                } else if (move.isPromotion) { // remove piece, add back pawn\r\n                    this.board[prevRow][prevCol] = new Pawn(piece.colour, piece.cell, piece.moves)\r\n                } else if (move.castle.isCastle) { // king will be undone, need to undo rook\r\n                    this.board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = move.castle.rook.piece\r\n                    move.castle.rook.piece.cell.row = move.castle.rook.oldCell.row\r\n                    move.castle.rook.piece.cell.col = move.castle.rook.oldCell.col\r\n                    this.board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = null\r\n                }\r\n                this.board[move.newCell.row][move.newCell.col] = move.ate\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n\r\n        kingHasMoved = (colour) => {\r\n            for (const move of this.moves) {\r\n                if (move.piece instanceof King && move.piece.colour === colour) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        rookHasMoved = (colour, side) => {\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const col = side === King.KING_SIDE ? 7 : 0\r\n            if (!(this.getPiece(row, col) instanceof Rook)) { // no rook on cell\r\n                return true\r\n            }\r\n            for (const move of this.moves) {\r\n                if (move.piece instanceof Rook && move.piece.colour === colour && move.oldCell.row === row && move.oldCell.col === col) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        castlingSquaresIsEmpty = (colour, side) => {\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const cols = side === King.KING_SIDE ? [5,6] : [1,2,3]\r\n            for (const col of cols) {\r\n                if (!this.isEmpty(row, col)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n        castlingSquaresUnderAttack = (colour, side, attacked) => { // includes the king himself\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const cols = side === King.KING_SIDE ? [4,5,6] : [1,2,3,4]\r\n            for (const col of cols) {\r\n                for (const move of attacked) {\r\n                    if (move.newCell.row === row && move.newCell.col === col) {\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        canCastle = (colour, side, attacked) => {\r\n            // console.log(this.castlingSquaresIsEmpty(colour, side) , !this.castlingSquaresUnderAttack(colour, side, attacked)\r\n            //     , !this.rookHasMoved(colour, side) , !this.kingHasMoved(colour))\r\n            return this.castlingSquaresIsEmpty(colour, side) && !this.castlingSquaresUnderAttack(colour, side, attacked)\r\n                && !this.rookHasMoved(colour, side) && !this.kingHasMoved(colour)\r\n        }\r\n\r\n        promotePiece = (piece) => {\r\n            const row = piece.cell.row\r\n            const col = piece.cell.col\r\n            this.board[row][col] = piece\r\n        }\r\n\r\n        // returns if colour is under check\r\n        isCheck = (colour, attackArray = null) => {\r\n            const attacked = attackArray === null ? this.getAttackingSquares(colour)[0] : attackArray\r\n            for (const move of attacked) {\r\n                const piece = this.getPiece(move.newCell.row, move.newCell.col)\r\n                if (piece instanceof King\r\n                    && piece.colour === colour) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * This functions determines if a move will result in your own King being under check (illegal move)\r\n         * @param piece\r\n         * @param move\r\n         */\r\n        willCheck = (piece, move) => {\r\n            this.movePiece(piece, move)\r\n            if (this.isCheck(piece.colour)) {\r\n                this.undoMove()\r\n                return true\r\n            }\r\n            this.undoMove()\r\n            return false\r\n        }\r\n        getAllMoves = (colour) => {\r\n            let moves = []\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.board[row][col]\r\n                    if (piece !== null && this.getPiece(row, col).colour === colour) {\r\n                        moves = moves.concat(this.getPiece(row, col).getMoves(this))\r\n                    }\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n\r\n        /**\r\n         * Defined by: same position occurs thrice for threefold repetition\r\n         * @param times\r\n         * @return {boolean}\r\n         */\r\n        isRepeatPosition = (numMoves) => {\r\n            const lengthCheck = numMoves\r\n            if (this.moves.length >= lengthCheck) {\r\n                const getLastNMoves = this.moves.slice(-lengthCheck)\r\n                let firstMove = getLastNMoves[0]\r\n                let secondMove = getLastNMoves[1]\r\n                for (let i = 2; i < lengthCheck; i+=4) {\r\n                    const current = getLastNMoves[i]\r\n                    const currentTwo = getLastNMoves[i+1]\r\n                    if (!(current.newCell.row === firstMove.oldCell.row && current.newCell.col === firstMove.oldCell.col && firstMove.piece === current.piece)) {\r\n                        return false\r\n                    }\r\n                    if (!(currentTwo.newCell.row === secondMove.oldCell.row && currentTwo.newCell.col === secondMove.oldCell.col && secondMove.piece === currentTwo.piece)) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * Checks if game is over for colour, means other colour wins\r\n         * @param colour\r\n         * @return {{isGameOver: boolean, message: string}}\r\n         */\r\n        isGameOver = (colour) => {\r\n            const allMoves = this.getAllMoves(colour)\r\n            const underCheck = this.isCheck(colour)\r\n            const player = colour === Piece.BLACK ? \"White\" : \"Black\"\r\n            if (underCheck && allMoves.length <= 0) {\r\n                return {isGameOver: true, message: player + \" wins by checkmate\"}\r\n            } else if (!underCheck && allMoves.length <= 0) {\r\n                return {isGameOver: false, message: \"Draw by stalemate\"}\r\n            } else if (this.isRepeatPosition(8)) {\r\n                return {isGameOver: false, message: \"Draw by threefold repetition\"}\r\n            }\r\n            return {isGameOver: false, message: \"\", allMoves: allMoves}\r\n        }\r\n\r\n        getAllMoves = (colour) => {\r\n            let squares = []\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour === colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        const moves = piece.getMoves(this)\r\n                        squares = squares.concat(moves)\r\n                    }\r\n                }\r\n            }\r\n            return squares\r\n        }\r\n        /**\r\n         * Goes through board for positional eval, like piece development, hardcoded for black\r\n         */\r\n        scanSquaresScore = (colour, attacked, defence) => {\r\n            const opponentColour = colour === Piece.WHITE ? Piece.BLACK : Piece.WHITE\r\n            let score = 0\r\n            let materialScore = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece.colour === colour) {\r\n                            materialScore += piece.points\r\n                        }\r\n                        if (piece.colour !== colour) {\r\n                            materialScore -= piece.points\r\n                        }\r\n                        // const moves = piece.getMoves(this)\r\n                        // //board control\r\n                        // score += moves.length\r\n                        // // piece mobility\r\n                        // if (piece instanceof Bishop) {\r\n                        //     score += (moves.length * 3)\r\n                        // } else if (piece instanceof Knight) {\r\n                        //     score += (moves.length * 3)\r\n                        // } else if (piece instanceof Queen) {\r\n                        //     score += (moves.length * 6)\r\n                        // } else if (piece instanceof Rook) {\r\n                        //     score += (moves.length * 5)\r\n                        // }\r\n\r\n                        // development\r\n                        if (piece instanceof Pawn && row !== 1) {\r\n                            score += 3\r\n                        } else if (piece instanceof Knight && row !== 0 && (col !== 1\r\n                            || col !== 6)) {\r\n                            score += 10\r\n                        } else if (piece instanceof Rook && row !== 0 && (col !== 0\r\n                            || col !== 7)) {\r\n                            score += 5\r\n                        } else if (piece instanceof Bishop && row !== 0 && (col !== 2\r\n                            || col !== 5)) {\r\n                            score += 10\r\n                        }\r\n                        // castling\r\n                        if (piece instanceof King && (col === 2 || col === 6)) {\r\n                            score +=20\r\n                        }\r\n                        // double pawns bad for ai, but good if he doubles opponent's pawn\r\n                        if (piece instanceof Pawn && piece.colour === colour) {\r\n                            if (this.getPiece(row + 1, col) instanceof Pawn && piece.colour === colour) {\r\n                                score -= 20\r\n                            }\r\n                        } else if (piece instanceof Pawn && piece.colour !== colour) {\r\n                            if (this.getPiece(row - 1, col) instanceof Pawn && piece.colour !== colour) {\r\n                                score += 20\r\n                            }\r\n                        }\r\n                        // under check == bad, check opponent == good\r\n                        if (piece instanceof King && piece.colour === colour) {\r\n                            if (this.isCheck(colour, attacked)) {\r\n                                score -= 10\r\n                            }\r\n                        }\r\n                        // else if (piece instanceof King && piece.colour === opponentColour) {\r\n                        //     if (this.isCheck(opponentColour, attacked)) {\r\n                        //         score += 10\r\n                        //     }\r\n                        // }\r\n                    }\r\n                }\r\n            }\r\n            return score + materialScore * 500\r\n        }\r\n\r\n        /**\r\n         * used for minimax heuristics\r\n         * @param colour colour making the next move\r\n         * @return {number} score of position\r\n         */\r\n        getScore = (colour) => {\r\n            const opponentColour = colour === Piece.WHITE ? Piece.BLACK : Piece.WHITE\r\n            // let materialScore = 0 // material control\r\n            // for (let row = 0; row < 8; row ++) {\r\n            //     for (let col = 0; col < 8; col ++) {\r\n            //         const piece = this.board[row][col]\r\n            //         if (piece instanceof Piece && piece.colour === colour) {\r\n            //             materialScore += piece.points\r\n            //         }\r\n            //         if (piece instanceof Piece && piece.colour !== colour) {\r\n            //             materialScore -= piece.points\r\n            //         }\r\n            //     }\r\n            // }\r\n            const attackedSquares = this.getAttackingSquares(opponentColour)\r\n            const attackScore = attackedSquares[0].length // board control\r\n            const defenseScore = attackedSquares[1].length // defense\r\n            const positionalScore = this.scanSquaresScore(colour, attackedSquares[0], attackedSquares[1])\r\n            return attackScore + positionalScore\r\n        }\r\n\r\n        getBoardString = () => {\r\n            const newBoard = []\r\n            for (let row = 0; row < 8; row++) {\r\n                const newRow = []\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        newRow.push(piece.getString())\r\n                    } else {\r\n                        newRow.push(null)\r\n                    }\r\n                }\r\n                newBoard.push(newRow)\r\n            }\r\n            return newBoard\r\n        }\r\n\r\n    }\r\n    /**\r\n     * This class represents a coordinate on the chess board\r\n     */\r\n    class Cell {\r\n        constructor(row, col) {\r\n            this.row = row\r\n            this.col = col\r\n        }\r\n    }\r\n    class Game {\r\n        // game has a board, game has players, game has turns, game has time\r\n        turnColour = Piece.WHITE\r\n        constructor() {\r\n            this.board = new Board()\r\n            this.players = [new Player(Piece.WHITE), new Player(Piece.BLACK)]\r\n        }\r\n\r\n        movePiece = (piece, move) => {\r\n            const result =  this.board.movePiece(piece, move)\r\n            this.turnColour = this.turnColour === Piece.WHITE ? Piece.BLACK : Piece.WHITE\r\n            return result\r\n        }\r\n        /**\r\n         * Get pieces eaten by colour\r\n         * @param colour\r\n         * @return {*[]}\r\n         */\r\n        getEatenPieces = (colour) => {\r\n            const moves = this.board.moves\r\n            return moves.filter(move => {\r\n                return move.ate !== null && move.ate.colour !== colour\r\n            }).map(x => x.ate)\r\n        }\r\n\r\n        undoMove = () => {\r\n            const isUndo = this.board.undoMove()\r\n            if (isUndo) {\r\n                this.turnColour = this.turnColour === Piece.WHITE ? Piece.BLACK : Piece.WHITE\r\n            }\r\n        }\r\n\r\n    }\r\n    class Move {\r\n        oldCell\r\n        newCell\r\n\r\n        constructor(oldCell, newCell, piece, isEnPassant = false,\r\n                    castle = {isCastle: false}, ate = null, isPromotion = false) {\r\n            this.oldCell = oldCell\r\n            this.newCell = newCell\r\n            this.piece = piece\r\n            this.isEnPassant = isEnPassant\r\n            this.castle = castle\r\n            this.ate = ate\r\n            this.isPromotion = isPromotion\r\n        }\r\n\r\n        getMoveString = () => {\r\n            return {\r\n                oldCellRow: this.oldCell.row,\r\n                oldCellCol: this.oldCell.col,\r\n                newCellRow: this.newCell.row,\r\n                newCellCol: this.newCell.col,\r\n                pieceString: this.piece.getString(),\r\n                isEnPassant: this.isEnPassant,\r\n                castle: this.castle.isCastle === false ? {isCastle: false} : {isCastle: true,\r\n                    rook:{\r\n                    pieceString : this.castle.rook.piece.getString(),\r\n                    oldCellRow: this.castle.rook.oldCell.row,\r\n                    oldCellCol: this.castle.rook.oldCell.col,\r\n                    newCellRow: this.castle.rook.newCell.row,\r\n                    newCellCol: this.castle.rook.newCell.col,\r\n                }},\r\n                ate: this.ate !== null ? this.ate.getString() : null,\r\n                isPromotion: this.isPromotion\r\n            }\r\n        }\r\n\r\n    }\r\n    class Piece {\r\n        static WHITE = -1\r\n        static BLACK = 1\r\n        isAlive = true\r\n        constructor(colour, cell, moves= []) {\r\n            this.colour = colour // white or black\r\n            this.cell = cell\r\n            this.moves = moves // moves made by the piece so far, [[startRow, startCol, endRow, endCol]], most recent at the back (can pop())\r\n        }\r\n    }\r\n    class Player {\r\n        // player has colour\r\n        constructor(colour) {\r\n            this.colour = colour\r\n        }\r\n    }\r\n    class Bishop extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1]]\r\n        points = 3\r\n        constructor(colour, cell, moves) {\r\n            super(colour, cell, moves)\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(this.cell, new Cell(newRow, newCol), this)\r\n                    if (!board.willCheck(this, move)) {\r\n                        moves.push(move)\r\n                    }\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        getAttack = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEatDefend(newRow, newCol)) {\r\n                    moves.push(new Move(this.cell, new Cell(newRow, newCol), this))\r\n                    if (board.canEatDefend(newRow, newCol)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            this.moves.push(move)\r\n\r\n            return {row: newRow, col: newCol}\r\n\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"b\"\r\n        }\r\n    }\r\n    class King extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\r\n        static KING_SIDE = 'king'\r\n        static QUEEN_SIDE = 'queen'\r\n        points = 9999\r\n        constructor(colour, cell, moves) {\r\n            super(colour, cell, moves)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            const attacked = board.getAttackingSquares(this.colour)[0]\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (((board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol))) && board.canKingMove(newRow, newCol, this.colour)) {\r\n                    const move = new Move(this.cell, new Cell(newRow, newCol), this)\r\n                    if (!board.willCheck(this, move)) {\r\n                        moves.push(move)\r\n                    }\r\n                }\r\n            }\r\n\r\n            const filterAttacked = moves.filter(move => { // king cannot move to squares under attack by enemy / pieces that are defended\r\n                for (const attack of attacked) {\r\n                    if (move.newCell.row === attack.newCell.row && move.newCell.col === attack.newCell.col) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            })\r\n            // castling move: if king has not moved + rook on respective square has not moved done\r\n            // + squares in between and king not attacked  + squares in between are empty\r\n            if (board.canCastle(this.colour, King.KING_SIDE, attacked)) {\r\n                const row = this.colour === Piece.BLACK ? 0 : 7\r\n                const col = 6\r\n                filterAttacked.push(new Move(this.cell, new Cell(row, col), this, false,\r\n                    {isCastle: true, rook: new Move(new Cell(row, 7), new Cell(row, 5), board.getPiece(row, 7))}))\r\n            }\r\n            if (board.canCastle(this.colour, King.QUEEN_SIDE, attacked)) {\r\n                const row = this.colour === Piece.BLACK ? 0 : 7\r\n                const col = 2\r\n                filterAttacked.push(new Move(this.cell, new Cell(row, col), this, false,\r\n                    {isCastle: true, rook: new Move(new Cell(row, 0), new Cell(row, 3), board.getPiece(row, 0))}))\r\n            }\r\n            return filterAttacked\r\n        }\r\n        getAttack = (board) => {\r\n            return this.getMoves(board)\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            if (move.castle.isCastle) {\r\n                board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = move.castle.rook.piece\r\n                board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = null\r\n                move.castle.rook.piece.cell.row = move.castle.rook.newCell.row\r\n                move.castle.rook.piece.cell.col = move.castle.rook.newCell.col\r\n            }\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            this.moves.push(move)\r\n\r\n            return {row: newRow, col: newCol}\r\n\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"k\"\r\n        }\r\n    }\r\n    class Knight extends Piece {\r\n        directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\r\n\r\n        points = 3\r\n        constructor(colour, cell, moves) {\r\n            super(colour, cell, moves)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol)) {\r\n                    const move = new Move(this.cell, new Cell(newRow, newCol), this)\r\n                    if (!board.willCheck(this, move)) {\r\n                        moves.push(move)\r\n                    }\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        getAttack = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (board.canEatDefend(newRow, newCol) || board.canMove(newRow, newCol)) {\r\n                    moves.push(new Move(this.cell, new Cell(newRow, newCol), this))\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            this.moves.push(move)\r\n\r\n            return {row: newRow, col: newCol}\r\n\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"n\"\r\n        }\r\n    }\r\n    class Pawn extends Piece {\r\n        points = 1\r\n        constructor(colour, cell, moves) {\r\n            super(colour, cell, moves)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            let newRow = this.cell.row + 1 * this.colour\r\n            let newCol = this.cell.col\r\n            if (board.canMove(newRow, newCol)) {\r\n                const move = new Move(this.cell, new Cell(newRow, newCol),\r\n                    this, undefined, undefined, undefined,\r\n                    newRow === 0 || newRow === 7)\r\n                if (!board.willCheck(this, move)) {\r\n                    moves.push(move)\r\n                }\r\n                newRow = this.cell.row + 2 * this.colour\r\n                if (board.canMove(newRow, newCol) && this.moves.length <= 0) {\r\n                    if (this.colour === Piece.BLACK && this.cell.row === 1) {\r\n                        const move = new Move(this.cell, new Cell(newRow, newCol), this)\r\n                        if (!board.willCheck(this, move)) {\r\n                            moves.push(move)\r\n                        }\r\n                    } else if (this.colour === Piece.WHITE && this.cell.row === 6) {\r\n                        const move = new Move(this.cell, new Cell(newRow, newCol), this)\r\n                        if (!board.willCheck(this, move)) {\r\n                            moves.push(move)\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col + 1\r\n            if (board.canEat(newRow, newCol, this.colour)) {\r\n                const move = new Move(this.cell, new Cell(newRow, newCol), this , undefined, undefined, undefined,\r\n                    newRow === 0 || newRow === 7)\r\n                if (!board.willCheck(this, move)) {\r\n                    moves.push(move)\r\n                }\r\n            }\r\n            // en passant\r\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\r\n                const prevMove = board.moves.slice(-1)[0]\r\n                if (prevMove.piece instanceof Pawn && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col + 1\r\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\r\n                    const move = new Move(this.cell, new Cell(newRow, newCol), this, true)\r\n                    if (!board.willCheck(this, move)) {\r\n                        moves.push(move)\r\n                    }\r\n                }\r\n\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col - 1\r\n            if (board.canEat(newRow, newCol, this.colour)) {\r\n                const move = new Move(this.cell, new Cell(newRow, newCol), this , undefined, undefined, undefined,\r\n                    newRow === 0 || newRow === 7)\r\n                if (!board.willCheck(this, move)) {\r\n                    moves.push(move)\r\n                }\r\n            }\r\n            // en passant\r\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\r\n                const prevMove = board.moves.slice(-1)[0]\r\n                if (prevMove.piece instanceof Pawn && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col - 1\r\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\r\n                    const move = new Move(this.cell, new Cell(newRow, newCol), this, true)\r\n                    if (!board.willCheck(this, move)) {\r\n                        moves.push(move)\r\n                    }\r\n                }\r\n\r\n            }\r\n            return moves\r\n        }\r\n        getAttack = (board) => {\r\n            const moves = []\r\n            let newRow = this.cell.row + 1 * this.colour\r\n            let newCol = this.cell.col + 1\r\n            if (board.canMove(newRow, newCol) || board.canEatDefend(newRow, newCol)) {\r\n                moves.push(new Move(this.cell, new Cell(newRow, newCol), this))\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col - 1\r\n            if (board.canMove(newRow, newCol) || board.canEatDefend(newRow, newCol)) {\r\n                moves.push(new Move(this.cell, new Cell(newRow, newCol), this))\r\n            }\r\n            return moves\r\n        }\r\n        /**\r\n         * Moves the piece\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            // const old = board[move.oldCell.row][move.oldCell.col]\r\n            // promotion\r\n            if (move.isEnPassant) {\r\n                const prevMove = boardObject.moves.slice(-1)[0]\r\n                const oldPiece = board[prevMove.newCell.row][prevMove.newCell.col]\r\n                if (oldPiece !== null) {\r\n                    move.ate = oldPiece\r\n                }\r\n                board[prevMove.newCell.row][prevMove.newCell.col] = null\r\n            }\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            if (move.isPromotion) {\r\n                board[newRow][newCol] = new Queen(this.colour, this.cell)\r\n                return {promotion: true, row: newRow, col: newCol}\r\n            }\r\n\r\n\r\n            this.moves.push(move)\r\n            return {row: newRow, col: newCol}\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"p\"\r\n        }\r\n    }\r\n    class Queen extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1], [0,1], [1,0], [0,-1],[-1,0]]\r\n        points = 9\r\n        constructor(colour, cell, moves) {\r\n            super(colour, cell, moves)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(this.cell, new Cell(newRow, newCol), this)\r\n                    if (!board.willCheck(this, move)) {\r\n                        moves.push(move)\r\n                    }\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        getAttack = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEatDefend(newRow, newCol)) {\r\n                    moves.push(new Move(this.cell, new Cell(newRow, newCol), this))\r\n                    if (board.canEatDefend(newRow, newCol)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            this.moves.push(move)\r\n\r\n            return {row: newRow, col: newCol}\r\n\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"q\"\r\n        }\r\n    }\r\n    class Rook extends Piece {\r\n        directions = [[0,1], [1,0], [0,-1],[-1,0]]\r\n        points = 5\r\n        constructor(colour, cell, moves) {\r\n            super(colour, cell, moves)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(this.cell, new Cell(newRow, newCol), this)\r\n                    if (!board.willCheck(this, move)) {\r\n                        moves.push(move)\r\n                    }\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        getAttack = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEatDefend(newRow, newCol)) {\r\n                    const move = new Move(this.cell, new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                    if (board.canEatDefend(newRow, newCol)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            this.moves.push(move)\r\n\r\n            return {row: newRow, col: newCol}\r\n\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"r\"\r\n        }\r\n    }\r\n\r\n\r\n    const data = message.data\r\n    const nextMove = ab(data[0], data[1])\r\n    postMessage(nextMove.getMoveString())\r\n}\r\n// eslint-disable-next-line no-restricted-globals,no-undef\r\nself.addEventListener(\"message\", test);\r\n"],"names":["self","addEventListener","async","message","nodes","evaluate","board","colour","getScore","switchColour","Piece","BLACK","WHITE","sortMoves","a","b","ate","points","miniMax","depth","alpha","beta","isMax","maxPlayer","currentPlayer","testGameOver","isGameOver","Number","MAX_VALUE","moves","allMoves","sort","randomIndex","Math","floor","random","length","bestMove","maxEval","move","movePiece","piece","currentEval","undoMove","max","minEval","Board","constructor","this","newBoard","Rook","Cell","Knight","Bishop","Queen","King","Pawn","setBoardString","boardString","row","newRow","col","pieceString","push","actualColour","slice","clonePiece","cell","getBoard","getPiece","isEmpty","isOutSide","isUnderCheck","canEat","canEatDefend","canMove","canKingMove","directions","direction","newCol","getAttackingSquares","squares","getPc","getAttack","apply","result","oldCell","pop","prevRow","prevCol","newCell","isEnPassant","isPromotion","castle","isCastle","rook","kingHasMoved","rookHasMoved","side","KING_SIDE","castlingSquaresIsEmpty","cols","castlingSquaresUnderAttack","attacked","canCastle","promotePiece","isCheck","attackArray","willCheck","getAllMoves","concat","getMoves","isRepeatPosition","numMoves","lengthCheck","getLastNMoves","firstMove","secondMove","i","current","currentTwo","underCheck","player","scanSquaresScore","defence","score","materialScore","opponentColour","attackedSquares","attackScore","positionalScore","getBoardString","getString","Move","getMoveString","oldCellRow","oldCellCol","newCellRow","newCellCol","static","isAlive","super","currentRow","currentCol","boardObject","oldPiece","filterAttacked","filter","attack","QUEEN_SIDE","undefined","prevMove","abs","promotion","data","nextMove","copyBoard","ab","postMessage"],"sourceRoot":""}