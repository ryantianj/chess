{"version":3,"file":"static/js/worker.worker.7815420c.worker.js","mappings":"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","sources":["Chess/ai/worker.worker.js"],"sourcesContent":["let totalMoves = 0\r\nlet isEndGame = false\r\nconst test = async (message) => {\r\n   // https://chess.stackexchange.com/questions/40362/my-transposition-tables-implementation-slows-down-alpha-beta-pruning\r\n    // https://github.com/maksimKorzh/chess_programming/blob/master/src/negamax/tutorials/alpha-beta_quiescence_search/chess.c\r\n    //https://stackoverflow.com/questions/29990116/alpha-beta-prunning-with-transposition-table-iterative-deepening\r\n    // console.log(\"mem\", mem.size)\r\n    // TODO: check if endgame before running search, set score tables before search, done after set board string\r\n    // End game defined by: either side has a queen + pawns only / either side has at most 2 minor pieces\r\n    // TODO: update piece score tables based on position before running search, done after set board string\r\n    // for knight, -5 per missing pawn of any colour\r\n    // for bishop, fianchetto bonus points, control over square colour (using pawns), bishop pair bonus\r\n    // rook penalty for trap by king, bonus for open file, bonus for each missing pawn\r\n    // pawn, increase value +30 if past pawn (no pawns of opposing colour on the 3 cols), decrease value if doubled (-10)\r\n    // let nodes = 0\r\n    const ab =  (boardString, depth, moveString, colour) => {\r\n        const copyBoard = new Board()\r\n        copyBoard.setBoardString(boardString)\r\n        // const start = performance.now()\r\n        copyBoard.moves = moveString.map(x => Move.parseMove(copyBoard, x))\r\n        isEndGame = copyBoard.isEndGame()\r\n        if (isEndGame) {\r\n            console.log(\"endgame\")\r\n            copyBoard.setEndGame()\r\n        }\r\n        copyBoard.updatePieceValues(totalMoves)\r\n        const mem = new Map()\r\n        const result = miniMax(copyBoard, depth, -Number.MAX_VALUE, Number.MAX_VALUE, colour, colour, depth, mem)\r\n        // const result = rootNegaMax(depth, copyBoard, Piece.BLACK, Piece.BLACK)\r\n        // const end = performance.now()\r\n        // console.log(end - start, totalMoves, nodes)\r\n        // console.log(\"eval\", nodes)\r\n        console.log(\"Score\", result[1])\r\n        mem.clear()\r\n        return result[0] // should be a move\r\n    }\r\n\r\n    const miniMax = (board, depth, alpha, beta, maxPlayer, currentPlayer, orgDepth, mem) => {\r\n        if (depth === 0) {\r\n            // const result = evaluate(board, maxPlayer)\r\n            let result\r\n            // if (maxPlayer === currentPlayer && board.moves.slice(-1)[0].ate !== null) {\r\n            //     result = quiesce(alpha, beta, board, currentPlayer, 1)\r\n            // } else {\r\n            //     const boardHash = board.getBoardHash() + maxPlayer.toString()\r\n            //     if (mem.has(boardHash)) {\r\n            //         result = mem.get(boardHash)\r\n            //     } else {\r\n            //         result = evaluate(board, maxPlayer)\r\n            //         mem.set(boardHash, result)\r\n            //     }\r\n            // }\r\n            // const boardHash = board.getBoardHash() + maxPlayer.toString()\r\n            // const memGet = mem.get(boardHash)\r\n\r\n            // if (memGet !== undefined) {\r\n            //     result = memGet\r\n            // } else {\r\n                result = board.getScore(maxPlayer)\r\n            //     mem.set(boardHash, result)\r\n            // }\r\n            return [null, result]\r\n        }\r\n        const moves = board.getAllMoves(currentPlayer) // TODO: time consuming\r\n        moves.sort(sortMoves)\r\n        let bestMove;\r\n\r\n        if (currentPlayer === maxPlayer) {\r\n            let maxEval = -90000\r\n            let illegal = 0\r\n            for (const move of moves) {\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    illegal++\r\n                    board.undoMove()\r\n                    continue\r\n                }\r\n                if (bestMove === undefined) {\r\n                    bestMove = move\r\n                }\r\n                const currentEval = miniMax(board, depth - 1, alpha, beta, maxPlayer, currentPlayer === Piece.BLACK ? Piece.WHITE : Piece.BLACK, orgDepth, mem)[1]\r\n                board.undoMove()\r\n                if (currentEval > maxEval) {\r\n                    maxEval = currentEval\r\n                    bestMove = move\r\n                }\r\n                alpha = Math.max(alpha, currentEval)\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) { // TODO: check stalemate\r\n                return [null, -90000]\r\n            }\r\n            return [bestMove, maxEval]\r\n        } else {\r\n            let minEval = 90000\r\n            let illegal = 0\r\n            for (const move of moves) {\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    illegal++\r\n                    board.undoMove()\r\n                    continue\r\n                }\r\n                if (bestMove === undefined) {\r\n                    bestMove = move\r\n                }\r\n                const currentEval = miniMax(board, depth - 1, alpha, beta, maxPlayer, currentPlayer === Piece.BLACK ? Piece.WHITE : Piece.BLACK, orgDepth, mem)[1]\r\n                board.undoMove()\r\n                if (currentEval < minEval) {\r\n                    minEval = currentEval\r\n                    bestMove = move\r\n                }\r\n                beta = Math.min(beta, currentEval)\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) {\r\n                return [null, 90000]\r\n            }\r\n            return [bestMove, minEval]\r\n        }\r\n    }\r\n\r\n    // const sortMovesQuiesce = (a, b) => {\r\n    //     if (a.ate !== null && b.ate !== null) {\r\n    //         const aScore = a.piece.points - a.ate.points\r\n    //         const bScore = b.piece.points - b.ate.points\r\n    //         return aScore < bScore ? 1: -1\r\n    //     } else if (a.ate !== null) {\r\n    //         return -1\r\n    //     } else if (b.ate !== null) {\r\n    //         return 1\r\n    //     }\r\n    //     return 0\r\n    // }\r\n    const sortMoves = (a, b) => {\r\n        if (a.ate !== null && b.ate !== null) {\r\n            const aScore = a.piece.points - a.ate.points\r\n            const bScore = b.piece.points - b.ate.points\r\n            return aScore < bScore ? -1: 1\r\n        } else if (a.ate !== null) {\r\n            return -1\r\n        } else if (b.ate !== null) {\r\n            return 1\r\n        } else {\r\n            const aScore = a.piece.colour === Piece.WHITE ? a.piece.whiteScore[a.newCell.row][a.newCell.col] : a.piece.blackScore[a.newCell.row][a.newCell.col]\r\n            const bScore = b.piece.colour === Piece.WHITE ? b.piece.whiteScore[b.newCell.row][b.newCell.col] : b.piece.blackScore[b.newCell.row][b.newCell.col]\r\n            return aScore < bScore ? 1: -1\r\n        }\r\n    }\r\n\r\n    // const quiesce = (alpha, beta, board, colour, depth) => {\r\n    //     let evaluation\r\n    //     const boardHash = board.getBoardHash() + colour.toString()\r\n    //     if (mem.has(boardHash)) {\r\n    //         evaluation = mem.get(boardHash)\r\n    //     } else {\r\n    //         evaluation = evaluate(board, colour)\r\n    //         mem.set(boardHash, evaluation)\r\n    //     }\r\n    //\r\n    //     if (depth === 0) {\r\n    //         return evaluation\r\n    //     }\r\n    //     if (evaluation >= beta) {\r\n    //         return beta\r\n    //     }\r\n    //\r\n    //     alpha = Math.max(alpha, evaluation)\r\n    //     const moves = board.getAllMoves(colour)\r\n    //     moves.sort(sortMoves)\r\n    //     for (const move of moves) {\r\n    //         if (move.ate !== null && move.ate.points < move.piece.points) { //  && move.ate.points > move.piece.points\r\n    //             board.movePiece(move.piece, move)\r\n    //             let score = -quiesce(-beta, -alpha, board, switchColour(colour), depth - 1)\r\n    //             board.undoMove()\r\n    //             if (score >= beta) {\r\n    //                 return beta\r\n    //             }\r\n    //             if (score > alpha) {\r\n    //                 alpha = score\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return alpha\r\n    // }\r\n    //\r\n    // const quiesceOdd = (alpha, beta, board, colour, depth) => {\r\n    //     // const evaluation = evaluate(board, colour)\r\n    //     let evaluation\r\n    //     const boardHash = board.getBoardHash() + colour.toString()\r\n    //     if (mem.has(boardHash)) {\r\n    //         evaluation = mem.get(boardHash)\r\n    //     } else {\r\n    //         evaluation = evaluate(board, colour)\r\n    //         mem.set(boardHash, evaluation)\r\n    //     }\r\n    //\r\n    //     if (depth === 0) {\r\n    //         return evaluation\r\n    //     }\r\n    //     if (evaluation >= beta) {\r\n    //         return beta\r\n    //     }\r\n    //\r\n    //     alpha = Math.max(alpha, evaluation)\r\n    //     const moves = board.getAllMoves(colour)\r\n    //     moves.sort(sortMovesQuiesce)\r\n    //     for (const move of moves) {\r\n    //         if (move.ate !== null) { //  && move.ate.points > move.piece.points\r\n    //             board.movePiece(move.piece, move)\r\n    //             let score = -quiesce(-beta, -alpha, board, switchColour(colour), depth - 1)\r\n    //             board.undoMove()\r\n    //             if (score >= beta) {\r\n    //                 return beta\r\n    //             }\r\n    //             if (score > alpha) {\r\n    //                 alpha = score\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return alpha\r\n    // }\r\n\r\n    // const negaMax = (depth, board, colour, maxColour) => {\r\n    //     if (depth === 0) {\r\n    //         return evaluate(board, maxColour)\r\n    //     }\r\n    //     const testGameOver = board.isGameOver(colour).isGameOver\r\n    //     if (testGameOver && colour === maxColour) {\r\n    //         return -Number.MAX_VALUE\r\n    //     }\r\n    //     if (testGameOver && colour !== maxColour) {\r\n    //         return Number.MAX_VALUE\r\n    //     }\r\n    //     let max = -Number.MAX_VALUE\r\n    //     const moves = board.getAllMoves(colour)\r\n    //     for (const move of moves) {\r\n    //         board.movePiece(move.piece, move)\r\n    //         const currentEval = -negaMax(depth - 1, board, switchColour(colour), maxColour)\r\n    //         if (currentEval > max) {\r\n    //             max = currentEval\r\n    //         }\r\n    //         board.undoMove()\r\n    //     }\r\n    //     return max\r\n    // }\r\n    // const rootNegaMax = (depth, board, colour, maxColour) => {\r\n    //     const rootMoves = board.getAllMoves(maxColour)\r\n    //     let max = -Number.MAX_VALUE\r\n    //     const randomIndex = Math.floor(Math.random() * (rootMoves.length - 1))\r\n    //     let bestMove = rootMoves.length > 0 ? rootMoves[randomIndex] : null\r\n    //     for (const move of rootMoves) {\r\n    //         board.movePiece(move.piece, move)\r\n    //         const score = negaMax(depth, board, colour, maxColour)\r\n    //         if (score > max) {\r\n    //             max = score\r\n    //             bestMove = move\r\n    //         }\r\n    //         board.undoMove()\r\n    //     }\r\n    //     return bestMove\r\n    //\r\n    // }\r\n    class Board {\r\n        board;\r\n\r\n        constructor() {\r\n            this.board = this.newBoard()\r\n            this.moves = []\r\n        }\r\n\r\n        newBoard = () => {\r\n            const startingBoard = [\r\n                [new Rook(Piece.BLACK, new Cell(0,0)), new Knight(Piece.BLACK, new Cell(0, 1)), new Bishop(Piece.BLACK, new Cell(0, 2)), new Queen(Piece.BLACK, new Cell(0, 3)), new King(Piece.BLACK, new Cell(0, 4)), new Bishop(Piece.BLACK, new Cell(0, 5)), new Knight(Piece.BLACK, new Cell(0, 6)), new Rook(Piece.BLACK, new Cell(0,7))],\r\n                [new Pawn(Piece.BLACK, new Cell(1, 0)), new Pawn(Piece.BLACK, new Cell(1, 1)), new Pawn(Piece.BLACK, new Cell(1, 2)), new Pawn(Piece.BLACK, new Cell(1, 3)), new Pawn(Piece.BLACK, new Cell(1, 4)), new Pawn(Piece.BLACK, new Cell(1, 5)), new Pawn(Piece.BLACK, new Cell(1, 6)), new Pawn(Piece.BLACK, new Cell(1, 7))],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [new Pawn(Piece.WHITE, new Cell(6, 0)), new Pawn(Piece.WHITE, new Cell(6, 1)), new Pawn(Piece.WHITE, new Cell(6, 2)), new Pawn(Piece.WHITE, new Cell(6, 3)), new Pawn(Piece.WHITE, new Cell(6, 4)), new Pawn(Piece.WHITE, new Cell(6, 5)), new Pawn(Piece.WHITE, new Cell(6, 6)), new Pawn(Piece.WHITE, new Cell(6, 7))],\r\n                [new Rook(Piece.WHITE, new Cell(7,0)), new Knight(Piece.WHITE, new Cell(7, 1)), new Bishop(Piece.WHITE, new Cell(7, 2)), new Queen(Piece.WHITE, new Cell(7, 3)), new King(Piece.WHITE, new Cell(7, 4)), new Bishop(Piece.WHITE, new Cell(7, 5)), new Knight(Piece.WHITE, new Cell(7, 6)), new Rook(Piece.WHITE, new Cell(7,7))],\r\n            ]\r\n            return startingBoard\r\n        }\r\n        // update piece square tables for endgame\r\n        setEndGame = () => {\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null && piece.whiteScoreEnd !== undefined) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            piece.whiteScore = piece.whiteScoreEnd\r\n                        } else {\r\n                            piece.blackScore = piece.blackScoreEnd\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // update values of pieces\r\n        updatePieceValues = (totalMoves) => {\r\n            const MOVE_THRESHOLD = 10\r\n            // for knight, -5 per missing pawn of any colour done\r\n            // for bishop, fianchetto bonus points, control over square colour (using pawns), bishop pair bonus\r\n            // rook penalty for trap by king, bonus for open file, bonus for each missing pawn\r\n            // pawn, increase value +30 if past pawn (no pawns of opposing colour on the 3 cols), decrease value if doubled (-10)\r\n\r\n            let whitePawnCount = 0\r\n            let blackPawnCount = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece instanceof Pawn) {\r\n                            if (piece.colour === Piece.WHITE) {\r\n                                whitePawnCount++\r\n                            } else {\r\n                                blackPawnCount++\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // first ten moves, bad to move queen out, and encourage piece development\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece instanceof Queen) {\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][3]+=50\r\n                                } else {\r\n                                    piece.blackScore[0][3]+=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Knight) {\r\n                            piece.points-= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][1]-=50\r\n                                    piece.whiteScore[7][6]-=50\r\n                                } else {\r\n                                    piece.blackScore[0][1]-=50\r\n                                    piece.blackScore[0][6]-=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Bishop) {\r\n                            piece.points+= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][2]-=50\r\n                                    piece.whiteScore[7][5]-=50\r\n                                } else {\r\n                                    piece.blackScore[0][2]-=50\r\n                                    piece.blackScore[0][5]-=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Rook) {\r\n                            piece.points+= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                        }\r\n                        if (piece instanceof Pawn) {\r\n                            let past = true\r\n                            if (col + 1 < 8) {\r\n                                for (let i = 0; i < 8; i++) {\r\n                                    if (this.getPiece(i, col + 1) instanceof Pawn) {\r\n                                        past = false\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (col - 1 >= 0) {\r\n                                for (let i = 0; i < 8; i++) {\r\n                                    if (this.getPiece(i, col - 1) instanceof Pawn) {\r\n                                        past = false\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (past) {\r\n                                piece.points+=30\r\n                            }\r\n                            let doubled = false\r\n                            for (let i = 0; i < 8; i++) {\r\n                                if (piece instanceof Pawn && i !== row) {\r\n                                    doubled = true\r\n                                }\r\n                            }\r\n                            if (doubled) {\r\n                                piece.points-=10\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        isEndGame = () => {\r\n            // End game defined by: either side has a queen + pawns only / either side has at most 2 minor pieces\r\n            let countWhitePieces = 0\r\n            let countBlackPieces = 0\r\n            let countWhiteQueen = 0\r\n            let countBlackQueen = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece instanceof Queen) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            countWhiteQueen++\r\n                        } else {\r\n                            countBlackQueen++\r\n                        }\r\n                    }\r\n                    if (piece instanceof Rook || piece instanceof Bishop || piece instanceof Knight) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            countWhitePieces++\r\n                        } else {\r\n                            countBlackPieces++\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return ((countWhiteQueen <= 1 && countWhitePieces <=0) || (countBlackQueen <= 1  && countBlackPieces <=0))\r\n                || ((countWhitePieces <=3 && countWhiteQueen <= 0) || (countBlackPieces <=3  && countBlackQueen <= 0))\r\n        }\r\n\r\n        setBoardString = (boardString) => {\r\n            const newBoard = []\r\n            for (let row = 0; row < 8; row++) {\r\n                const newRow = []\r\n                for (let col = 0; col < 8; col++) {\r\n                    const pieceString = boardString[row][col]\r\n                    if (pieceString === null) {\r\n                        newRow.push(null)\r\n                    } else {\r\n                        const pieceColour = pieceString.slice(0, 1)\r\n                        const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\r\n                        const piece = pieceString.slice(1, 2)\r\n                        if (piece === \"b\") {\r\n                            newRow.push(new Bishop(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'k') {\r\n                            newRow.push(new King(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'n') {\r\n                            newRow.push(new Knight(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'p') {\r\n                            newRow.push(new Pawn(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'q') {\r\n                            newRow.push(new Queen(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'r') {\r\n                            newRow.push(new Rook(actualColour, new Cell(row, col)))\r\n                        } else {\r\n                            newRow.push(null)\r\n                        }\r\n                    }\r\n                }\r\n                newBoard.push(newRow)\r\n            }\r\n            this.board = newBoard\r\n        }\r\n\r\n        getBoardHash = () => {\r\n            let str = \"\"\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        str += this.getPiece(row, col).getString()\r\n                    } else {\r\n                        str += \" \"\r\n                    }\r\n                }\r\n            }\r\n            return str\r\n        }\r\n\r\n        /**\r\n         * Returns the board represented by the array\r\n         */\r\n        getBoard = () => {\r\n            return this.board\r\n        }\r\n        /**\r\n         * Returns piece at the coordinates\r\n         */\r\n        getPiece = (row, col) => {\r\n            return this.board[row][col]\r\n        }\r\n\r\n        /**\r\n         * Returns if the cell is empty\r\n         */\r\n        isEmpty = (row, col) => {\r\n            if (this.isOutSide(row, col)) {\r\n                return false\r\n            }\r\n            return this.board[row][col] === null\r\n        }\r\n        isUnderCheck = (colour) => {\r\n            return false\r\n        }\r\n        isOutSide = (row, col) => {\r\n            return row < 0 || col < 0 || row > 7 || col > 7\r\n        }\r\n\r\n        canEat = (row, col, colour) => {\r\n            return !this.isOutSide(row, col) && !this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour\r\n        }\r\n\r\n\r\n        canMove = (row, col) => {\r\n            return !this.isOutSide(row, col) && this.isEmpty(row, col)\r\n        }\r\n\r\n        canKingMove = (row, col, colour) => {\r\n            const directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\r\n            for (const direction of directions) {\r\n                const newRow = row + direction[0]\r\n                const newCol = col + direction[1]\r\n                if (!this.isOutSide(newRow, newCol) && !this.isEmpty(newRow, newCol)\r\n                    && (this.getPiece(newRow, newCol).name === Piece.KING && this.getPiece(newRow, newCol).colour !== colour)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n\r\n        movePiece = (piece, move) => {\r\n            move.piece.movePiece(move, this)\r\n            this.moves.push(move)\r\n        }\r\n\r\n        undoMove = () => {\r\n            if (this.moves.length > 0) {\r\n                const move = this.moves.pop()\r\n                const prevRow = move.oldCell.row\r\n                const prevCol = move.oldCell.col\r\n                const piece = this.board[move.newCell.row][move.newCell.col]\r\n                if (piece === null) {\r\n                    console.log(this.getBoardString(), move)\r\n                }\r\n\r\n                this.board[prevRow][prevCol] = piece\r\n                piece.cell.row = prevRow\r\n                piece.cell.col = prevCol\r\n                if (move.isEnPassant) { // add back pawn\r\n                    this.board[move.ate.cell.row][move.ate.cell.col] = move.ate\r\n                    this.board[move.newCell.row][move.newCell.col] = null\r\n                    return true\r\n                } else if (move.isPromotion) { // remove piece, add back pawn\r\n                    this.board[prevRow][prevCol] = new Pawn(piece.colour, piece.cell, piece.moves)\r\n                } else if (move.castle.isCastle) { // king will be undone, need to undo rook\r\n                    this.board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = move.castle.rook.piece\r\n                    move.castle.rook.piece.cell.row = move.castle.rook.oldCell.row\r\n                    move.castle.rook.piece.cell.col = move.castle.rook.oldCell.col\r\n                    this.board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = null\r\n                }\r\n                this.board[move.newCell.row][move.newCell.col] = move.ate\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n\r\n        kingHasMoved = (colour) => {\r\n            for (const move of this.moves) {\r\n                if (move.piece.name === Piece.KING && move.piece.colour === colour) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        rookHasMoved = (colour, side) => {\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const col = side === King.KING_SIDE ? 7 : 0\r\n            if (!(this.getPiece(row, col) !== null && this.getPiece(row, col).name === Piece.ROOK)) { // no rook on cell\r\n                return true\r\n            }\r\n            for (const move of this.moves) {\r\n                if (move.piece.name === Piece.ROOK && move.piece.colour === colour && move.oldCell.row === row && move.oldCell.col === col) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        castlingSquaresIsEmpty = (colour, side) => {\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const cols = side === King.KING_SIDE ? [5,6] : [1,2,3]\r\n            for (const col of cols) {\r\n                if (!this.isEmpty(row, col)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n\r\n        // returns if colour is under check, need check for castling\r\n        isIllegal = (colour, move) => {\r\n            // get colour king first\r\n            let king;\r\n            let kingCount = 0 // make sure kings are not eaten\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.name === Piece.KING) {\r\n                            kingCount++\r\n                            if (piece.colour === colour) {\r\n                                king = piece\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // if (kingCount < 2) {\r\n            //     return true\r\n            // }\r\n            if (move.isCastle) {\r\n                const moves = this.getAllMoves(colour * -1)\r\n                const row = move.newCell.row\r\n                if (move.newCell.col === 6) { // kingside\r\n                    for (const opp of moves) {\r\n                        const moveRow = opp.newCell.row\r\n                        const moveCol = opp.newCell.col\r\n                        if (moveRow === row && (moveCol === 6 || moveCol === 5 || moveCol === 4)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (const opp of moves) {\r\n                        const moveRow = opp.newCell.row\r\n                        const moveCol = opp.newCell.col\r\n                        if (moveRow === row && (moveCol === 2 || moveCol === 3 || moveCol === 4)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.isCheck(this, king)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * Checks if game is over for colour, means other colour wins\r\n         * @param colour\r\n         * @return {*[]}\r\n         */\r\n\r\n        getAllMoves = (colour) => {\r\n            let squares = []\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour === colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        const moves = piece.getMoves(this)\r\n                        squares = squares.concat(moves)\r\n                    }\r\n                }\r\n            }\r\n            return squares\r\n        }\r\n        /**\r\n         * Goes through board for positional eval, like piece development, hardcoded for black\r\n         */\r\n        scanSquaresScore = (colour) => {\r\n            let score = 0\r\n            let materialScore = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            materialScore += piece.points\r\n                        } else {\r\n                            materialScore -= piece.points\r\n                        }\r\n                        // const moves = piece.getMoves(this)\r\n                        // //board control\r\n                        // score += moves.length\r\n                        // // piece mobility\r\n                        // if (piece instanceof Bishop) {\r\n                        //     score += (moves.length * 3)\r\n                        // } else if (piece instanceof Knight) {\r\n                        //     score += (moves.length * 3)\r\n                        // } else if (piece instanceof Queen) {\r\n                        //     score += (moves.length * 6)\r\n                        // } else if (piece instanceof Rook) {\r\n                        //     score += (moves.length * 5)\r\n                        // }\r\n\r\n                        // development / positional score\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            score += piece.whiteScore[row][col]\r\n                        } else {\r\n                            score -= piece.blackScore[row][col]\r\n                        }\r\n\r\n                        // double pawns bad for ai, but good if he doubles opponent's pawn\r\n                        // if (piece.name === Piece.PAWN && piece.colour === Piece.WHITE) {\r\n                        //     if (!this.isEmpty(row + 1, col) && this.getPiece(row + 1, col).name === Piece.PAWN && piece.colour === Piece.WHITE) {\r\n                        //         score -= 20\r\n                        //     }\r\n                        // } else if (piece.name === Piece.PAWN && piece.colour !== Piece.WHITE) {\r\n                        //     if (!this.isEmpty(row - 1, col) && this.getPiece(row - 1, col).name === Piece.PAWN && piece.colour !== Piece.WHITE) {\r\n                        //         score += 20\r\n                        //     }\r\n                        // }\r\n                        // under check == bad, check opponent == good\r\n                        // if (piece.name === Piece.KING && piece.colour === colour) {\r\n                        //     if (this.isCheck(colour, attacked)) {\r\n                        //         score -= 10\r\n                        //     }\r\n                        // }\r\n                        // else if (piece instanceof King && piece.colour === opponentColour) {\r\n                        //     if (this.isCheck(opponentColour, attacked)) {\r\n                        //         score += 10\r\n                        //     }\r\n                        // }\r\n                    }\r\n                }\r\n            }\r\n            // if (this.board[3][4] instanceof Pawn && this.board[3][4].colour === Piece.WHITE\r\n            // && this.board) {\r\n            //     console.log(this.board)\r\n            // }\r\n            return score + materialScore\r\n        }\r\n\r\n        /**\r\n         * used for minimax heuristics\r\n         * @param colour colour making the next move\r\n         * @return {number} score of position\r\n         */\r\n        getScore = (colour) => {\r\n            // let materialScore = 0 // material control\r\n            // for (let row = 0; row < 8; row ++) {\r\n            //     for (let col = 0; col < 8; col ++) {\r\n            //         const piece = this.board[row][col]\r\n            //         if (piece instanceof Piece && piece.colour === colour) {\r\n            //             materialScore += piece.points\r\n            //         }\r\n            //         if (piece instanceof Piece && piece.colour !== colour) {\r\n            //             materialScore -= piece.points\r\n            //         }\r\n            //     }\r\n            // }\r\n            // const attackedSquares = this.getAttackingSquares(opponentColour) // heavy operation\r\n            // const attackScore = attackedSquares[0].length // board control\r\n            // const defenseScore = attackedSquares[1].length // defense\r\n            const positionalScore = this.scanSquaresScore(colour)\r\n            return (positionalScore) * colour * -1\r\n        }\r\n\r\n        getBoardString = () => {\r\n            const newBoard = []\r\n            for (let row = 0; row < 8; row++) {\r\n                const newRow = []\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        newRow.push(piece.getString())\r\n                    } else {\r\n                        newRow.push(null)\r\n                    }\r\n                }\r\n                newBoard.push(newRow)\r\n            }\r\n            return newBoard\r\n        }\r\n\r\n    }\r\n    /**\r\n     * This class represents a coordinate on the chess board\r\n     */\r\n    class Cell {\r\n        constructor(row, col) {\r\n            this.row = row\r\n            this.col = col\r\n        }\r\n    }\r\n    class Move {\r\n        oldCell\r\n        newCell\r\n\r\n        constructor(oldCell, newCell, piece, isEnPassant = false,\r\n                    castle = {isCastle: false}, ate = null, isPromotion = false) {\r\n            this.oldCell = oldCell\r\n            this.newCell = newCell\r\n            this.piece = piece\r\n            this.isEnPassant = isEnPassant\r\n            this.castle = castle\r\n            this.ate = ate\r\n            this.isPromotion = isPromotion\r\n        }\r\n\r\n        getMoveString = () => {\r\n            return {\r\n                oldCellRow: this.oldCell.row,\r\n                oldCellCol: this.oldCell.col,\r\n                newCellRow: this.newCell.row,\r\n                newCellCol: this.newCell.col,\r\n                pieceString: this.piece.getString(),\r\n                isEnPassant: this.isEnPassant,\r\n                castle: this.castle.isCastle === false ? {isCastle: false} : {isCastle: true,\r\n                    rook:{\r\n                    pieceString : this.castle.rook.piece.getString(),\r\n                    oldCellRow: this.castle.rook.oldCell.row,\r\n                    oldCellCol: this.castle.rook.oldCell.col,\r\n                    newCellRow: this.castle.rook.newCell.row,\r\n                    newCellCol: this.castle.rook.newCell.col,\r\n                }},\r\n                ate: this.ate !== null ? this.ate.getString() : null,\r\n                isPromotion: this.isPromotion\r\n            }\r\n        }\r\n        static parseMove = (board, data) => {\r\n            const parseMove = new Move(\r\n                new Cell(data.oldCellRow, data.oldCellCol),\r\n                new Cell(data.newCellRow, data.newCellCol),\r\n                Piece.parsePieceString(data.pieceString),\r\n                data.isEnPassant,\r\n                {isCastle: false},\r\n                null,\r\n                data.isPromotion\r\n            )\r\n\r\n            if (data.castle.isCastle) {\r\n                const rookObj = data.castle.rook\r\n                parseMove.castle.isCastle = true\r\n                parseMove.castle.rook = new Move(new Cell(rookObj.oldCellRow, rookObj.oldCellCol)\r\n                    , new Cell(rookObj.newCellRow, rookObj.newCellCol), board.getPiece(rookObj.oldCellRow, rookObj.oldCellCol))\r\n            }\r\n            return parseMove\r\n        }\r\n\r\n    }\r\n    class Piece {\r\n        static WHITE = -1\r\n        static BLACK = 1\r\n        static ROOK = \"r\"\r\n        static BISHOP = \"b\"\r\n        static KNIGHT = \"n\"\r\n        static KING = \"k\"\r\n        static QUEEN = \"q\"\r\n        static PAWN = \"p\"\r\n        constructor(colour, cell) {\r\n            this.colour = colour // white or black\r\n            this.cell = cell\r\n        }\r\n        static parsePieceString = (pieceString) => {\r\n            const pieceColour = pieceString.slice(0, 1)\r\n            const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\r\n            const piece = pieceString.slice(1, 2)\r\n            if (piece === \"b\") {\r\n                return new Bishop(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'k') {\r\n                return new King(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'n') {\r\n                return new Knight(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'p') {\r\n                return new Pawn(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'q') {\r\n                return new Queen(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'r') {\r\n                return new Rook(actualColour, new Cell(0, 0))\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    class Bishop extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1]]\r\n        points = 330\r\n        name = Piece.BISHOP\r\n        whiteScore = [\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-10,  0,  5, 10, 10,  5,  0,-10],\r\n            [-10,  5,  5, 10, 10,  5,  5,-10],\r\n            [-10,  0, 10, 10, 10, 10,  0,-10],\r\n            [-10, 10, 10, 10, 10, 10, 10,-10],\r\n            [-10,  5,  0,  0,  0,  0,  5,-10],\r\n            [-20,-10,-10,-10,-10,-10,-10,-20]\r\n        ]\r\n        blackScore = [\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n            [-10,  5,  0,  0,  0,  0,  5,-10],\r\n            [-10, 10, 10, 10, 10, 10, 10,-10],\r\n            [-10,  0, 10, 10, 10, 10,  0,-10],\r\n            [-10,  5,  5, 10, 10,  5,  5,-10],\r\n            [-10,  0,  5, 10, 10,  5,  0,-10],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if (rowDiff !== colDiff) {\r\n                return false\r\n            }\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"b\"\r\n        }\r\n    }\r\n    class King extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\r\n        static KING_SIDE = -1\r\n        static QUEEN_SIDE = 1\r\n        name = Piece.KING\r\n        points = 90001\r\n\r\n        whiteScore = [\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-20,-30,-30,-40,-40,-30,-30,-20],\r\n            [-10,-20,-20,-20,-20,-20,-20,-10],\r\n            [20, 20,  0,  0,  0,  0, 20, 20],\r\n            [20, 30, 10,  0,  0, 10, 30, 20]\r\n        ]\r\n\r\n        blackScore = [\r\n            [20, 30, 10,  0,  0, 10, 30, 20],\r\n            [20, 20,  0,  0,  0,  0, 20, 20],\r\n            [-10,-20,-20,-20,-20,-20,-20,-10],\r\n            [-20,-30,-30,-40,-40,-30,-30,-20],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n        ]\r\n        whiteScoreEnd = [\r\n            [-50,-40,-30,-20,-20,-30,-40,-50],\r\n            [-30,-20,-10,  0,  0,-10,-20,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-30,  0,  0,  0,  0,-30,-30],\r\n            [-50,-30,-30,-30,-30,-30,-30,-50]\r\n        ]\r\n        blackScoreEnd = [\r\n            [-50,-30,-30,-30,-30,-30,-30,-50],\r\n            [-30,-30,  0,  0,  0,  0,-30,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-20,-10,  0,  0,-10,-20,-30],\r\n            [-50,-40,-30,-20,-20,-30,-40,-50],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (((board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol))) && board.canKingMove(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                }\r\n            }\r\n            // king and rook has not moved, illegal check later\r\n            if (board.castlingSquaresIsEmpty(this.colour, King.KING_SIDE) && !board.rookHasMoved(this.colour, King.KING_SIDE) && !board.kingHasMoved(this.colour)) {\r\n                const row = this.colour === Piece.BLACK ? 0 : 7\r\n                const col = 6\r\n                moves.push(new Move(new Cell(currentRow, currentCol), new Cell(row, col), this, false,\r\n                    {isCastle: true, rook: new Move(new Cell(row, 7), new Cell(row, 5), board.getPiece(row, 7))}))\r\n            }\r\n            if (board.castlingSquaresIsEmpty(this.colour, King.QUEEN_SIDE) && !board.rookHasMoved(this.colour, King.QUEEN_SIDE) && !board.kingHasMoved(this.colour)) {\r\n                const row = this.colour === Piece.BLACK ? 0 : 7\r\n                const col = 2\r\n                moves.push(new Move(new Cell(currentRow, currentCol), new Cell(row, col), this, false,\r\n                    {isCastle: true, rook: new Move(new Cell(row, 0), new Cell(row, 3), board.getPiece(row, 0))}))\r\n            }\r\n\r\n\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            return false\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            if (move.castle.isCastle) {\r\n                board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = move.castle.rook.piece\r\n                board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = null\r\n                move.castle.rook.piece.cell.row = move.castle.rook.newCell.row\r\n                move.castle.rook.piece.cell.col = move.castle.rook.newCell.col\r\n            }\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"k\"\r\n        }\r\n    }\r\n    class Knight extends Piece {\r\n        directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\r\n\r\n        points = 320\r\n        name = Piece.KNIGHT\r\n\r\n        whiteScore = [\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n            [-40,-20,  0,  0,  0,  0,-20,-40],\r\n            [-30,  0, 10, 15, 15, 10,  0,-30],\r\n            [-30,  5, 15, 20, 20, 15,  5,-30],\r\n            [-30,  0, 15, 20, 20, 15,  0,-30],\r\n            [-30,  5, 10, 15, 15, 10,  5,-30],\r\n            [-40,-20,  0,  5,  5,  0,-20,-40],\r\n            [-50,-40,-30,-30,-30,-30,-40,-50]\r\n        ]\r\n\r\n        blackScore = [\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n            [-40,-20,  0,  5,  5,  0,-20,-40],\r\n            [-30,  5, 10, 15, 15, 10,  5,-30],\r\n            [-30,  0, 15, 20, 20, 15,  0,-30],\r\n            [-30,  5, 15, 20, 20, 15,  5,-30],\r\n            [-30,  0, 10, 15, 15, 10,  0,-30],\r\n            [-40,-20,  0,  0,  0,  0,-20,-40],\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if (rowDiff + colDiff !== 3) {\r\n                return false\r\n            }\r\n            return !(rowDiff === 0 || colDiff === 0);\r\n\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"n\"\r\n        }\r\n    }\r\n    class Pawn extends Piece {\r\n        points = 100\r\n        name = Piece.PAWN\r\n\r\n        whiteScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5, -5,-10,  0,  0,-10, -5,  5],\r\n            [5, 10, 10,-20,-20, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0]\r\n        ]\r\n        whiteScoreEnd = [\r\n            [100,  100,  100,  100,  100,  100,  100,  100],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5, -5,-10,  0,  0,-10, -5,  5],\r\n            [5, 10, 10,-20,-20, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0]\r\n        ]\r\n        blackScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10,-40,-40, 10, 10,  5],\r\n            [5, 10,20,  0,  0,-10, -5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n        ]\r\n        blackScoreEnd = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10,-40,-40, 10, 10,  5],\r\n            [5, 10,20,  0,  0,-10, -5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [100,  100,  100,  100,  100,  100,  100,  100],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            const moves = []\r\n            let newRow = this.cell.row + 1 * this.colour\r\n            let newCol = this.cell.col\r\n            if (board.canMove(newRow, newCol)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol),\r\n                    this, undefined, undefined, undefined,\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n\r\n                newRow = this.cell.row + 2 * this.colour\r\n                if (board.canMove(newRow, newCol) && (newRow === 3 || newRow === 4)) {\r\n                    if (this.colour === Piece.BLACK && this.cell.row === 1) {\r\n                        const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n\r\n                            moves.push(move)\r\n\r\n                    } else if (this.colour === Piece.WHITE && this.cell.row === 6) {\r\n                        const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                            moves.push(move)\r\n                    }\r\n\r\n                }\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col + 1\r\n            if (board.canEat(newRow, newCol, this.colour)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this , undefined, undefined, board.getPiece(newRow, newCol),\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n            }\r\n            // en passant\r\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\r\n                const prevMove = board.moves.slice(-1)[0]\r\n                if (prevMove.piece.name === Piece.PAWN && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col + 1\r\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this, true)\r\n                        moves.push(move)\r\n                }\r\n\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col - 1\r\n            if (board.canEat(newRow, newCol, this.colour)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this , undefined, undefined, board.getPiece(newRow, newCol),\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n            }\r\n            // en passant\r\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\r\n                const prevMove = board.moves.slice(-1)[0]\r\n                if (prevMove.piece.name === Piece.PAWN && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col - 1\r\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this, true)\r\n                    moves.push(move)\r\n                }\r\n\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const newRow = this.cell.row + 1 * this.colour\r\n            const newCol = this.cell.col + 1\r\n            const newColOpp = this.cell.col - 1\r\n            return newRow === kingRow && (newCol === kingCol || newColOpp === kingCol)\r\n        }\r\n\r\n        /**\r\n         * Moves the piece\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            // const old = board[move.oldCell.row][move.oldCell.col]\r\n            // promotion\r\n            if (move.isEnPassant) {\r\n                const prevMove = boardObject.moves.slice(-1)[0]\r\n                const oldPiece = board[prevMove.newCell.row][prevMove.newCell.col]\r\n                if (oldPiece !== null) {\r\n                    move.ate = oldPiece\r\n                }\r\n                board[prevMove.newCell.row][prevMove.newCell.col] = null\r\n            }\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            if (move.isPromotion) {\r\n                board[newRow][newCol] = new Queen(this.colour, this.cell)\r\n            }\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"p\"\r\n        }\r\n    }\r\n    class Queen extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1], [0,1], [1,0], [0,-1],[-1,0]]\r\n        points = 900\r\n        name = Piece.QUEEN\r\n\r\n        whiteScore = [\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-10,  0,  5,  5,  5,  5,  0,-10],\r\n            [-5,  0,  5,  5,  5,  5,  0, -5],\r\n            [0,  0,  5,  5,  5,  5,  0, -5],\r\n            [-10,  5,  5,  5,  5,  5,  0,-10],\r\n            [-10,  0,  5,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10, -5, -5,-10,-10,-20]\r\n        ]\r\n        blackScore = [\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n            [-10,  0,  5,  0,  0,  0,  0,-10],\r\n            [-10,  5,  5,  5,  5,  5,  0,-10],\r\n            [0,  0,  5,  5,  5,  5,  0, -5],\r\n            [-5,  0,  5,  5,  5,  5,  0, -5],\r\n            [-10,  0,  5,  5,  5,  5,  0,-10],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                        moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if ((rowDiff !== colDiff) && kingCol !== col && kingRow !== row) {\r\n                return false\r\n            }\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break;\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"q\"\r\n        }\r\n    }\r\n    class Rook extends Piece {\r\n        directions = [[0,1], [1,0], [0,-1],[-1,0]]\r\n        points = 500\r\n        name = Piece.ROOK\r\n        whiteScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10, 10, 10, 10, 10,  5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [0,  0,  0,  5,  5,  0,  0,  0]\r\n        ]\r\n        blackScore = [\r\n            [0,  0,  4,  5,  5,  10,  0,  0],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [5, 10, 10, 10, 10, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                        moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            if (kingCol !== col && kingRow !== row) {\r\n                return false\r\n            }\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"r\"\r\n        }\r\n    }\r\n\r\n        try {\r\n            const data = message.data\r\n            const boardString = data[0]\r\n            const depth = data[1]\r\n            const moveString = data[2]\r\n            const colour = data[3]\r\n            totalMoves = moveString.length\r\n            if (totalMoves === 0) {\r\n                if (colour === Piece.WHITE) {\r\n                    // equal chance to play d4, e4\r\n                    const moves = [\r\n                        new Move(new Cell(6, 3), new Cell(4,3), new Pawn(Piece.WHITE, new Cell(6, 3))),\r\n                        new Move(new Cell(6, 4), new Cell(4,4), new Pawn(Piece.WHITE, new Cell(6, 4))),\r\n                    ]\r\n                    const randomIndex = Math.round(Math.random() * (moves.length - 1))\r\n\r\n                    postMessage(moves[randomIndex].getMoveString())\r\n                }\r\n            } else if (totalMoves === 1) {\r\n                // equal chance to play c5 / e5, in response to e4\r\n                const getMove = moveString.map(x => Move.parseMove(undefined, x))[0]\r\n                if (getMove.oldCell.row === 6 && getMove.oldCell.col === 4 && getMove.newCell.row === 4 && getMove.newCell.col === 4) {\r\n                    const moves = [\r\n                        new Move(new Cell(1, 2), new Cell(3,2), new Pawn(Piece.BLACK, new Cell(1, 2))),\r\n                        new Move(new Cell(1, 4), new Cell(3,4), new Pawn(Piece.BLACK, new Cell(1, 4))),\r\n                    ]\r\n                    const randomIndex = Math.round(Math.random() * (moves.length - 1))\r\n\r\n                    postMessage(moves[randomIndex].getMoveString())\r\n                } else {\r\n                    const nextMove = ab(boardString, depth, moveString, colour)\r\n                    postMessage(nextMove.getMoveString())\r\n                }\r\n            } else {\r\n                const nextMove = ab(boardString, depth, moveString, colour)\r\n                postMessage(nextMove.getMoveString())\r\n            }\r\n        } catch (e) {\r\n            postMessage({isError: true, message:\"Error: \" + e})\r\n        }\r\n\r\n}\r\n// eslint-disable-next-line no-restricted-globals,no-undef\r\nself.addEventListener(\"message\", test);\r\n"],"names":["totalMoves","isEndGame","self","addEventListener","async","message","ab","boardString","depth","moveString","colour","copyBoard","Board","setBoardString","moves","map","x","Move","parseMove","console","log","setEndGame","updatePieceValues","mem","Map","result","miniMax","Number","MAX_VALUE","clear","board","alpha","beta","maxPlayer","currentPlayer","orgDepth","getScore","getAllMoves","bestMove","sort","sortMoves","maxEval","illegal","move","movePiece","piece","isIllegal","undoMove","undefined","currentEval","Piece","BLACK","WHITE","Math","max","length","minEval","min","a","b","ate","points","whiteScore","newCell","row","col","blackScore","constructor","this","newBoard","Rook","Cell","Knight","Bishop","Queen","King","Pawn","getPiece","whiteScoreEnd","blackScoreEnd","whitePawnCount","blackPawnCount","past","i","doubled","countWhitePieces","countBlackPieces","countWhiteQueen","countBlackQueen","newRow","pieceString","push","actualColour","slice","getBoardHash","str","isEmpty","getString","getBoard","isOutSide","isUnderCheck","canEat","canMove","canKingMove","directions","direction","newCol","name","KING","pop","prevRow","oldCell","prevCol","getBoardString","cell","isEnPassant","isPromotion","castle","isCastle","rook","kingHasMoved","rookHasMoved","side","KING_SIDE","ROOK","castlingSquaresIsEmpty","cols","king","opp","moveRow","moveCol","isCheck","squares","getMoves","concat","scanSquaresScore","score","materialScore","getMoveString","oldCellRow","oldCellCol","newCellRow","newCellCol","static","data","parsePieceString","rookObj","BISHOP","super","currentRow","currentCol","kingRow","kingCol","abs","boardObject","oldPiece","QUEEN_SIDE","KNIGHT","rowDiff","colDiff","PAWN","prevMove","newColOpp","QUEEN","randomIndex","round","random","postMessage","getMove","nextMove","e","isError"],"sourceRoot":""}