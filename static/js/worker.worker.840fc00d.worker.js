!function(){let e=0;self.addEventListener("message",(async l=>{const o=new Map,t=(l,t,s,c)=>{const i=new a;i.setBoardString(l),i.moves=s.map((e=>u.parseMove(i,e)));i.isEndGame()&&(console.log("endgame"),i.setEndGame()),i.updatePieceValues(e);for(let e=1;e<t;e++)o.set(e,[null,null,null]);const r=n(i,t,-Number.MAX_VALUE,Number.MAX_VALUE,c,c,o);return console.log("Score",r[1]),r[0]},n=(e,l,o,t,n,c,i)=>{const w=e.getAllMoves(c);let a;if(w.sort(r),c===n){let r=-9e4,h=0;for(let u=0;u<w.length;u++){const C=w[u];if(e.movePiece(C.piece,C),e.isIllegal(c,C)){e.undoMove(),h++;continue}void 0===a&&(a=C);const f=s(e,l-1,o,t,n,-1*c,w,i);if(e.undoMove(),f>r&&(r=f,a=C),t<=(o=Math.max(o,f)))break}return h===w.length?e.isCheck(c)?[null,-9e4]:[null,0]:[a,r]}{let r=9e4,h=0;for(let u=0;u<w.length;u++){const C=w[u];if(e.movePiece(C.piece,C),e.isIllegal(c,C)){e.undoMove(),h++;continue}void 0===a&&(a=C);const f=s(e,l-1,o,t,n,-1*c,w,i);if(e.undoMove(),f<r&&(r=f,a=C),(t=Math.min(t,f))<=o)break}return h===w.length?e.isCheck(c)?[null,9e4]:[null,0]:[a,r]}},s=(e,l,o,t,n,r,a,h)=>{if(0===l){let l;return l=n===r&&null!==e.moves.slice(-1)[0].ate?w(o,t,e,r,1,a):e.getScore(n,a),l}const u=e.getAllMoves(r);if(c(u,h,l),r===n){let c=-3e4,w=0;for(let a=0;a<u.length;a++){const C=u[a];if(e.movePiece(C.piece,C),e.isIllegal(r,C)){e.undoMove(),w++;continue}const f=s(e,l-1,o,t,n,-1*r,u,h);if(e.undoMove(),f>c&&(c=f),f>o&&(o=f),t<=o){if(null!==C.ate)break;const e=h.get(l);if(e.find((e=>null!==e&&i(e,C))))break;for(let l=0;l>=0;l--)e[l+1]=e[l];e[0]=C;break}}return w===u.length?e.isCheck(r)?-3e4*l:0:c}{let c=3e4,w=0;for(let C=0;C<u.length;C++){const f=u[C];if(e.movePiece(f.piece,f),e.isIllegal(r,f)){e.undoMove(),w++;continue}const d=s(e,l-1,o,t,n,-1*r,a,h);if(e.undoMove(),d<c&&(c=d),d<t&&(t=d),t<=o){if(null!==f.ate)break;const e=h.get(l);if(e.find((e=>null!==e&&i(e,f))))break;for(let l=0;l>=0;l--)e[l+1]=e[l];e[0]=f;break}}return w===u.length?e.isCheck(r)?3e4*l:0:c}},c=(e,l,o)=>{e.sort(((e,t)=>{if(null!==e.ate&&null!==t.ate){return e.piece.points-e.ate.points<t.piece.points-t.ate.points?-1:1}{if(null!==e.ate)return-1;if(null!==t.ate)return 1;const n=l.get(o);for(let l=0;l<n.length;l++){const o=n[l];if(null!==o&&i(e,o))return-1;if(null!==o&&i(t,o))return 1}return(e.piece.colour===C.WHITE?e.piece.whiteScore[e.newCell.row][e.newCell.col]:e.piece.blackScore[e.newCell.row][e.newCell.col])<(t.piece.colour===C.WHITE?t.piece.whiteScore[t.newCell.row][t.newCell.col]:t.piece.blackScore[t.newCell.row][t.newCell.col])?1:-1}}))},i=(e,l)=>e.newCell.row===l.newCell.row&&e.newCell.col===l.newCell.col&&e.oldCell.row===l.oldCell.row&&e.oldCell.col===l.oldCell.col&&e.piece.constructor===l.piece.constructor&&(null!==e.ate&&null!==l.ate?e.ate.constructor===l.ate.constructor:e.ate===l.ate),r=(e,l)=>{if(null!==e.ate&&null!==l.ate){return e.piece.points-e.ate.points<l.piece.points-l.ate.points?-1:1}if(null!==e.ate)return-1;if(null!==l.ate)return 1;return(e.piece.colour===C.WHITE?e.piece.whiteScore[e.newCell.row][e.newCell.col]:e.piece.blackScore[e.newCell.row][e.newCell.col])<(l.piece.colour===C.WHITE?l.piece.whiteScore[l.newCell.row][l.newCell.col]:l.piece.blackScore[l.newCell.row][l.newCell.col])?1:-1},w=(e,l,o,t,n,s)=>{const c=o.getScore(t,s);if(0===n)return c;if(c>=l)return l;e=Math.max(e,c);const i=o.getAllMoves(t);i.sort(r);for(let r=0;r<i.length;r++){const c=i[r];if(null===c.ate)break;{o.movePiece(c.piece,c);let i=-w(-l,-e,o,-1*t,n-1,s);if(o.undoMove(),i>=l)return l;i>e&&(e=i)}}return e};class a{board;constructor(){this.board=this.newBoard(),this.moves=[]}newBoard=()=>[[new S(C.BLACK,new h(0,0)),new g(C.BLACK,new h(0,1)),new f(C.BLACK,new h(0,2)),new E(C.BLACK,new h(0,3)),new d(C.BLACK,new h(0,4)),new f(C.BLACK,new h(0,5)),new g(C.BLACK,new h(0,6)),new S(C.BLACK,new h(0,7))],[new p(C.BLACK,new h(1,0)),new p(C.BLACK,new h(1,1)),new p(C.BLACK,new h(1,2)),new p(C.BLACK,new h(1,3)),new p(C.BLACK,new h(1,4)),new p(C.BLACK,new h(1,5)),new p(C.BLACK,new h(1,6)),new p(C.BLACK,new h(1,7))],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[new p(C.WHITE,new h(6,0)),new p(C.WHITE,new h(6,1)),new p(C.WHITE,new h(6,2)),new p(C.WHITE,new h(6,3)),new p(C.WHITE,new h(6,4)),new p(C.WHITE,new h(6,5)),new p(C.WHITE,new h(6,6)),new p(C.WHITE,new h(6,7))],[new S(C.WHITE,new h(7,0)),new g(C.WHITE,new h(7,1)),new f(C.WHITE,new h(7,2)),new E(C.WHITE,new h(7,3)),new d(C.WHITE,new h(7,4)),new f(C.WHITE,new h(7,5)),new g(C.WHITE,new h(7,6)),new S(C.WHITE,new h(7,7))]];setEndGame=()=>{for(let e=0;e<8;e++)for(let l=0;l<8;l++){const o=this.getPiece(e,l);null!==o&&void 0!==o.whiteScoreEnd&&(o.colour===C.WHITE?o.whiteScore=o.whiteScoreEnd:o.blackScore=o.blackScoreEnd)}};updatePieceValues=e=>{let l=0,o=0;for(let n=0;n<8;n++)for(let e=0;e<8;e++){const t=this.getPiece(n,e);null!==t&&t instanceof p&&(t.colour===C.WHITE?l++:o++)}const t=[];for(let n=0;n<8;n++){let e=!1;for(let l=0;l<8;l++){const o=this.getPiece(l,n);if(null!==o&&o instanceof p){e=!0;break}}e||t.push(n)}for(let n=0;n<8;n++)for(let s=0;s<8;s++){const c=this.getPiece(n,s);if(null!==c){if(c instanceof E&&e<=12&&(c.colour===C.WHITE?c.whiteScore[7][3]+=50:c.blackScore[0][3]+=50),c instanceof g&&(c.points-=3*(16-l-o),e<=12&&(c.colour===C.WHITE?(c.whiteScore[7][1]-=50,c.whiteScore[7][6]-=50):(c.blackScore[0][1]-=50,c.blackScore[0][6]-=50))),c instanceof f&&(c.points+=3*(16-l-o),e<=12&&(c.colour===C.WHITE?(c.whiteScore[7][2]-=50,c.whiteScore[7][5]-=50):(c.blackScore[0][2]-=50,c.blackScore[0][5]-=50))),c instanceof S){c.points+=3*(16-l-o);for(const e of t)for(let l=0;l<8;l++)c.whiteScore[l][e]+=15,c.blackScore[l][e]+=15}if(c instanceof p){let e=!0;if(s+1<8)for(let o=0;o<8;o++)this.getPiece(o,s+1)instanceof p&&(e=!1);if(s-1>=0)for(let o=0;o<8;o++)this.getPiece(o,s-1)instanceof p&&(e=!1);e&&(c.colour===C.WHITE?c.points+=20*(6-n):c.points+=20*(n-1));let l=!1;for(let o=0;o<8;o++)c instanceof p&&o!==n&&(l=!0);l&&(c.points-=10)}}}};isEndGame=()=>{let e=0,l=0,o=0,t=0;for(let n=0;n<8;n++)for(let s=0;s<8;s++){const c=this.getPiece(n,s);c instanceof E&&(c.colour===C.WHITE?o++:t++),(c instanceof S||c instanceof f||c instanceof g)&&(c.colour===C.WHITE?e++:l++)}return o<=1&&e<=1||t<=1&&l<=1||e<=3&&o<=0||l<=3&&t<=0};setBoardString=e=>{const l=[];for(let o=0;o<8;o++){const t=[];for(let l=0;l<8;l++){const n=e[o][l];if(null===n)t.push(null);else{const e="w"===n.slice(0,1)?C.WHITE:C.BLACK,s=n.slice(1,2);"b"===s?t.push(new f(e,new h(o,l))):"k"===s?t.push(new d(e,new h(o,l))):"n"===s?t.push(new g(e,new h(o,l))):"p"===s?t.push(new p(e,new h(o,l))):"q"===s?t.push(new E(e,new h(o,l))):"r"===s?t.push(new S(e,new h(o,l))):t.push(null)}}l.push(t)}this.board=l};getBoardHash=()=>{let e="";for(let l=0;l<8;l++)for(let o=0;o<8;o++)this.isEmpty(l,o)?e+=" ":e+=this.getPiece(l,o).getString();return e};getBoard=()=>this.board;getPiece=(e,l)=>this.board[e][l];isEmpty=(e,l)=>!this.isOutSide(e,l)&&null===this.board[e][l];isUnderCheck=e=>!1;isOutSide=(e,l)=>e<0||l<0||e>7||l>7;canEat=(e,l,o)=>!this.isOutSide(e,l)&&!this.isEmpty(e,l)&&this.getPiece(e,l).colour!==o;canMove=(e,l)=>!this.isOutSide(e,l)&&this.isEmpty(e,l);canKingMove=(e,l,o)=>{const t=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];for(const n of t){const t=e+n[0],s=l+n[1];if(!this.isOutSide(t,s)&&!this.isEmpty(t,s)&&this.getPiece(t,s).name===C.KING&&this.getPiece(t,s).colour!==o)return!1}return!0};movePiece=(e,l)=>{l.piece.movePiece(l,this),this.moves.push(l)};undoMove=()=>{if(this.moves.length>0){const e=this.moves.pop(),l=e.oldCell.row,o=e.oldCell.col,t=this.board[e.newCell.row][e.newCell.col];return null===t&&console.log(this.getBoardString(),e),this.board[l][o]=t,t.cell.row=l,t.cell.col=o,e.isEnPassant?(this.board[e.ate.cell.row][e.ate.cell.col]=e.ate,this.board[e.newCell.row][e.newCell.col]=null,!0):(e.isPromotion?this.board[l][o]=new p(t.colour,t.cell,t.moves):e.castle.isCastle&&(this.board[e.castle.rook.oldCell.row][e.castle.rook.oldCell.col]=e.castle.rook.piece,e.castle.rook.piece.cell.row=e.castle.rook.oldCell.row,e.castle.rook.piece.cell.col=e.castle.rook.oldCell.col,this.board[e.castle.rook.newCell.row][e.castle.rook.newCell.col]=null),this.board[e.newCell.row][e.newCell.col]=e.ate,!0)}return!1};kingHasMoved=e=>{for(let l=0;l<this.moves.length;l++){const o=this.moves[l];if(o.piece.name===C.KING&&o.piece.colour===e)return!0}return!1};rookHasMoved=(e,l)=>{const o=e===C.BLACK?0:7,t=l===d.KING_SIDE?7:0;if(null===this.getPiece(o,t)||this.getPiece(o,t).name!==C.ROOK)return!0;for(const n of this.moves)if(n.piece.name===C.ROOK&&n.piece.colour===e&&n.oldCell.row===o&&n.oldCell.col===t)return!0;return!1};castlingSquaresIsEmpty=(e,l)=>{const o=e===C.BLACK?0:7,t=l===d.KING_SIDE?[5,6]:[1,2,3];for(const n of t)if(!this.isEmpty(o,n))return!1;return!0};isIllegal=(e,l)=>{let o;for(let t=0;t<8;t++)for(let l=0;l<8;l++)if(!this.isEmpty(t,l)){const n=this.getPiece(t,l);n.name===C.KING&&n.colour===e&&(o=n)}if(l.castle.isCastle){const o=this.getAllMoves(-1*e),t=l.newCell.row;if(6===l.newCell.col)for(const e of o){const l=e.newCell.row,o=e.newCell.col;if(l===t&&(6===o||5===o||4===o))return!0}else for(const e of o){const l=e.newCell.row,o=e.newCell.col;if(l===t&&(1===o||2===o||3===o||4===o))return!0}}for(let t=0;t<8;t++)for(let l=0;l<8;l++)if(!this.isEmpty(t,l)&&this.getPiece(t,l).colour!==e){if(this.getPiece(t,l).isCheck(this,o))return!0}return!1};isCheck=e=>{let l;for(let o=0;o<8;o++)for(let t=0;t<8;t++)if(!this.isEmpty(o,t)){const n=this.getPiece(o,t);n.name===C.KING&&n.colour===e&&(l=n)}for(let o=0;o<8;o++)for(let t=0;t<8;t++)if(!this.isEmpty(o,t)&&this.getPiece(o,t).colour!==e){if(this.getPiece(o,t).isCheck(this,l))return!0}return!1};getAllMoves=e=>{let l=[];for(let o=0;o<8;o++)for(let t=0;t<8;t++)if(!this.isEmpty(o,t)&&this.getPiece(o,t).colour===e){const e=this.getPiece(o,t).getMoves(this);l=l.concat(e)}return l};scanSquaresScore=()=>{let e=0,l=0;for(let o=0;o<8;o++)for(let t=0;t<8;t++){const n=this.getPiece(o,t);null!==n&&(n.colour===C.WHITE?l+=n.points:l-=n.points,n.colour===C.WHITE?e+=n.whiteScore[o][t]:e-=n.blackScore[o][t])}return e+l};getScore=(e,l)=>(this.scanSquaresScore()+5*l.length)*e*-1;getBoardString=()=>{const e=[];for(let l=0;l<8;l++){const o=[];for(let e=0;e<8;e++){const t=this.getPiece(l,e);null!==t?o.push(t.getString()):o.push(null)}e.push(o)}return e}}class h{constructor(e,l){this.row=e,this.col=l}}class u{oldCell;newCell;constructor(e,l,o,t=!1,n={isCastle:!1},s=null,c=!1){this.oldCell=e,this.newCell=l,this.piece=o,this.isEnPassant=t,this.castle=n,this.ate=s,this.isPromotion=c}getMoveString=()=>({oldCellRow:this.oldCell.row,oldCellCol:this.oldCell.col,newCellRow:this.newCell.row,newCellCol:this.newCell.col,pieceString:this.piece.getString(),isEnPassant:this.isEnPassant,castle:!1===this.castle.isCastle?{isCastle:!1}:{isCastle:!0,rook:{pieceString:this.castle.rook.piece.getString(),oldCellRow:this.castle.rook.oldCell.row,oldCellCol:this.castle.rook.oldCell.col,newCellRow:this.castle.rook.newCell.row,newCellCol:this.castle.rook.newCell.col}},ate:null!==this.ate?this.ate.getString():null,isPromotion:this.isPromotion});static parseMove=(e,l)=>{const o=new u(new h(l.oldCellRow,l.oldCellCol),new h(l.newCellRow,l.newCellCol),C.parsePieceString(l.pieceString),l.isEnPassant,{isCastle:!1},null,l.isPromotion);if(l.castle.isCastle){const t=l.castle.rook;o.castle.isCastle=!0,o.castle.rook=new u(new h(t.oldCellRow,t.oldCellCol),new h(t.newCellRow,t.newCellCol),e.getPiece(t.oldCellRow,t.oldCellCol))}return o}}class C{static WHITE=-1;static BLACK=1;static ROOK="r";static BISHOP="b";static KNIGHT="n";static KING="k";static QUEEN="q";static PAWN="p";constructor(e,l){this.colour=e,this.cell=l}static parsePieceString=e=>{const l="w"===e.slice(0,1)?C.WHITE:C.BLACK,o=e.slice(1,2);return"b"===o?new f(l,new h(0,0)):"k"===o?new d(l,new h(0,0)):"n"===o?new g(l,new h(0,0)):"p"===o?new p(l,new h(0,0)):"q"===o?new E(l,new h(0,0)):"r"===o?new S(l,new h(0,0)):null}}class f extends C{directions=[[1,1],[-1,-1],[1,-1],[-1,1]];points=330;name=C.BISHOP;whiteScore=[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,10,10,5,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,10,10,10,10,0,-10],[-10,10,10,10,10,10,10,-10],[-10,5,0,0,0,0,5,-10],[-20,-10,-10,-10,-10,-10,-10,-20]];blackScore=[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,5,0,0,0,0,5,-10],[-10,10,10,10,10,10,10,-10],[-10,0,10,10,10,10,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,5,10,10,5,0,-10],[-10,0,0,0,0,0,0,-10],[-20,-10,-10,-10,-10,-10,-10,-20]];constructor(e,l){super(e,l)}getMoves=e=>{const l=[],o=this.cell.row,t=this.cell.col;for(const n of this.directions){const s=n[0],c=n[1];let i=s+o,r=c+t;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const n=new u(new h(o,t),new h(i,r),this);if(l.push(n),e.canEat(i,r,this.colour))break;i+=s,r+=c}}return l};isCheck=(e,l)=>{const o=this.cell.row,t=this.cell.col,n=l.cell.row,s=l.cell.col;if(Math.abs(o-n)!==Math.abs(t-s))return!1;const c=this.cell.row,i=this.cell.col;for(const r of this.directions){const l=r[0],o=r[1];let t=l+c,n=o+i;for(;e.canMove(t,n)||e.canEat(t,n,this.colour);){if(e.canEat(t,n,this.colour)){if(e.getPiece(t,n).name===C.KING)return!0;break}t+=l,n+=o}}return!1};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col,s=o[t][n];null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n)};getString=()=>(this.colour===C.WHITE?"w":"b")+"b"}class d extends C{directions=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];static KING_SIDE=-1;static QUEEN_SIDE=1;name=C.KING;points=1e4;whiteScore=[[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-20,-30,-30,-40,-40,-30,-30,-20],[-10,-20,-20,-20,-20,-20,-20,-10],[20,20,0,0,0,0,20,20],[20,30,10,0,0,10,30,20]];blackScore=[[20,30,10,0,0,10,30,20],[20,20,0,0,0,0,20,20],[-10,-20,-20,-20,-20,-20,-20,-10],[-20,-30,-30,-40,-40,-30,-30,-20],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30]];whiteScoreEnd=[[-50,-40,-30,-20,-20,-30,-40,-50],[-30,-20,-10,0,0,-10,-20,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-30,0,0,0,0,-30,-30],[-50,-30,-30,-30,-30,-30,-30,-50]];blackScoreEnd=[[-50,-30,-30,-30,-30,-30,-30,-50],[-30,-30,0,0,0,0,-30,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-20,-10,0,0,-10,-20,-30],[-50,-40,-30,-20,-20,-30,-40,-50]];constructor(e,l){super(e,l)}getMoves=e=>{const l=[],o=this.cell.row,t=this.cell.col;for(const n of this.directions){const s=n[0]+o,c=n[1]+t;if((e.canEat(s,c,this.colour)||e.canMove(s,c))&&e.canKingMove(s,c,this.colour)){const e=new u(new h(o,t),new h(s,c),this);l.push(e)}}if(e.castlingSquaresIsEmpty(this.colour,d.KING_SIDE)&&!e.rookHasMoved(this.colour,d.KING_SIDE)&&!e.kingHasMoved(this.colour)){const n=this.colour===C.BLACK?0:7,s=6;l.push(new u(new h(o,t),new h(n,s),this,!1,{isCastle:!0,rook:new u(new h(n,7),new h(n,5),e.getPiece(n,7))}))}if(e.castlingSquaresIsEmpty(this.colour,d.QUEEN_SIDE)&&!e.rookHasMoved(this.colour,d.QUEEN_SIDE)&&!e.kingHasMoved(this.colour)){const n=this.colour===C.BLACK?0:7,s=2;l.push(new u(new h(o,t),new h(n,s),this,!1,{isCastle:!0,rook:new u(new h(n,0),new h(n,3),e.getPiece(n,0))}))}return l};isCheck=(e,l)=>!1;movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col;e.castle.isCastle&&(o[e.castle.rook.newCell.row][e.castle.rook.newCell.col]=e.castle.rook.piece,o[e.castle.rook.oldCell.row][e.castle.rook.oldCell.col]=null,e.castle.rook.piece.cell.row=e.castle.rook.newCell.row,e.castle.rook.piece.cell.col=e.castle.rook.newCell.col);const s=o[t][n];null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n)};getString=()=>(this.colour===C.WHITE?"w":"b")+"k"}class g extends C{directions=[[1,2],[1,-2],[2,1],[2,-1],[-1,2],[-1,-2],[-2,1],[-2,-1]];points=320;name=C.KNIGHT;whiteScore=[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,0,0,0,-20,-40],[-30,0,10,15,15,10,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,10,15,15,10,5,-30],[-40,-20,0,5,5,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]];blackScore=[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,5,5,0,-20,-40],[-30,5,10,15,15,10,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,10,15,15,10,0,-30],[-40,-20,0,0,0,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]];constructor(e,l){super(e,l)}getMoves=e=>{const l=[];for(const o of this.directions){const t=o[0],n=o[1],s=this.cell.row,c=this.cell.col,i=t+s,r=n+c;if(e.canEat(i,r,this.colour)||e.canMove(i,r)){const e=new u(new h(s,c),new h(i,r),this);l.push(e)}}return l};isCheck=(e,l)=>{const o=this.cell.row,t=this.cell.col,n=l.cell.row,s=l.cell.col,c=Math.abs(o-n),i=Math.abs(t-s);return c+i===3&&!(0===c||0===i)};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col,s=o[t][n];null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n)};getString=()=>(this.colour===C.WHITE?"w":"b")+"n"}class p extends C{points=100;name=C.PAWN;whiteScore=[[0,0,0,0,0,0,0,0],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]];whiteScoreEnd=[[100,100,100,100,100,100,100,100],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]];blackScore=[[0,0,0,0,0,0,0,0],[5,10,10,-40,-40,10,10,5],[5,10,20,0,0,-10,-5,5],[0,0,0,20,20,0,0,0],[5,5,10,25,25,10,5,5],[10,10,20,30,30,20,10,10],[50,50,50,50,50,50,50,50],[0,0,0,0,0,0,0,0]];blackScoreEnd=[[0,0,0,0,0,0,0,0],[5,10,10,-40,-40,10,10,5],[5,10,20,0,0,-10,-5,5],[0,0,0,20,20,0,0,0],[5,5,10,25,25,10,5,5],[10,10,20,30,30,20,10,10],[50,50,50,50,50,50,50,50],[100,100,100,100,100,100,100,100]];constructor(e,l){super(e,l)}getMoves=e=>{const l=this.cell.row,o=this.cell.col,t=[];let n=this.cell.row+1*this.colour,s=this.cell.col;if(e.canMove(n,s)){const c=new u(new h(l,o),new h(n,s),this,void 0,void 0,void 0,0===n||7===n);if(t.push(c),n=this.cell.row+2*this.colour,e.canMove(n,s)&&(3===n||4===n))if(this.colour===C.BLACK&&1===this.cell.row){const e=new u(new h(l,o),new h(n,s),this);t.push(e)}else if(this.colour===C.WHITE&&6===this.cell.row){const e=new u(new h(l,o),new h(n,s),this);t.push(e)}}if(n=this.cell.row+1*this.colour,s=this.cell.col+1,e.canEat(n,s,this.colour)){const c=new u(new h(l,o),new h(n,s),this,void 0,void 0,e.getPiece(n,s),0===n||7===n);t.push(c)}if(e.canMove(n,s)&&e.moves.length>0){const c=e.moves.slice(-1)[0];if(c.piece.name===C.PAWN&&c.newCell.row===this.cell.row&&c.newCell.col===this.cell.col+1&&2===Math.abs(c.newCell.row-c.oldCell.row)){const e=new u(new h(l,o),new h(n,s),this,!0);t.push(e)}}if(n=this.cell.row+1*this.colour,s=this.cell.col-1,e.canEat(n,s,this.colour)){const c=new u(new h(l,o),new h(n,s),this,void 0,void 0,e.getPiece(n,s),0===n||7===n);t.push(c)}if(e.canMove(n,s)&&e.moves.length>0){const c=e.moves.slice(-1)[0];if(c.piece.name===C.PAWN&&c.newCell.row===this.cell.row&&c.newCell.col===this.cell.col-1&&2===Math.abs(c.newCell.row-c.oldCell.row)){const e=new u(new h(l,o),new h(n,s),this,!0);t.push(e)}}return t};isCheck=(e,l)=>{const o=l.cell.row,t=l.cell.col,n=this.cell.row+1*this.colour,s=this.cell.col+1,c=this.cell.col-1;return n===o&&(s===t||c===t)};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col;if(e.isEnPassant){const t=l.moves.slice(-1)[0],n=o[t.newCell.row][t.newCell.col];null!==n&&(e.ate=n),o[t.newCell.row][t.newCell.col]=null}const s=o[t][n];null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n),e.isPromotion&&(o[t][n]=new E(this.colour,this.cell))};getString=()=>(this.colour===C.WHITE?"w":"b")+"p"}class E extends C{directions=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];points=900;name=C.QUEEN;whiteScore=[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,5,5,5,0,-10],[-5,0,5,5,5,5,0,-5],[0,0,5,5,5,5,0,-5],[-10,5,5,5,5,5,0,-10],[-10,0,5,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]];blackScore=[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,5,0,0,0,0,-10],[-10,5,5,5,5,5,0,-10],[0,0,5,5,5,5,0,-5],[-5,0,5,5,5,5,0,-5],[-10,0,5,5,5,5,0,-10],[-10,0,0,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]];constructor(e,l){super(e,l)}getMoves=e=>{const l=[];for(const o of this.directions){const t=this.cell.row,n=this.cell.col,s=o[0],c=o[1];let i=s+t,r=c+n;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const o=new u(new h(t,n),new h(i,r),this);if(l.push(o),e.canEat(i,r,this.colour))break;i+=s,r+=c}}return l};isCheck=(e,l)=>{const o=this.cell.row,t=this.cell.col,n=l.cell.row,s=l.cell.col;if(Math.abs(o-n)!==Math.abs(t-s)&&s!==t&&n!==o)return!1;const c=this.cell.row,i=this.cell.col;for(const r of this.directions){const l=r[0],o=r[1];let t=l+c,n=o+i;for(;e.canMove(t,n)||e.canEat(t,n,this.colour);){if(e.canEat(t,n,this.colour)){if(e.getPiece(t,n).name===C.KING)return!0;break}t+=l,n+=o}}return!1};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col,s=o[t][n];null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n)};getString=()=>(this.colour===C.WHITE?"w":"b")+"q"}class S extends C{directions=[[0,1],[1,0],[0,-1],[-1,0]];points=500;name=C.ROOK;whiteScore=[[0,0,0,0,0,0,0,0],[5,10,10,10,10,10,10,5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[0,0,0,5,5,0,0,0]];blackScore=[[0,0,4,5,5,10,0,0],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[5,10,10,10,10,10,10,5],[0,0,0,0,0,0,0,0]];constructor(e,l){super(e,l)}getMoves=e=>{const l=[];for(const o of this.directions){const t=this.cell.row,n=this.cell.col,s=o[0],c=o[1];let i=s+t,r=c+n;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const o=new u(new h(t,n),new h(i,r),this);if(l.push(o),e.canEat(i,r,this.colour))break;i+=s,r+=c}}return l};isCheck=(e,l)=>{const o=this.cell.row,t=this.cell.col,n=l.cell.row;if(l.cell.col!==t&&n!==o)return!1;for(const s of this.directions){const l=this.cell.row,o=this.cell.col,t=s[0],n=s[1];let c=t+l,i=n+o;for(;e.canMove(c,i)||e.canEat(c,i,this.colour);){if(e.canEat(c,i,this.colour)){if(e.getPiece(c,i).name===C.KING)return!0;break}c+=t,i+=n}}return!1};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col,s=o[t][n];null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n)};getString=()=>(this.colour===C.WHITE?"w":"b")+"r"}try{const o=l.data,n=o[0],s=o[1],c=o[2],i=o[3];if(e=c.length,0===e){if(i===C.WHITE){const e=[new u(new h(6,3),new h(4,3),new p(C.WHITE,new h(6,3))),new u(new h(6,4),new h(4,4),new p(C.WHITE,new h(6,4)))],l=Math.round(Math.random()*(e.length-1));postMessage(e[l].getMoveString())}}else if(1===e){const e=c.map((e=>u.parseMove(void 0,e)))[0];if(6===e.oldCell.row&&4===e.oldCell.col&&4===e.newCell.row&&4===e.newCell.col){const e=[new u(new h(1,2),new h(3,2),new p(C.BLACK,new h(1,2))),new u(new h(1,4),new h(3,4),new p(C.BLACK,new h(1,4)))],l=Math.round(Math.random()*(e.length-1));postMessage(e[l].getMoveString())}else{const e=t(n,s,c,i);postMessage(e.getMoveString())}}else{const e=t(n,s,c,i);postMessage(e.getMoveString())}}catch(v){postMessage({isError:!0,message:"Error: "+v})}}))}();
//# sourceMappingURL=worker.worker.840fc00d.worker.js.map