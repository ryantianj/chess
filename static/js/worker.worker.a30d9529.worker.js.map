{"version":3,"file":"static/js/worker.worker.a30d9529.worker.js","mappings":"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","sources":["Chess/ai/worker.worker.js"],"sourcesContent":["let totalMoves = 0\r\nconst test = async (message) => {\r\n   // https://chess.stackexchange.com/questions/40362/my-transposition-tables-implementation-slows-down-alpha-beta-pruning\r\n    // https://github.com/maksimKorzh/chess_programming/blob/master/src/negamax/tutorials/alpha-beta_quiescence_search/chess.c\r\n    //https://stackoverflow.com/questions/29990116/alpha-beta-prunning-with-transposition-table-iterative-deepening\r\n    // https://stackoverflow.com/questions/16500739/chess-high-branching-factor\r\n    // TODO: check if endgame before running search, set score tables before search, done after set board string\r\n    // End game defined by: either side has a queen + pawns only / either side has at most 2 minor pieces\r\n    // TODO: update piece score tables based on position before running search, done after set board string\r\n    // for knight, -5 per missing pawn of any colour\r\n    // for bishop, fianchetto bonus points, control over square colour (using pawns), bishop pair bonus\r\n    // rook penalty for trap by king, bonus for open file, bonus for each missing pawn\r\n    // pawn, increase value +30 if past pawn (no pawns of opposing colour on the 3 cols), decrease value if doubled (-10)\r\n\r\n    const ab =  (boardString, depth, moveString, colour) => {\r\n        const copyBoard = new Board()\r\n        copyBoard.setBoardString(boardString)\r\n        // const start = performance.now()\r\n        copyBoard.moves = moveString.map(x => Move.parseMove(copyBoard, x))\r\n        const isEndGame = copyBoard.isEndGame()\r\n        if (isEndGame) {\r\n            console.log(\"endgame\")\r\n            copyBoard.setEndGame()\r\n        }\r\n        copyBoard.updatePieceValues(totalMoves)\r\n        const result = miniMax(copyBoard, depth, -Number.MAX_VALUE, Number.MAX_VALUE, colour, colour)\r\n        // const result = rootNegaMax(depth, copyBoard, Piece.BLACK, Piece.BLACK)\r\n        // const end = performance.now()\r\n        // console.log(end - start, totalMoves, nodes)\r\n        // console.log(\"eval\", nodes)\r\n        console.log(\"Score\", result[1])\r\n        return result[0] // should be a move\r\n    }\r\n\r\n    const miniMax = (board, depth, alpha, beta, maxPlayer, currentPlayer) => {\r\n        const moves = board.getAllMoves(currentPlayer) // TODO: time consuming\r\n        moves.sort(sortMoves)\r\n        let bestMove;\r\n        if (currentPlayer === maxPlayer) {\r\n            let maxEval = -90000\r\n            let illegal = 0\r\n            for (let i = 0; i < moves.length; i++) {\r\n                const move = moves[i]\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    board.undoMove()\r\n                    illegal++\r\n                    continue\r\n                }\r\n\r\n                if (bestMove === undefined) {\r\n                    bestMove = move\r\n                }\r\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1)\r\n                board.undoMove()\r\n                if (currentEval > maxEval) {\r\n                    maxEval = currentEval\r\n                    bestMove = move\r\n                }\r\n                alpha = Math.max(alpha, currentEval)\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) { // TODO: check stalemate\r\n                if (board.isCheck(currentPlayer)) {\r\n                    return [null, -90000]\r\n                }\r\n                return [null, 0]\r\n            }\r\n            return [bestMove, maxEval]\r\n        } else {\r\n            let minEval = 90000\r\n            let illegal = 0\r\n            for (let i = 0; i < moves.length; i++) {\r\n                const move = moves[i]\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    board.undoMove()\r\n                    illegal++\r\n                    continue\r\n                }\r\n                if (bestMove === undefined) {\r\n                    bestMove = move\r\n                }\r\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1)\r\n                board.undoMove()\r\n                if (currentEval < minEval) {\r\n                    minEval = currentEval\r\n                    bestMove = move\r\n                }\r\n                beta = Math.min(beta, currentEval)\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) {\r\n                if (board.isCheck(currentPlayer)) {\r\n                    return [null, 90000]\r\n                }\r\n                return [null, 0]\r\n\r\n            }\r\n            return [bestMove, minEval]\r\n        }\r\n    }\r\n    const miniMaxCore = (board, depth, alpha, beta, maxPlayer, currentPlayer) => {\r\n        if (depth === 0) {\r\n            let result\r\n            if (maxPlayer === currentPlayer && board.moves.slice(-1)[0].ate !== null) {\r\n                result = quiesce(alpha, beta, board, currentPlayer, 1)\r\n            } else {\r\n                result = board.getScore(maxPlayer)\r\n            }\r\n            return result\r\n        }\r\n        const moves = board.getAllMoves(currentPlayer) // TODO: time consuming\r\n        moves.sort(sortMoves)\r\n        if (currentPlayer === maxPlayer) {\r\n            let maxEval = -30000\r\n            let illegal = 0\r\n            for (let i = 0; i < moves.length; i++) {\r\n                const move = moves[i]\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    board.undoMove()\r\n                    illegal++\r\n                    continue\r\n                }\r\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1)\r\n                board.undoMove()\r\n                if (currentEval > maxEval) {\r\n                    maxEval = currentEval\r\n                }\r\n                if (currentEval > alpha) {\r\n                    alpha = currentEval\r\n                }\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) {\r\n                if (board.isCheck(currentPlayer)) {\r\n                    return -30000 * depth // faster checkmates\r\n                }\r\n                return 0 // stalemate\r\n            }\r\n            return maxEval\r\n        } else {\r\n            let minEval = 30000\r\n            let illegal = 0\r\n            for (let i = 0; i < moves.length; i++) {\r\n                const move = moves[i]\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    board.undoMove()\r\n                    illegal++\r\n                    continue\r\n                }\r\n\r\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1)\r\n                board.undoMove()\r\n                if (currentEval < minEval) {\r\n                    minEval = currentEval\r\n                }\r\n\r\n                if (currentEval < beta) {\r\n                    beta = currentEval\r\n                }\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) {\r\n                if (board.isCheck(currentPlayer)) {\r\n                    return 30000 * depth\r\n                }\r\n                return 0\r\n\r\n            }\r\n            return minEval\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // const sortMovesQuiesce = (a, b) => {\r\n    //     if (a.ate !== null && b.ate !== null) {\r\n    //         const aScore = a.piece.points - a.ate.points\r\n    //         const bScore = b.piece.points - b.ate.points\r\n    //         return aScore < bScore ? 1: -1\r\n    //     } else if (a.ate !== null) {\r\n    //         return -1\r\n    //     } else if (b.ate !== null) {\r\n    //         return 1\r\n    //     }\r\n    //     return 0\r\n    // }\r\n    const sortMoves = (a, b) => {\r\n        if (a.ate !== null && b.ate !== null) {\r\n            const aScore = a.piece.points - a.ate.points\r\n            const bScore = b.piece.points - b.ate.points\r\n            return aScore < bScore ? -1: 1\r\n        } else if (a.ate !== null) {\r\n            return -1\r\n        } else if (b.ate !== null) {\r\n            return 1\r\n        } else {\r\n            const aScore = a.piece.colour === Piece.WHITE ? a.piece.whiteScore[a.newCell.row][a.newCell.col] : a.piece.blackScore[a.newCell.row][a.newCell.col]\r\n            const bScore = b.piece.colour === Piece.WHITE ? b.piece.whiteScore[b.newCell.row][b.newCell.col] : b.piece.blackScore[b.newCell.row][b.newCell.col]\r\n            return aScore < bScore ? 1: -1\r\n        }\r\n    }\r\n\r\n    const quiesce = (alpha, beta, board, colour, depth) => {\r\n        const evaluation = board.getScore(colour)\r\n        if (depth === 0) {\r\n            return evaluation\r\n        }\r\n        if (evaluation >= beta) {\r\n            return beta\r\n        }\r\n\r\n        alpha = Math.max(alpha, evaluation)\r\n        const moves = board.getAllMoves(colour)\r\n        moves.sort(sortMoves)\r\n        for (let i = 0; i < moves.length; i++) {\r\n            const move = moves[i]\r\n            if (move.ate !== null) { //  && move.ate.points > move.piece.points\r\n                board.movePiece(move.piece, move)\r\n                let score = -quiesce(-beta, -alpha, board, colour * -1, depth - 1)\r\n                board.undoMove()\r\n                if (score >= beta) {\r\n                    return beta\r\n                }\r\n                if (score > alpha) {\r\n                    alpha = score\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        return alpha\r\n    }\r\n    //\r\n    // const quiesceOdd = (alpha, beta, board, colour, depth) => {\r\n    //     // const evaluation = evaluate(board, colour)\r\n    //     let evaluation\r\n    //     const boardHash = board.getBoardHash() + colour.toString()\r\n    //     if (mem.has(boardHash)) {\r\n    //         evaluation = mem.get(boardHash)\r\n    //     } else {\r\n    //         evaluation = evaluate(board, colour)\r\n    //         mem.set(boardHash, evaluation)\r\n    //     }\r\n    //\r\n    //     if (depth === 0) {\r\n    //         return evaluation\r\n    //     }\r\n    //     if (evaluation >= beta) {\r\n    //         return beta\r\n    //     }\r\n    //\r\n    //     alpha = Math.max(alpha, evaluation)\r\n    //     const moves = board.getAllMoves(colour)\r\n    //     moves.sort(sortMovesQuiesce)\r\n    //     for (const move of moves) {\r\n    //         if (move.ate !== null) { //  && move.ate.points > move.piece.points\r\n    //             board.movePiece(move.piece, move)\r\n    //             let score = -quiesce(-beta, -alpha, board, switchColour(colour), depth - 1)\r\n    //             board.undoMove()\r\n    //             if (score >= beta) {\r\n    //                 return beta\r\n    //             }\r\n    //             if (score > alpha) {\r\n    //                 alpha = score\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return alpha\r\n    // }\r\n\r\n    // const negaMax = (depth, board, colour, maxColour) => {\r\n    //     if (depth === 0) {\r\n    //         return evaluate(board, maxColour)\r\n    //     }\r\n    //     const testGameOver = board.isGameOver(colour).isGameOver\r\n    //     if (testGameOver && colour === maxColour) {\r\n    //         return -Number.MAX_VALUE\r\n    //     }\r\n    //     if (testGameOver && colour !== maxColour) {\r\n    //         return Number.MAX_VALUE\r\n    //     }\r\n    //     let max = -Number.MAX_VALUE\r\n    //     const moves = board.getAllMoves(colour)\r\n    //     for (const move of moves) {\r\n    //         board.movePiece(move.piece, move)\r\n    //         const currentEval = -negaMax(depth - 1, board, switchColour(colour), maxColour)\r\n    //         if (currentEval > max) {\r\n    //             max = currentEval\r\n    //         }\r\n    //         board.undoMove()\r\n    //     }\r\n    //     return max\r\n    // }\r\n    // const rootNegaMax = (depth, board, colour, maxColour) => {\r\n    //     const rootMoves = board.getAllMoves(maxColour)\r\n    //     let max = -Number.MAX_VALUE\r\n    //     const randomIndex = Math.floor(Math.random() * (rootMoves.length - 1))\r\n    //     let bestMove = rootMoves.length > 0 ? rootMoves[randomIndex] : null\r\n    //     for (const move of rootMoves) {\r\n    //         board.movePiece(move.piece, move)\r\n    //         const score = negaMax(depth, board, colour, maxColour)\r\n    //         if (score > max) {\r\n    //             max = score\r\n    //             bestMove = move\r\n    //         }\r\n    //         board.undoMove()\r\n    //     }\r\n    //     return bestMove\r\n    //\r\n    // }\r\n    class Board {\r\n        board;\r\n\r\n        constructor() {\r\n            this.board = this.newBoard()\r\n            this.moves = []\r\n        }\r\n\r\n        newBoard = () => {\r\n            const startingBoard = [\r\n                [new Rook(Piece.BLACK, new Cell(0,0)), new Knight(Piece.BLACK, new Cell(0, 1)), new Bishop(Piece.BLACK, new Cell(0, 2)), new Queen(Piece.BLACK, new Cell(0, 3)), new King(Piece.BLACK, new Cell(0, 4)), new Bishop(Piece.BLACK, new Cell(0, 5)), new Knight(Piece.BLACK, new Cell(0, 6)), new Rook(Piece.BLACK, new Cell(0,7))],\r\n                [new Pawn(Piece.BLACK, new Cell(1, 0)), new Pawn(Piece.BLACK, new Cell(1, 1)), new Pawn(Piece.BLACK, new Cell(1, 2)), new Pawn(Piece.BLACK, new Cell(1, 3)), new Pawn(Piece.BLACK, new Cell(1, 4)), new Pawn(Piece.BLACK, new Cell(1, 5)), new Pawn(Piece.BLACK, new Cell(1, 6)), new Pawn(Piece.BLACK, new Cell(1, 7))],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [new Pawn(Piece.WHITE, new Cell(6, 0)), new Pawn(Piece.WHITE, new Cell(6, 1)), new Pawn(Piece.WHITE, new Cell(6, 2)), new Pawn(Piece.WHITE, new Cell(6, 3)), new Pawn(Piece.WHITE, new Cell(6, 4)), new Pawn(Piece.WHITE, new Cell(6, 5)), new Pawn(Piece.WHITE, new Cell(6, 6)), new Pawn(Piece.WHITE, new Cell(6, 7))],\r\n                [new Rook(Piece.WHITE, new Cell(7,0)), new Knight(Piece.WHITE, new Cell(7, 1)), new Bishop(Piece.WHITE, new Cell(7, 2)), new Queen(Piece.WHITE, new Cell(7, 3)), new King(Piece.WHITE, new Cell(7, 4)), new Bishop(Piece.WHITE, new Cell(7, 5)), new Knight(Piece.WHITE, new Cell(7, 6)), new Rook(Piece.WHITE, new Cell(7,7))],\r\n            ]\r\n            return startingBoard\r\n        }\r\n        // update piece square tables for endgame\r\n        setEndGame = () => {\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null && piece.whiteScoreEnd !== undefined) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            piece.whiteScore = piece.whiteScoreEnd\r\n                        } else {\r\n                            piece.blackScore = piece.blackScoreEnd\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // update values of pieces\r\n        updatePieceValues = (totalMoves) => {\r\n            const MOVE_THRESHOLD = 10\r\n            // for knight, -5 per missing pawn of any colour done\r\n            // for bishop, fianchetto bonus points, control over square colour (using pawns), bishop pair bonus\r\n            // rook penalty for trap by king, bonus for open file, bonus for each missing pawn\r\n            // pawn, increase value +30 if past pawn (no pawns of opposing colour on the 3 cols), decrease value if doubled (-10)\r\n\r\n            let whitePawnCount = 0\r\n            let blackPawnCount = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece instanceof Pawn) {\r\n                            if (piece.colour === Piece.WHITE) {\r\n                                whitePawnCount++\r\n                            } else {\r\n                                blackPawnCount++\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // first ten moves, bad to move queen out, and encourage piece development\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece instanceof Queen) {\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][3]+=50\r\n                                } else {\r\n                                    piece.blackScore[0][3]+=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Knight) {\r\n                            piece.points-= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][1]-=50\r\n                                    piece.whiteScore[7][6]-=50\r\n                                } else {\r\n                                    piece.blackScore[0][1]-=50\r\n                                    piece.blackScore[0][6]-=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Bishop) {\r\n                            piece.points+= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][2]-=50\r\n                                    piece.whiteScore[7][5]-=50\r\n                                } else {\r\n                                    piece.blackScore[0][2]-=50\r\n                                    piece.blackScore[0][5]-=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Rook) {\r\n                            piece.points+= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                        }\r\n                        if (piece instanceof Pawn) {\r\n                            let past = true\r\n                            if (col + 1 < 8) {\r\n                                for (let i = 0; i < 8; i++) {\r\n                                    if (this.getPiece(i, col + 1) instanceof Pawn) {\r\n                                        past = false\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (col - 1 >= 0) {\r\n                                for (let i = 0; i < 8; i++) {\r\n                                    if (this.getPiece(i, col - 1) instanceof Pawn) {\r\n                                        past = false\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (past) {\r\n                                piece.points+=30\r\n                            }\r\n                            let doubled = false\r\n                            for (let i = 0; i < 8; i++) {\r\n                                if (piece instanceof Pawn && i !== row) {\r\n                                    doubled = true\r\n                                }\r\n                            }\r\n                            if (doubled) {\r\n                                piece.points-=10\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        isEndGame = () => {\r\n            // End game defined by: either side has a queen + pawns only / either side has at most 2 minor pieces\r\n            let countWhitePieces = 0\r\n            let countBlackPieces = 0\r\n            let countWhiteQueen = 0\r\n            let countBlackQueen = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece instanceof Queen) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            countWhiteQueen++\r\n                        } else {\r\n                            countBlackQueen++\r\n                        }\r\n                    }\r\n                    if (piece instanceof Rook || piece instanceof Bishop || piece instanceof Knight) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            countWhitePieces++\r\n                        } else {\r\n                            countBlackPieces++\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return ((countWhiteQueen <= 1 && countWhitePieces <=0) || (countBlackQueen <= 1  && countBlackPieces <=0))\r\n                || ((countWhitePieces <=3 && countWhiteQueen <= 0) || (countBlackPieces <=3  && countBlackQueen <= 0))\r\n        }\r\n\r\n        setBoardString = (boardString) => {\r\n            const newBoard = []\r\n            for (let row = 0; row < 8; row++) {\r\n                const newRow = []\r\n                for (let col = 0; col < 8; col++) {\r\n                    const pieceString = boardString[row][col]\r\n                    if (pieceString === null) {\r\n                        newRow.push(null)\r\n                    } else {\r\n                        const pieceColour = pieceString.slice(0, 1)\r\n                        const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\r\n                        const piece = pieceString.slice(1, 2)\r\n                        if (piece === \"b\") {\r\n                            newRow.push(new Bishop(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'k') {\r\n                            newRow.push(new King(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'n') {\r\n                            newRow.push(new Knight(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'p') {\r\n                            newRow.push(new Pawn(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'q') {\r\n                            newRow.push(new Queen(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'r') {\r\n                            newRow.push(new Rook(actualColour, new Cell(row, col)))\r\n                        } else {\r\n                            newRow.push(null)\r\n                        }\r\n                    }\r\n                }\r\n                newBoard.push(newRow)\r\n            }\r\n            this.board = newBoard\r\n        }\r\n\r\n        getBoardHash = () => {\r\n            let str = \"\"\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        str += this.getPiece(row, col).getString()\r\n                    } else {\r\n                        str += \" \"\r\n                    }\r\n                }\r\n            }\r\n            return str\r\n        }\r\n\r\n        /**\r\n         * Returns the board represented by the array\r\n         */\r\n        getBoard = () => {\r\n            return this.board\r\n        }\r\n        /**\r\n         * Returns piece at the coordinates\r\n         */\r\n        getPiece = (row, col) => {\r\n            return this.board[row][col]\r\n        }\r\n\r\n        /**\r\n         * Returns if the cell is empty\r\n         */\r\n        isEmpty = (row, col) => {\r\n            if (this.isOutSide(row, col)) {\r\n                return false\r\n            }\r\n            return this.board[row][col] === null\r\n        }\r\n        isUnderCheck = (colour) => {\r\n            return false\r\n        }\r\n        isOutSide = (row, col) => {\r\n            return row < 0 || col < 0 || row > 7 || col > 7\r\n        }\r\n\r\n        canEat = (row, col, colour) => {\r\n            return !this.isOutSide(row, col) && !this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour\r\n        }\r\n\r\n\r\n        canMove = (row, col) => {\r\n            return !this.isOutSide(row, col) && this.isEmpty(row, col)\r\n        }\r\n\r\n        canKingMove = (row, col, colour) => {\r\n            const directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\r\n            for (const direction of directions) {\r\n                const newRow = row + direction[0]\r\n                const newCol = col + direction[1]\r\n                if (!this.isOutSide(newRow, newCol) && !this.isEmpty(newRow, newCol)\r\n                    && (this.getPiece(newRow, newCol).name === Piece.KING && this.getPiece(newRow, newCol).colour !== colour)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n\r\n        movePiece = (piece, move) => {\r\n            move.piece.movePiece(move, this)\r\n            this.moves.push(move)\r\n        }\r\n\r\n        undoMove = () => {\r\n            if (this.moves.length > 0) {\r\n                const move = this.moves.pop()\r\n                const prevRow = move.oldCell.row\r\n                const prevCol = move.oldCell.col\r\n                const piece = this.board[move.newCell.row][move.newCell.col]\r\n                if (piece === null) {\r\n                    console.log(this.getBoardString(), move)\r\n                }\r\n\r\n                this.board[prevRow][prevCol] = piece\r\n                piece.cell.row = prevRow\r\n                piece.cell.col = prevCol\r\n                if (move.isEnPassant) { // add back pawn\r\n                    this.board[move.ate.cell.row][move.ate.cell.col] = move.ate\r\n                    this.board[move.newCell.row][move.newCell.col] = null\r\n                    return true\r\n                } else if (move.isPromotion) { // remove piece, add back pawn\r\n                    this.board[prevRow][prevCol] = new Pawn(piece.colour, piece.cell, piece.moves)\r\n                } else if (move.castle.isCastle) { // king will be undone, need to undo rook\r\n                    this.board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = move.castle.rook.piece\r\n                    move.castle.rook.piece.cell.row = move.castle.rook.oldCell.row\r\n                    move.castle.rook.piece.cell.col = move.castle.rook.oldCell.col\r\n                    this.board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = null\r\n                }\r\n                this.board[move.newCell.row][move.newCell.col] = move.ate\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n\r\n        kingHasMoved = (colour) => {\r\n            for (const move of this.moves) {\r\n                if (move.piece.name === Piece.KING && move.piece.colour === colour) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        rookHasMoved = (colour, side) => {\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const col = side === King.KING_SIDE ? 7 : 0\r\n            if (!(this.getPiece(row, col) !== null && this.getPiece(row, col).name === Piece.ROOK)) { // no rook on cell\r\n                return true\r\n            }\r\n            for (const move of this.moves) {\r\n                if (move.piece.name === Piece.ROOK && move.piece.colour === colour && move.oldCell.row === row && move.oldCell.col === col) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        castlingSquaresIsEmpty = (colour, side) => {\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const cols = side === King.KING_SIDE ? [5,6] : [1,2,3]\r\n            for (const col of cols) {\r\n                if (!this.isEmpty(row, col)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n\r\n        // returns if colour is under check, need check for castling\r\n        isIllegal = (colour, move) => {\r\n            // get colour king first\r\n            let king;\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.name === Piece.KING) {\r\n                            if (piece.colour === colour) {\r\n                                king = piece\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (move.isCastle) {\r\n                const moves = this.getAllMoves(colour * -1)\r\n                const row = move.newCell.row\r\n                if (move.newCell.col === 6) { // kingside\r\n                    for (const opp of moves) {\r\n                        const moveRow = opp.newCell.row\r\n                        const moveCol = opp.newCell.col\r\n                        if (moveRow === row && (moveCol === 6 || moveCol === 5 || moveCol === 4)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (const opp of moves) {\r\n                        const moveRow = opp.newCell.row\r\n                        const moveCol = opp.newCell.col\r\n                        if (moveRow === row && (moveCol === 2 || moveCol === 3 || moveCol === 4)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.isCheck(this, king)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false\r\n        }\r\n        // check if colour is under check\r\n        isCheck = (colour) => {\r\n            let king;\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.name === Piece.KING) {\r\n                            if (piece.colour === colour) {\r\n                                king = piece\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.isCheck(this, king)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * Checks if game is over for colour, means other colour wins\r\n         * @param colour\r\n         * @return {*[]}\r\n         */\r\n\r\n        getAllMoves = (colour) => {\r\n            let squares = []\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour === colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        const moves = piece.getMoves(this)\r\n                        squares = squares.concat(moves)\r\n                    }\r\n                }\r\n            }\r\n            return squares\r\n        }\r\n        /**\r\n         * Goes through board for positional eval, like piece development, hardcoded for black\r\n         */\r\n        scanSquaresScore = () => {\r\n            let score = 0\r\n            let materialScore = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            materialScore += piece.points\r\n                        } else {\r\n                            materialScore -= piece.points\r\n                        }\r\n                        // const moves = piece.getMoves(this)\r\n                        // //board control\r\n                        // score += moves.length\r\n                        // // piece mobility\r\n                        // if (piece instanceof Bishop) {\r\n                        //     score += (moves.length * 3)\r\n                        // } else if (piece instanceof Knight) {\r\n                        //     score += (moves.length * 3)\r\n                        // } else if (piece instanceof Queen) {\r\n                        //     score += (moves.length * 6)\r\n                        // } else if (piece instanceof Rook) {\r\n                        //     score += (moves.length * 5)\r\n                        // }\r\n\r\n                        // development / positional score\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            score += piece.whiteScore[row][col]\r\n                        } else {\r\n                            score -= piece.blackScore[row][col]\r\n                        }\r\n\r\n                        // double pawns bad for ai, but good if he doubles opponent's pawn\r\n                        // if (piece.name === Piece.PAWN && piece.colour === Piece.WHITE) {\r\n                        //     if (!this.isEmpty(row + 1, col) && this.getPiece(row + 1, col).name === Piece.PAWN && piece.colour === Piece.WHITE) {\r\n                        //         score -= 20\r\n                        //     }\r\n                        // } else if (piece.name === Piece.PAWN && piece.colour !== Piece.WHITE) {\r\n                        //     if (!this.isEmpty(row - 1, col) && this.getPiece(row - 1, col).name === Piece.PAWN && piece.colour !== Piece.WHITE) {\r\n                        //         score += 20\r\n                        //     }\r\n                        // }\r\n                        // under check == bad, check opponent == good\r\n                        // if (piece.name === Piece.KING && piece.colour === colour) {\r\n                        //     if (this.isCheck(colour, attacked)) {\r\n                        //         score -= 10\r\n                        //     }\r\n                        // }\r\n                        // else if (piece instanceof King && piece.colour === opponentColour) {\r\n                        //     if (this.isCheck(opponentColour, attacked)) {\r\n                        //         score += 10\r\n                        //     }\r\n                        // }\r\n                    }\r\n                }\r\n            }\r\n            // if (this.board[3][4] instanceof Pawn && this.board[3][4].colour === Piece.WHITE\r\n            // && this.board) {\r\n            //     console.log(this.board)\r\n            // }\r\n            return score + materialScore\r\n        }\r\n\r\n        /**\r\n         * used for minimax heuristics\r\n         * @param colour colour making the next move\r\n         * @return {number} score of position\r\n         */\r\n        getScore = (colour) => {\r\n            const positionalScore = this.scanSquaresScore()\r\n            return (positionalScore) * colour * -1\r\n        }\r\n\r\n        getBoardString = () => {\r\n            const newBoard = []\r\n            for (let row = 0; row < 8; row++) {\r\n                const newRow = []\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        newRow.push(piece.getString())\r\n                    } else {\r\n                        newRow.push(null)\r\n                    }\r\n                }\r\n                newBoard.push(newRow)\r\n            }\r\n            return newBoard\r\n        }\r\n\r\n    }\r\n    /**\r\n     * This class represents a coordinate on the chess board\r\n     */\r\n    class Cell {\r\n        constructor(row, col) {\r\n            this.row = row\r\n            this.col = col\r\n        }\r\n    }\r\n    class Move {\r\n        oldCell\r\n        newCell\r\n\r\n        constructor(oldCell, newCell, piece, isEnPassant = false,\r\n                    castle = {isCastle: false}, ate = null, isPromotion = false) {\r\n            this.oldCell = oldCell\r\n            this.newCell = newCell\r\n            this.piece = piece\r\n            this.isEnPassant = isEnPassant\r\n            this.castle = castle\r\n            this.ate = ate\r\n            this.isPromotion = isPromotion\r\n        }\r\n\r\n        getMoveString = () => {\r\n            return {\r\n                oldCellRow: this.oldCell.row,\r\n                oldCellCol: this.oldCell.col,\r\n                newCellRow: this.newCell.row,\r\n                newCellCol: this.newCell.col,\r\n                pieceString: this.piece.getString(),\r\n                isEnPassant: this.isEnPassant,\r\n                castle: this.castle.isCastle === false ? {isCastle: false} : {isCastle: true,\r\n                    rook:{\r\n                    pieceString : this.castle.rook.piece.getString(),\r\n                    oldCellRow: this.castle.rook.oldCell.row,\r\n                    oldCellCol: this.castle.rook.oldCell.col,\r\n                    newCellRow: this.castle.rook.newCell.row,\r\n                    newCellCol: this.castle.rook.newCell.col,\r\n                }},\r\n                ate: this.ate !== null ? this.ate.getString() : null,\r\n                isPromotion: this.isPromotion\r\n            }\r\n        }\r\n        static parseMove = (board, data) => {\r\n            const parseMove = new Move(\r\n                new Cell(data.oldCellRow, data.oldCellCol),\r\n                new Cell(data.newCellRow, data.newCellCol),\r\n                Piece.parsePieceString(data.pieceString),\r\n                data.isEnPassant,\r\n                {isCastle: false},\r\n                null,\r\n                data.isPromotion\r\n            )\r\n\r\n            if (data.castle.isCastle) {\r\n                const rookObj = data.castle.rook\r\n                parseMove.castle.isCastle = true\r\n                parseMove.castle.rook = new Move(new Cell(rookObj.oldCellRow, rookObj.oldCellCol)\r\n                    , new Cell(rookObj.newCellRow, rookObj.newCellCol), board.getPiece(rookObj.oldCellRow, rookObj.oldCellCol))\r\n            }\r\n            return parseMove\r\n        }\r\n\r\n    }\r\n    class Piece {\r\n        static WHITE = -1\r\n        static BLACK = 1\r\n        static ROOK = \"r\"\r\n        static BISHOP = \"b\"\r\n        static KNIGHT = \"n\"\r\n        static KING = \"k\"\r\n        static QUEEN = \"q\"\r\n        static PAWN = \"p\"\r\n        constructor(colour, cell) {\r\n            this.colour = colour // white or black\r\n            this.cell = cell\r\n        }\r\n        static parsePieceString = (pieceString) => {\r\n            const pieceColour = pieceString.slice(0, 1)\r\n            const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\r\n            const piece = pieceString.slice(1, 2)\r\n            if (piece === \"b\") {\r\n                return new Bishop(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'k') {\r\n                return new King(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'n') {\r\n                return new Knight(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'p') {\r\n                return new Pawn(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'q') {\r\n                return new Queen(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'r') {\r\n                return new Rook(actualColour, new Cell(0, 0))\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    class Bishop extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1]]\r\n        points = 330\r\n        name = Piece.BISHOP\r\n        whiteScore = [\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-10,  0,  5, 10, 10,  5,  0,-10],\r\n            [-10,  5,  5, 10, 10,  5,  5,-10],\r\n            [-10,  0, 10, 10, 10, 10,  0,-10],\r\n            [-10, 10, 10, 10, 10, 10, 10,-10],\r\n            [-10,  5,  0,  0,  0,  0,  5,-10],\r\n            [-20,-10,-10,-10,-10,-10,-10,-20]\r\n        ]\r\n        blackScore = [\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n            [-10,  5,  0,  0,  0,  0,  5,-10],\r\n            [-10, 10, 10, 10, 10, 10, 10,-10],\r\n            [-10,  0, 10, 10, 10, 10,  0,-10],\r\n            [-10,  5,  5, 10, 10,  5,  5,-10],\r\n            [-10,  0,  5, 10, 10,  5,  0,-10],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if (rowDiff !== colDiff) {\r\n                return false\r\n            }\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"b\"\r\n        }\r\n    }\r\n    class King extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\r\n        static KING_SIDE = -1\r\n        static QUEEN_SIDE = 1\r\n        name = Piece.KING\r\n        points = 10000\r\n\r\n        whiteScore = [\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-20,-30,-30,-40,-40,-30,-30,-20],\r\n            [-10,-20,-20,-20,-20,-20,-20,-10],\r\n            [20, 20,  0,  0,  0,  0, 20, 20],\r\n            [20, 30, 10,  0,  0, 10, 30, 20]\r\n        ]\r\n\r\n        blackScore = [\r\n            [20, 30, 10,  0,  0, 10, 30, 20],\r\n            [20, 20,  0,  0,  0,  0, 20, 20],\r\n            [-10,-20,-20,-20,-20,-20,-20,-10],\r\n            [-20,-30,-30,-40,-40,-30,-30,-20],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n        ]\r\n        whiteScoreEnd = [\r\n            [-50,-40,-30,-20,-20,-30,-40,-50],\r\n            [-30,-20,-10,  0,  0,-10,-20,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-30,  0,  0,  0,  0,-30,-30],\r\n            [-50,-30,-30,-30,-30,-30,-30,-50]\r\n        ]\r\n        blackScoreEnd = [\r\n            [-50,-30,-30,-30,-30,-30,-30,-50],\r\n            [-30,-30,  0,  0,  0,  0,-30,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-20,-10,  0,  0,-10,-20,-30],\r\n            [-50,-40,-30,-20,-20,-30,-40,-50],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (((board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol))) && board.canKingMove(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                }\r\n            }\r\n            // king and rook has not moved, illegal check later\r\n            if (board.castlingSquaresIsEmpty(this.colour, King.KING_SIDE) && !board.rookHasMoved(this.colour, King.KING_SIDE) && !board.kingHasMoved(this.colour)) {\r\n                const row = this.colour === Piece.BLACK ? 0 : 7\r\n                const col = 6\r\n                moves.push(new Move(new Cell(currentRow, currentCol), new Cell(row, col), this, false,\r\n                    {isCastle: true, rook: new Move(new Cell(row, 7), new Cell(row, 5), board.getPiece(row, 7))}))\r\n            }\r\n            if (board.castlingSquaresIsEmpty(this.colour, King.QUEEN_SIDE) && !board.rookHasMoved(this.colour, King.QUEEN_SIDE) && !board.kingHasMoved(this.colour)) {\r\n                const row = this.colour === Piece.BLACK ? 0 : 7\r\n                const col = 2\r\n                moves.push(new Move(new Cell(currentRow, currentCol), new Cell(row, col), this, false,\r\n                    {isCastle: true, rook: new Move(new Cell(row, 0), new Cell(row, 3), board.getPiece(row, 0))}))\r\n            }\r\n\r\n\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            return false\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            if (move.castle.isCastle) {\r\n                board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = move.castle.rook.piece\r\n                board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = null\r\n                move.castle.rook.piece.cell.row = move.castle.rook.newCell.row\r\n                move.castle.rook.piece.cell.col = move.castle.rook.newCell.col\r\n            }\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"k\"\r\n        }\r\n    }\r\n    class Knight extends Piece {\r\n        directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\r\n\r\n        points = 320\r\n        name = Piece.KNIGHT\r\n\r\n        whiteScore = [\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n            [-40,-20,  0,  0,  0,  0,-20,-40],\r\n            [-30,  0, 10, 15, 15, 10,  0,-30],\r\n            [-30,  5, 15, 20, 20, 15,  5,-30],\r\n            [-30,  0, 15, 20, 20, 15,  0,-30],\r\n            [-30,  5, 10, 15, 15, 10,  5,-30],\r\n            [-40,-20,  0,  5,  5,  0,-20,-40],\r\n            [-50,-40,-30,-30,-30,-30,-40,-50]\r\n        ]\r\n\r\n        blackScore = [\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n            [-40,-20,  0,  5,  5,  0,-20,-40],\r\n            [-30,  5, 10, 15, 15, 10,  5,-30],\r\n            [-30,  0, 15, 20, 20, 15,  0,-30],\r\n            [-30,  5, 15, 20, 20, 15,  5,-30],\r\n            [-30,  0, 10, 15, 15, 10,  0,-30],\r\n            [-40,-20,  0,  0,  0,  0,-20,-40],\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if (rowDiff + colDiff !== 3) {\r\n                return false\r\n            }\r\n            return !(rowDiff === 0 || colDiff === 0);\r\n\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"n\"\r\n        }\r\n    }\r\n    class Pawn extends Piece {\r\n        points = 100\r\n        name = Piece.PAWN\r\n\r\n        whiteScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5, -5,-10,  0,  0,-10, -5,  5],\r\n            [5, 10, 10,-20,-20, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0]\r\n        ]\r\n        whiteScoreEnd = [\r\n            [100,  100,  100,  100,  100,  100,  100,  100],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5, -5,-10,  0,  0,-10, -5,  5],\r\n            [5, 10, 10,-20,-20, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0]\r\n        ]\r\n        blackScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10,-40,-40, 10, 10,  5],\r\n            [5, 10,20,  0,  0,-10, -5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n        ]\r\n        blackScoreEnd = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10,-40,-40, 10, 10,  5],\r\n            [5, 10,20,  0,  0,-10, -5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [100,  100,  100,  100,  100,  100,  100,  100],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            const moves = []\r\n            let newRow = this.cell.row + 1 * this.colour\r\n            let newCol = this.cell.col\r\n            if (board.canMove(newRow, newCol)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol),\r\n                    this, undefined, undefined, undefined,\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n\r\n                newRow = this.cell.row + 2 * this.colour\r\n                if (board.canMove(newRow, newCol) && (newRow === 3 || newRow === 4)) {\r\n                    if (this.colour === Piece.BLACK && this.cell.row === 1) {\r\n                        const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n\r\n                            moves.push(move)\r\n\r\n                    } else if (this.colour === Piece.WHITE && this.cell.row === 6) {\r\n                        const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                            moves.push(move)\r\n                    }\r\n\r\n                }\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col + 1\r\n            if (board.canEat(newRow, newCol, this.colour)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this , undefined, undefined, board.getPiece(newRow, newCol),\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n            }\r\n            // en passant\r\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\r\n                const prevMove = board.moves.slice(-1)[0]\r\n                if (prevMove.piece.name === Piece.PAWN && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col + 1\r\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this, true)\r\n                        moves.push(move)\r\n                }\r\n\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col - 1\r\n            if (board.canEat(newRow, newCol, this.colour)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this , undefined, undefined, board.getPiece(newRow, newCol),\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n            }\r\n            // en passant\r\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\r\n                const prevMove = board.moves.slice(-1)[0]\r\n                if (prevMove.piece.name === Piece.PAWN && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col - 1\r\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this, true)\r\n                    moves.push(move)\r\n                }\r\n\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const newRow = this.cell.row + 1 * this.colour\r\n            const newCol = this.cell.col + 1\r\n            const newColOpp = this.cell.col - 1\r\n            return newRow === kingRow && (newCol === kingCol || newColOpp === kingCol)\r\n        }\r\n\r\n        /**\r\n         * Moves the piece\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            // const old = board[move.oldCell.row][move.oldCell.col]\r\n            // promotion\r\n            if (move.isEnPassant) {\r\n                const prevMove = boardObject.moves.slice(-1)[0]\r\n                const oldPiece = board[prevMove.newCell.row][prevMove.newCell.col]\r\n                if (oldPiece !== null) {\r\n                    move.ate = oldPiece\r\n                }\r\n                board[prevMove.newCell.row][prevMove.newCell.col] = null\r\n            }\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            if (move.isPromotion) {\r\n                board[newRow][newCol] = new Queen(this.colour, this.cell)\r\n            }\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"p\"\r\n        }\r\n    }\r\n    class Queen extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1], [0,1], [1,0], [0,-1],[-1,0]]\r\n        points = 900\r\n        name = Piece.QUEEN\r\n\r\n        whiteScore = [\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-10,  0,  5,  5,  5,  5,  0,-10],\r\n            [-5,  0,  5,  5,  5,  5,  0, -5],\r\n            [0,  0,  5,  5,  5,  5,  0, -5],\r\n            [-10,  5,  5,  5,  5,  5,  0,-10],\r\n            [-10,  0,  5,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10, -5, -5,-10,-10,-20]\r\n        ]\r\n        blackScore = [\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n            [-10,  0,  5,  0,  0,  0,  0,-10],\r\n            [-10,  5,  5,  5,  5,  5,  0,-10],\r\n            [0,  0,  5,  5,  5,  5,  0, -5],\r\n            [-5,  0,  5,  5,  5,  5,  0, -5],\r\n            [-10,  0,  5,  5,  5,  5,  0,-10],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                        moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if ((rowDiff !== colDiff) && kingCol !== col && kingRow !== row) {\r\n                return false\r\n            }\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break;\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"q\"\r\n        }\r\n    }\r\n    class Rook extends Piece {\r\n        directions = [[0,1], [1,0], [0,-1],[-1,0]]\r\n        points = 500\r\n        name = Piece.ROOK\r\n        whiteScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10, 10, 10, 10, 10,  5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [0,  0,  0,  5,  5,  0,  0,  0]\r\n        ]\r\n        blackScore = [\r\n            [0,  0,  4,  5,  5,  10,  0,  0],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [5, 10, 10, 10, 10, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                        moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            if (kingCol !== col && kingRow !== row) {\r\n                return false\r\n            }\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"r\"\r\n        }\r\n    }\r\n\r\n        try {\r\n            const data = message.data\r\n            const boardString = data[0]\r\n            const depth = data[1]\r\n            const moveString = data[2]\r\n            const colour = data[3]\r\n            totalMoves = moveString.length\r\n            if (totalMoves === 0) {\r\n                if (colour === Piece.WHITE) {\r\n                    // equal chance to play d4, e4\r\n                    const moves = [\r\n                        new Move(new Cell(6, 3), new Cell(4,3), new Pawn(Piece.WHITE, new Cell(6, 3))),\r\n                        new Move(new Cell(6, 4), new Cell(4,4), new Pawn(Piece.WHITE, new Cell(6, 4))),\r\n                    ]\r\n                    const randomIndex = Math.round(Math.random() * (moves.length - 1))\r\n\r\n                    postMessage(moves[randomIndex].getMoveString())\r\n                }\r\n            } else if (totalMoves === 1) {\r\n                // equal chance to play c5 / e5, in response to e4\r\n                const getMove = moveString.map(x => Move.parseMove(undefined, x))[0]\r\n                if (getMove.oldCell.row === 6 && getMove.oldCell.col === 4 && getMove.newCell.row === 4 && getMove.newCell.col === 4) {\r\n                    const moves = [\r\n                        new Move(new Cell(1, 2), new Cell(3,2), new Pawn(Piece.BLACK, new Cell(1, 2))),\r\n                        new Move(new Cell(1, 4), new Cell(3,4), new Pawn(Piece.BLACK, new Cell(1, 4))),\r\n                    ]\r\n                    const randomIndex = Math.round(Math.random() * (moves.length - 1))\r\n\r\n                    postMessage(moves[randomIndex].getMoveString())\r\n                } else {\r\n                    const nextMove = ab(boardString, depth, moveString, colour)\r\n                    postMessage(nextMove.getMoveString())\r\n                }\r\n            } else {\r\n                const nextMove = ab(boardString, depth, moveString, colour)\r\n                postMessage(nextMove.getMoveString())\r\n            }\r\n        } catch (e) {\r\n            postMessage({isError: true, message:\"Error: \" + e})\r\n        }\r\n\r\n}\r\n// eslint-disable-next-line no-restricted-globals,no-undef\r\nself.addEventListener(\"message\", test);\r\n"],"names":["totalMoves","self","addEventListener","async","message","ab","boardString","depth","moveString","colour","copyBoard","Board","setBoardString","moves","map","x","Move","parseMove","isEndGame","console","log","setEndGame","updatePieceValues","result","miniMax","Number","MAX_VALUE","board","alpha","beta","maxPlayer","currentPlayer","getAllMoves","bestMove","sort","sortMoves","maxEval","illegal","i","length","move","movePiece","piece","isIllegal","undoMove","undefined","currentEval","miniMaxCore","Math","max","isCheck","minEval","min","slice","ate","quiesce","getScore","a","b","points","Piece","WHITE","whiteScore","newCell","row","col","blackScore","evaluation","score","constructor","this","newBoard","Rook","BLACK","Cell","Knight","Bishop","Queen","King","Pawn","getPiece","whiteScoreEnd","blackScoreEnd","whitePawnCount","blackPawnCount","past","doubled","countWhitePieces","countBlackPieces","countWhiteQueen","countBlackQueen","newRow","pieceString","push","actualColour","getBoardHash","str","isEmpty","getString","getBoard","isOutSide","isUnderCheck","canEat","canMove","canKingMove","directions","direction","newCol","name","KING","pop","prevRow","oldCell","prevCol","getBoardString","cell","isEnPassant","isPromotion","castle","isCastle","rook","kingHasMoved","rookHasMoved","side","KING_SIDE","ROOK","castlingSquaresIsEmpty","cols","king","opp","moveRow","moveCol","squares","getMoves","concat","scanSquaresScore","materialScore","getMoveString","oldCellRow","oldCellCol","newCellRow","newCellCol","static","data","parsePieceString","rookObj","BISHOP","super","currentRow","currentCol","kingRow","kingCol","abs","boardObject","oldPiece","QUEEN_SIDE","KNIGHT","rowDiff","colDiff","PAWN","prevMove","newColOpp","QUEEN","randomIndex","round","random","postMessage","getMove","nextMove","e","isError"],"sourceRoot":""}