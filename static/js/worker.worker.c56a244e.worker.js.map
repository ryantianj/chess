{"version":3,"file":"static/js/worker.worker.c56a244e.worker.js","mappings":"YAAA,IAAIA,EAAa,EAmoDjBC,KAAKC,iBAAiB,WAloDTC,MAAOC,IAahB,MAAMC,EAAM,CAACC,EAAaC,EAAOC,EAAYC,KACzC,MAAMC,EAAY,IAAIC,EACtBD,EAAUE,eAAeN,GAEzBI,EAAUG,MAAQL,EAAWM,KAAIC,GAAKC,EAAKC,UAAUP,EAAWK,KAC9CL,EAAUQ,cAExBC,QAAQC,IAAI,WACZV,EAAUW,cAEdX,EAAUY,kBAAkBtB,GAC5B,MAAMuB,EAASC,EAAQd,EAAWH,GAAQkB,OAAOC,UAAWD,OAAOC,UAAWjB,EAAQA,GAMtF,OADAU,QAAQC,IAAI,QAASG,EAAO,IACrBA,EAAO,EAAC,EAGbC,EAAU,CAACG,EAAOpB,EAAOqB,EAAOC,EAAMC,EAAWC,KACnD,MAAMlB,EAAQc,EAAMK,YAAYD,GAEhC,IAAIE,EACJ,GAFApB,EAAMqB,KAAKC,GAEPJ,IAAkBD,EAAW,CAC7B,IAAIM,GAAW,IACXC,EAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAAM0B,OAAQD,IAAK,CACnC,MAAME,EAAO3B,EAAMyB,GAEnB,GADAX,EAAMc,UAAUD,EAAKE,MAAOF,GACxBb,EAAMgB,UAAUZ,EAAeS,GAAO,CACtCb,EAAMiB,WACNP,IACA,QACJ,MAEiBQ,IAAbZ,IACAA,EAAWO,GAEf,MAAMM,EAAcC,EAAYpB,EAAOpB,EAAQ,EAAGqB,EAAOC,EAAMC,GAA4B,EAAjBC,EAAoBlB,GAO9F,GANAc,EAAMiB,WACFE,EAAcV,IACdA,EAAUU,EACVb,EAAWO,GAGXX,IADJD,EAAQoB,KAAKC,IAAIrB,EAAOkB,IAEpB,KAER,CACA,OAAIT,IAAYxB,EAAM0B,OACdZ,EAAMuB,QAAQnB,GACP,CAAC,MAAO,KAEZ,CAAC,KAAM,GAEX,CAACE,EAAUG,EACtB,CAAO,CACH,IAAIe,EAAU,IACVd,EAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAAM0B,OAAQD,IAAK,CACnC,MAAME,EAAO3B,EAAMyB,GAEnB,GADAX,EAAMc,UAAUD,EAAKE,MAAOF,GACxBb,EAAMgB,UAAUZ,EAAeS,GAAO,CACtCb,EAAMiB,WACNP,IACA,QACJ,MACiBQ,IAAbZ,IACAA,EAAWO,GAEf,MAAMM,EAAcC,EAAYpB,EAAOpB,EAAQ,EAAGqB,EAAOC,EAAMC,GAA4B,EAAjBC,EAAoBlB,GAO9F,GANAc,EAAMiB,WACFE,EAAcK,IACdA,EAAUL,EACVb,EAAWO,IAEfX,EAAOmB,KAAKI,IAAIvB,EAAMiB,KACVlB,EACR,KAER,CACA,OAAIS,IAAYxB,EAAM0B,OACdZ,EAAMuB,QAAQnB,GACP,CAAC,KAAM,KAEX,CAAC,KAAM,GAGX,CAACE,EAAUkB,EACtB,GAEEJ,EAAc,CAACpB,EAAOpB,EAAOqB,EAAOC,EAAMC,EAAWC,EAAesB,KACtE,GAAc,IAAV9C,EAAa,CACb,IAAIgB,EAMJ,OAJIA,EADAO,IAAcC,GAAkD,OAAjCJ,EAAMd,MAAMyC,OAAO,GAAG,GAAGC,IAC/CC,EAAQ5B,EAAOC,EAAMF,EAAOI,EAAe,EAAGsB,GAE9C1B,EAAM8B,SAAS3B,EAAWuB,GAEhC9B,CACX,CACA,MAAMV,EAAQc,EAAMK,YAAYD,GAEhC,GADAlB,EAAMqB,KAAKC,GACPJ,IAAkBD,EAAW,CAC7B,IAAIM,GAAW,IACXC,EAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAAM0B,OAAQD,IAAK,CACnC,MAAME,EAAO3B,EAAMyB,GAEnB,GADAX,EAAMc,UAAUD,EAAKE,MAAOF,GACxBb,EAAMgB,UAAUZ,EAAeS,GAAO,CACtCb,EAAMiB,WACNP,IACA,QACJ,CACA,MAAMS,EAAcC,EAAYpB,EAAOpB,EAAQ,EAAGqB,EAAOC,EAAMC,GAA4B,EAAjBC,EAAoBlB,GAQ9F,GAPAc,EAAMiB,WACFE,EAAcV,IACdA,EAAUU,GAEVA,EAAclB,IACdA,EAAQkB,GAERjB,GAAQD,EACR,KAER,CACA,OAAIS,IAAYxB,EAAM0B,OACdZ,EAAMuB,QAAQnB,IACN,IAAQxB,EAEb,EAEJ6B,CACX,CAAO,CACH,IAAIe,EAAU,IACVd,EAAU,EACd,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAAM0B,OAAQD,IAAK,CACnC,MAAME,EAAO3B,EAAMyB,GAEnB,GADAX,EAAMc,UAAUD,EAAKE,MAAOF,GACxBb,EAAMgB,UAAUZ,EAAeS,GAAO,CACtCb,EAAMiB,WACNP,IACA,QACJ,CAEA,MAAMS,EAAcC,EAAYpB,EAAOpB,EAAQ,EAAGqB,EAAOC,EAAMC,GAA4B,EAAjBC,EAAoBsB,GAS9F,GARA1B,EAAMiB,WACFE,EAAcK,IACdA,EAAUL,GAGVA,EAAcjB,IACdA,EAAOiB,GAEPjB,GAAQD,EACR,KAER,CACA,OAAIS,IAAYxB,EAAM0B,OACdZ,EAAMuB,QAAQnB,GACP,IAAQxB,EAEZ,EAGJ4C,CACX,GAiBEhB,EAAY,CAACuB,EAAGC,KAClB,GAAc,OAAVD,EAAEH,KAA0B,OAAVI,EAAEJ,IAAc,CAGlC,OAFeG,EAAEhB,MAAMkB,OAASF,EAAEH,IAAIK,OACvBD,EAAEjB,MAAMkB,OAASD,EAAEJ,IAAIK,QACZ,EAAG,CACjC,CAAO,GAAc,OAAVF,EAAEH,IACT,OAAQ,EACL,GAAc,OAAVI,EAAEJ,IACT,OAAO,EAIP,OAFeG,EAAEhB,MAAMjC,SAAWoD,EAAMC,MAAQJ,EAAEhB,MAAMqB,WAAWL,EAAEM,QAAQC,KAAKP,EAAEM,QAAQE,KAAOR,EAAEhB,MAAMyB,WAAWT,EAAEM,QAAQC,KAAKP,EAAEM,QAAQE,OAChIP,EAAEjB,MAAMjC,SAAWoD,EAAMC,MAAQH,EAAEjB,MAAMqB,WAAWJ,EAAEK,QAAQC,KAAKN,EAAEK,QAAQE,KAAOP,EAAEjB,MAAMyB,WAAWR,EAAEK,QAAQC,KAAKN,EAAEK,QAAQE,MACtH,GAAI,CACjC,EAGEV,EAAU,CAAC5B,EAAOC,EAAMF,EAAOlB,EAAQF,EAAO8C,KAChD,MAAMe,EAAazC,EAAM8B,SAAShD,EAAQ4C,GAC1C,GAAc,IAAV9C,EACA,OAAO6D,EAEX,GAAIA,GAAcvC,EACd,OAAOA,EAGXD,EAAQoB,KAAKC,IAAIrB,EAAOwC,GACxB,MAAMvD,EAAQc,EAAMK,YAAYvB,GAChCI,EAAMqB,KAAKC,GACX,IAAK,IAAIG,EAAI,EAAGA,EAAIzB,EAAM0B,OAAQD,IAAK,CACnC,MAAME,EAAO3B,EAAMyB,GACnB,GAAiB,OAAbE,EAAKe,IAWL,MAXmB,CACnB5B,EAAMc,UAAUD,EAAKE,MAAOF,GAC5B,IAAI6B,GAASb,GAAS3B,GAAOD,EAAOD,GAAiB,EAAVlB,EAAaF,EAAQ,EAAG8C,GAEnE,GADA1B,EAAMiB,WACFyB,GAASxC,EACT,OAAOA,EAEPwC,EAAQzC,IACRA,EAAQyC,EAEhB,CAGJ,CACA,OAAOzC,GAgFX,MAAMjB,EACFgB,MAEA2C,cACIC,KAAK5C,MAAQ4C,KAAKC,WAClBD,KAAK1D,MAAQ,EACjB,CAEA2D,SAAW,IACe,CAClB,CAAC,IAAIC,EAAKZ,EAAMa,MAAO,IAAIC,EAAK,EAAE,IAAK,IAAIC,EAAOf,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIE,EAAOhB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIG,EAAMjB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAII,EAAKlB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIE,EAAOhB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIC,EAAOf,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIF,EAAKZ,EAAMa,MAAO,IAAIC,EAAK,EAAE,KAC3T,CAAC,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,KACpT,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,KACpT,CAAC,IAAIF,EAAKZ,EAAMC,MAAO,IAAIa,EAAK,EAAE,IAAK,IAAIC,EAAOf,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIE,EAAOhB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIG,EAAMjB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAII,EAAKlB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIE,EAAOhB,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIC,EAAOf,EAAMC,MAAO,IAAIa,EAAK,EAAG,IAAK,IAAIF,EAAKZ,EAAMC,MAAO,IAAIa,EAAK,EAAE,MAKnUtD,WAAa,KACT,IAAK,IAAI4C,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMxB,EAAQ6B,KAAKU,SAAShB,EAAKC,GACnB,OAAVxB,QAA0CG,IAAxBH,EAAMwC,gBACpBxC,EAAMjC,SAAWoD,EAAMC,MACvBpB,EAAMqB,WAAarB,EAAMwC,cAEzBxC,EAAMyB,WAAazB,EAAMyC,cAGrC,CACJ,EAGJ7D,kBAAqBtB,IAOjB,IAAIoF,EAAiB,EACjBC,EAAiB,EACrB,IAAK,IAAIpB,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMxB,EAAQ6B,KAAKU,SAAShB,EAAKC,GACnB,OAAVxB,GACIA,aAAiBsC,IACbtC,EAAMjC,SAAWoD,EAAMC,MACvBsB,IAEAC,IAIhB,CAEJ,MAAMC,EAAY,GAClB,IAAK,IAAIpB,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,IAAIqB,GAAU,EACd,IAAK,IAAItB,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMvB,EAAQ6B,KAAKU,SAAShB,EAAKC,GACjC,GAAc,OAAVxB,GACIA,aAAiBsC,EAAM,CACvBO,GAAU,EACV,KACJ,CAER,CACKA,GACDD,EAAUE,KAAKtB,EAEvB,CAGA,IAAK,IAAID,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMxB,EAAQ6B,KAAKU,SAAShB,EAAKC,GACjC,GAAc,OAAVxB,EAAgB,CAkChB,GAjCIA,aAAiBoC,GACb9E,GA7CG,KA8CC0C,EAAMjC,SAAWoD,EAAMC,MACvBpB,EAAMqB,WAAW,GAAG,IAAI,GAExBrB,EAAMyB,WAAW,GAAG,IAAI,IAIhCzB,aAAiBkC,IACjBlC,EAAMkB,QAAmD,GAAxC,GAAKwB,EAAiBC,GACnCrF,GAvDG,KAwDC0C,EAAMjC,SAAWoD,EAAMC,OACvBpB,EAAMqB,WAAW,GAAG,IAAI,GACxBrB,EAAMqB,WAAW,GAAG,IAAI,KAExBrB,EAAMyB,WAAW,GAAG,IAAI,GACxBzB,EAAMyB,WAAW,GAAG,IAAI,MAIhCzB,aAAiBmC,IACjBnC,EAAMkB,QAAmD,GAAxC,GAAKwB,EAAiBC,GACnCrF,GAnEG,KAoEC0C,EAAMjC,SAAWoD,EAAMC,OACvBpB,EAAMqB,WAAW,GAAG,IAAI,GACxBrB,EAAMqB,WAAW,GAAG,IAAI,KAExBrB,EAAMyB,WAAW,GAAG,IAAI,GACxBzB,EAAMyB,WAAW,GAAG,IAAI,MAIhCzB,aAAiB+B,EAAM,CACvB/B,EAAMkB,QAAmD,GAAxC,GAAKwB,EAAiBC,GACvC,IAAK,MAAMI,KAAWH,EAClB,IAAK,IAAII,EAAU,EAAGA,EAAQ,EAAGA,IAC7BhD,EAAMqB,WAAW2B,GAASD,IAAW,GACrC/C,EAAMyB,WAAWuB,GAASD,IAAW,EAGjD,CACA,GAAI/C,aAAiBsC,EAAM,CACvB,IAAIW,GAAO,EACX,GAAIzB,EAAM,EAAI,EACV,IAAK,IAAI5B,EAAI,EAAGA,EAAI,EAAGA,IACfiC,KAAKU,SAAS3C,EAAG4B,EAAM,aAAcc,IACrCW,GAAO,GAInB,GAAIzB,EAAM,GAAK,EACX,IAAK,IAAI5B,EAAI,EAAGA,EAAI,EAAGA,IACfiC,KAAKU,SAAS3C,EAAG4B,EAAM,aAAcc,IACrCW,GAAO,GAIfA,IACIjD,EAAMjC,SAAWoD,EAAMC,MACvBpB,EAAMkB,QAAU,IAAM,EAAIK,GAE1BvB,EAAMkB,QAAU,IAAMK,EAAM,IAIpC,IAAI2B,GAAU,EACd,IAAK,IAAItD,EAAI,EAAGA,EAAI,EAAGA,IACfI,aAAiBsC,GAAQ1C,IAAM2B,IAC/B2B,GAAU,GAGdA,IACAlD,EAAMkB,QAAQ,GAEtB,CACJ,CACJ,CACJ,EAGJ1C,UAAY,KAER,IAAI2E,EAAmB,EACnBC,EAAmB,EACnBC,EAAkB,EAClBC,EAAkB,EACtB,IAAK,IAAI/B,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMxB,EAAQ6B,KAAKU,SAAShB,EAAKC,GAC7BxB,aAAiBoC,IACbpC,EAAMjC,SAAWoD,EAAMC,MACvBiC,IAEAC,MAGJtD,aAAiB+B,GAAQ/B,aAAiBmC,GAAUnC,aAAiBkC,KACjElC,EAAMjC,SAAWoD,EAAMC,MACvB+B,IAEAC,IAGZ,CAEJ,OAASC,GAAmB,GAAKF,GAAmB,GAAOG,GAAmB,GAAMF,GAAmB,GAC9FD,GAAmB,GAAKE,GAAmB,GAAOD,GAAmB,GAAME,GAAmB,CAAE,EAG7GpF,eAAkBN,IACd,MAAMkE,EAAW,GACjB,IAAK,IAAIP,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMgC,EAAS,GACf,IAAK,IAAI/B,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMgC,EAAc5F,EAAY2D,GAAKC,GACrC,GAAoB,OAAhBgC,EACAD,EAAOT,KAAK,UACT,CACH,MACMW,EAA+B,MADjBD,EAAY5C,MAAM,EAAG,GACEO,EAAMC,MAAQD,EAAMa,MACzDhC,EAAQwD,EAAY5C,MAAM,EAAG,GACrB,MAAVZ,EACAuD,EAAOT,KAAK,IAAIX,EAAOsB,EAAc,IAAIxB,EAAKV,EAAKC,KAClC,MAAVxB,EACPuD,EAAOT,KAAK,IAAIT,EAAKoB,EAAc,IAAIxB,EAAKV,EAAKC,KAChC,MAAVxB,EACPuD,EAAOT,KAAK,IAAIZ,EAAOuB,EAAc,IAAIxB,EAAKV,EAAKC,KAClC,MAAVxB,EACPuD,EAAOT,KAAK,IAAIR,EAAKmB,EAAc,IAAIxB,EAAKV,EAAKC,KAChC,MAAVxB,EACPuD,EAAOT,KAAK,IAAIV,EAAMqB,EAAc,IAAIxB,EAAKV,EAAKC,KACjC,MAAVxB,EACPuD,EAAOT,KAAK,IAAIf,EAAK0B,EAAc,IAAIxB,EAAKV,EAAKC,KAEjD+B,EAAOT,KAAK,KAEpB,CACJ,CACAhB,EAASgB,KAAKS,EAClB,CACA1B,KAAK5C,MAAQ6C,GAGjB4B,aAAe,KACX,IAAIC,EAAM,GACV,IAAK,IAAIpC,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAClBK,KAAK+B,QAAQrC,EAAKC,GAGnBmC,GAAO,IAFPA,GAAO9B,KAAKU,SAAShB,EAAKC,GAAKqC,YAM3C,OAAOF,GAMXG,SAAW,IACAjC,KAAK5C,MAKhBsD,SAAW,CAAChB,EAAKC,IACNK,KAAK5C,MAAMsC,GAAKC,GAM3BoC,QAAU,CAACrC,EAAKC,KACRK,KAAKkC,UAAUxC,EAAKC,IAGQ,OAAzBK,KAAK5C,MAAMsC,GAAKC,GAE3BwC,aAAgBjG,IACL,EAEXgG,UAAY,CAACxC,EAAKC,IACPD,EAAM,GAAKC,EAAM,GAAKD,EAAM,GAAKC,EAAM,EAGlDyC,OAAS,CAAC1C,EAAKC,EAAKzD,KACR8D,KAAKkC,UAAUxC,EAAKC,KAASK,KAAK+B,QAAQrC,EAAKC,IAAQK,KAAKU,SAAShB,EAAKC,GAAKzD,SAAWA,EAItGmG,QAAU,CAAC3C,EAAKC,KACJK,KAAKkC,UAAUxC,EAAKC,IAAQK,KAAK+B,QAAQrC,EAAKC,GAG1D2C,YAAc,CAAC5C,EAAKC,EAAKzD,KACrB,MAAMqG,EAAa,CAAC,CAAC,EAAE,GAAI,EAAE,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,GAAG,GAAG,EAAE,EAAE,IAC3E,IAAK,MAAMC,KAAaD,EAAY,CAChC,MAAMb,EAAShC,EAAM8C,EAAU,GACzBC,EAAS9C,EAAM6C,EAAU,GAC/B,IAAKxC,KAAKkC,UAAUR,EAAQe,KAAYzC,KAAK+B,QAAQL,EAAQe,IACrDzC,KAAKU,SAASgB,EAAQe,GAAQC,OAASpD,EAAMqD,MAAQ3C,KAAKU,SAASgB,EAAQe,GAAQvG,SAAWA,EAClG,OAAO,CAEf,CACA,OAAO,GAGXgC,UAAY,CAACC,EAAOF,KAChBA,EAAKE,MAAMD,UAAUD,EAAM+B,MAC3BA,KAAK1D,MAAM2E,KAAKhD,EAAI,EAGxBI,SAAW,KACP,GAAI2B,KAAK1D,MAAM0B,OAAS,EAAG,CACvB,MAAMC,EAAO+B,KAAK1D,MAAMsG,MAClBC,EAAU5E,EAAK6E,QAAQpD,IACvBqD,EAAU9E,EAAK6E,QAAQnD,IACvBxB,EAAQ6B,KAAK5C,MAAMa,EAAKwB,QAAQC,KAAKzB,EAAKwB,QAAQE,KAQxD,OAPc,OAAVxB,GACAvB,QAAQC,IAAImD,KAAKgD,iBAAkB/E,GAGvC+B,KAAK5C,MAAMyF,GAASE,GAAW5E,EAC/BA,EAAM8E,KAAKvD,IAAMmD,EACjB1E,EAAM8E,KAAKtD,IAAMoD,EACb9E,EAAKiF,aACLlD,KAAK5C,MAAMa,EAAKe,IAAIiE,KAAKvD,KAAKzB,EAAKe,IAAIiE,KAAKtD,KAAO1B,EAAKe,IACxDgB,KAAK5C,MAAMa,EAAKwB,QAAQC,KAAKzB,EAAKwB,QAAQE,KAAO,MAC1C,IACA1B,EAAKkF,YACZnD,KAAK5C,MAAMyF,GAASE,GAAW,IAAItC,EAAKtC,EAAMjC,OAAQiC,EAAM8E,KAAM9E,EAAM7B,OACjE2B,EAAKmF,OAAOC,WACnBrD,KAAK5C,MAAMa,EAAKmF,OAAOE,KAAKR,QAAQpD,KAAKzB,EAAKmF,OAAOE,KAAKR,QAAQnD,KAAO1B,EAAKmF,OAAOE,KAAKnF,MAC1FF,EAAKmF,OAAOE,KAAKnF,MAAM8E,KAAKvD,IAAMzB,EAAKmF,OAAOE,KAAKR,QAAQpD,IAC3DzB,EAAKmF,OAAOE,KAAKnF,MAAM8E,KAAKtD,IAAM1B,EAAKmF,OAAOE,KAAKR,QAAQnD,IAC3DK,KAAK5C,MAAMa,EAAKmF,OAAOE,KAAK7D,QAAQC,KAAKzB,EAAKmF,OAAOE,KAAK7D,QAAQE,KAAO,MAE7EK,KAAK5C,MAAMa,EAAKwB,QAAQC,KAAKzB,EAAKwB,QAAQE,KAAO1B,EAAKe,KAC/C,EACX,CACA,OAAO,GAGXuE,aAAgBrH,IACZ,IAAK,IAAI6B,EAAI,EAAGA,EAAIiC,KAAK1D,MAAM0B,OAAQD,IAAK,CACxC,MAAME,EAAO+B,KAAK1D,MAAMyB,GACxB,GAAIE,EAAKE,MAAMuE,OAASpD,EAAMqD,MAAQ1E,EAAKE,MAAMjC,SAAWA,EACxD,OAAO,CAEf,CACA,OAAO,GAGXsH,aAAe,CAACtH,EAAQuH,KACpB,MAAM/D,EAAMxD,IAAWoD,EAAMa,MAAQ,EAAI,EACnCR,EAAM8D,IAASjD,EAAKkD,UAAY,EAAI,EAC1C,GAAkC,OAA5B1D,KAAKU,SAAShB,EAAKC,IAAiBK,KAAKU,SAAShB,EAAKC,GAAK+C,OAASpD,EAAMqE,KAC7E,OAAO,EAEX,IAAK,MAAM1F,KAAQ+B,KAAK1D,MACpB,GAAI2B,EAAKE,MAAMuE,OAASpD,EAAMqE,MAAQ1F,EAAKE,MAAMjC,SAAWA,GAAU+B,EAAK6E,QAAQpD,MAAQA,GAAOzB,EAAK6E,QAAQnD,MAAQA,EACnH,OAAO,EAGf,OAAO,GAGXiE,uBAAyB,CAAC1H,EAAQuH,KAC9B,MAAM/D,EAAMxD,IAAWoD,EAAMa,MAAQ,EAAI,EACnC0D,EAAOJ,IAASjD,EAAKkD,UAAY,CAAC,EAAE,GAAK,CAAC,EAAE,EAAE,GACpD,IAAK,MAAM/D,KAAOkE,EACd,IAAK7D,KAAK+B,QAAQrC,EAAKC,GACnB,OAAO,EAGf,OAAO,GAIXvB,UAAY,CAAClC,EAAQ+B,KAEjB,IAAI6F,EACJ,IAAK,IAAIpE,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAKK,KAAK+B,QAAQrC,EAAKC,GAAM,CACzB,MAAMxB,EAAQ6B,KAAKU,SAAShB,EAAKC,GAC7BxB,EAAMuE,OAASpD,EAAMqD,MACjBxE,EAAMjC,SAAWA,IACjB4H,EAAO3F,EAGnB,CAGR,GAAIF,EAAKoF,SAAU,CACf,MAAM/G,EAAQ0D,KAAKvC,aAAsB,EAAVvB,GACzBwD,EAAMzB,EAAKwB,QAAQC,IACzB,GAAyB,IAArBzB,EAAKwB,QAAQE,IACb,IAAK,MAAMoE,KAAOzH,EAAO,CACrB,MAAM0H,EAAUD,EAAItE,QAAQC,IACtBuE,EAAUF,EAAItE,QAAQE,IAC5B,GAAIqE,IAAYtE,IAAoB,IAAZuE,GAA6B,IAAZA,GAA6B,IAAZA,GACtD,OAAO,CAEf,MAEA,IAAK,MAAMF,KAAOzH,EAAO,CACrB,MAAM0H,EAAUD,EAAItE,QAAQC,IACtBuE,EAAUF,EAAItE,QAAQE,IAC5B,GAAIqE,IAAYtE,IAAoB,IAAZuE,GAA6B,IAAZA,GAA6B,IAAZA,GACtD,OAAO,CAEf,CAER,CAEA,IAAK,IAAIvE,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAKK,KAAK+B,QAAQrC,EAAKC,IAAQK,KAAKU,SAAShB,EAAKC,GAAKzD,SAAWA,EAAQ,CAEtE,GADc8D,KAAKU,SAAShB,EAAKC,GACvBhB,QAAQqB,KAAM8D,GACpB,OAAO,CAEf,CAGR,OAAO,GAGXnF,QAAWzC,IACP,IAAI4H,EACJ,IAAK,IAAIpE,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAKK,KAAK+B,QAAQrC,EAAKC,GAAM,CACzB,MAAMxB,EAAQ6B,KAAKU,SAAShB,EAAKC,GAC7BxB,EAAMuE,OAASpD,EAAMqD,MACjBxE,EAAMjC,SAAWA,IACjB4H,EAAO3F,EAGnB,CAGR,IAAK,IAAIuB,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAKK,KAAK+B,QAAQrC,EAAKC,IAAQK,KAAKU,SAAShB,EAAKC,GAAKzD,SAAWA,EAAQ,CAEtE,GADc8D,KAAKU,SAAShB,EAAKC,GACvBhB,QAAQqB,KAAM8D,GACpB,OAAO,CAEf,CAGR,OAAO,GASXrG,YAAevB,IACX,IAAIgI,EAAU,GACd,IAAK,IAAIxE,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAKK,KAAK+B,QAAQrC,EAAKC,IAAQK,KAAKU,SAAShB,EAAKC,GAAKzD,SAAWA,EAAQ,CACtE,MACMI,EADQ0D,KAAKU,SAAShB,EAAKC,GACbwE,SAASnE,MAC7BkE,EAAUA,EAAQE,OAAO9H,EAC7B,CAGR,OAAO4H,GAKXG,iBAAmB,KACf,IAAIvE,EAAQ,EACRwE,EAAgB,EACpB,IAAK,IAAI5E,EAAM,EAAGA,EAAM,EAAGA,IACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMxB,EAAQ6B,KAAKU,SAAShB,EAAKC,GACnB,OAAVxB,IAEIA,EAAMjC,SAAWoD,EAAMC,MACvB+E,GAAiBnG,EAAMkB,OAEvBiF,GAAiBnG,EAAMkB,OAIvBlB,EAAMjC,SAAWoD,EAAMC,MACvBO,GAAS3B,EAAMqB,WAAWE,GAAKC,GAE/BG,GAAS3B,EAAMyB,WAAWF,GAAKC,GAG3C,CAGJ,OAAOG,EAAQwE,GASnBpF,SAAW,CAAChD,EAAQ4C,KACQkB,KAAKqE,mBACgB,EAAnBvF,EAAUd,QAAc9B,GAAU,EAGhE8G,eAAiB,KACb,MAAM/C,EAAW,GACjB,IAAK,IAAIP,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMgC,EAAS,GACf,IAAK,IAAI/B,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMxB,EAAQ6B,KAAKU,SAAShB,EAAKC,GACnB,OAAVxB,EACAuD,EAAOT,KAAK9C,EAAM6D,aAElBN,EAAOT,KAAK,KAEpB,CACAhB,EAASgB,KAAKS,EAClB,CACA,OAAOzB,GAOf,MAAMG,EACFL,YAAYL,EAAKC,GACbK,KAAKN,IAAMA,EACXM,KAAKL,IAAMA,CACf,EAEJ,MAAMlD,EACFqG,QACArD,QAEAM,YAAY+C,EAASrD,EAAStB,EAAO+E,GAAc,EACvCE,EAAS,CAACC,UAAU,GAAQrE,EAAM,KAAMmE,GAAc,GAC9DnD,KAAK8C,QAAUA,EACf9C,KAAKP,QAAUA,EACfO,KAAK7B,MAAQA,EACb6B,KAAKkD,YAAcA,EACnBlD,KAAKoD,OAASA,EACdpD,KAAKhB,IAAMA,EACXgB,KAAKmD,YAAcA,CACvB,CAEAoB,cAAgB,KACL,CACHC,WAAYxE,KAAK8C,QAAQpD,IACzB+E,WAAYzE,KAAK8C,QAAQnD,IACzB+E,WAAY1E,KAAKP,QAAQC,IACzBiF,WAAY3E,KAAKP,QAAQE,IACzBgC,YAAa3B,KAAK7B,MAAM6D,YACxBkB,YAAalD,KAAKkD,YAClBE,QAAiC,IAAzBpD,KAAKoD,OAAOC,SAAqB,CAACA,UAAU,GAAS,CAACA,UAAU,EACpEC,KAAK,CACL3B,YAAc3B,KAAKoD,OAAOE,KAAKnF,MAAM6D,YACrCwC,WAAYxE,KAAKoD,OAAOE,KAAKR,QAAQpD,IACrC+E,WAAYzE,KAAKoD,OAAOE,KAAKR,QAAQnD,IACrC+E,WAAY1E,KAAKoD,OAAOE,KAAK7D,QAAQC,IACrCiF,WAAY3E,KAAKoD,OAAOE,KAAK7D,QAAQE,MAEzCX,IAAkB,OAAbgB,KAAKhB,IAAegB,KAAKhB,IAAIgD,YAAc,KAChDmB,YAAanD,KAAKmD,cAG1ByB,iBAAmB,CAACxH,EAAOyH,KACvB,MAAMnI,EAAY,IAAID,EAClB,IAAI2D,EAAKyE,EAAKL,WAAYK,EAAKJ,YAC/B,IAAIrE,EAAKyE,EAAKH,WAAYG,EAAKF,YAC/BrF,EAAMwF,iBAAiBD,EAAKlD,aAC5BkD,EAAK3B,YACL,CAACG,UAAU,GACX,KACAwB,EAAK1B,aAGT,GAAI0B,EAAKzB,OAAOC,SAAU,CACtB,MAAM0B,EAAUF,EAAKzB,OAAOE,KAC5B5G,EAAU0G,OAAOC,UAAW,EAC5B3G,EAAU0G,OAAOE,KAAO,IAAI7G,EAAK,IAAI2D,EAAK2E,EAAQP,WAAYO,EAAQN,YAChE,IAAIrE,EAAK2E,EAAQL,WAAYK,EAAQJ,YAAavH,EAAMsD,SAASqE,EAAQP,WAAYO,EAAQN,YACvG,CACA,OAAO/H,GAIf,MAAM4C,EACFsF,cAAgB,EAChBA,aAAe,EACfA,YAAc,IACdA,cAAgB,IAChBA,cAAgB,IAChBA,YAAc,IACdA,aAAe,IACfA,YAAc,IACd7E,YAAY7D,EAAQ+G,GAChBjD,KAAK9D,OAASA,EACd8D,KAAKiD,KAAOA,CAChB,CACA2B,wBAA2BjD,IACvB,MACMC,EAA+B,MADjBD,EAAY5C,MAAM,EAAG,GACEO,EAAMC,MAAQD,EAAMa,MACzDhC,EAAQwD,EAAY5C,MAAM,EAAG,GACnC,MAAc,MAAVZ,EACO,IAAImC,EAAOsB,EAAc,IAAIxB,EAAK,EAAG,IAC3B,MAAVjC,EACA,IAAIqC,EAAKoB,EAAc,IAAIxB,EAAK,EAAG,IACzB,MAAVjC,EACA,IAAIkC,EAAOuB,EAAc,IAAIxB,EAAK,EAAG,IAC3B,MAAVjC,EACA,IAAIsC,EAAKmB,EAAc,IAAIxB,EAAK,EAAG,IACzB,MAAVjC,EACA,IAAIoC,EAAMqB,EAAc,IAAIxB,EAAK,EAAG,IAC1B,MAAVjC,EACA,IAAI+B,EAAK0B,EAAc,IAAIxB,EAAK,EAAG,IAEnC,IACX,EAIR,MAAME,UAAehB,EACjBiD,WAAa,CAAC,CAAC,EAAE,GAAI,EAAE,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,EAAE,IACzClD,OAAS,IACTqD,KAAOpD,EAAM0F,OACbxF,WAAa,CACT,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAG,GAAI,GAAK,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAG,GAAI,GAAK,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAElCI,WAAa,CACT,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAG,GAAI,GAAK,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAG,GAAI,GAAK,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAElCG,YAAY7D,EAAQ+G,GAChBgC,MAAM/I,EAAQ+G,EAClB,CAMAkB,SAAY/G,IACR,MAAMd,EAAQ,GACR4I,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IAC7B,IAAK,MAAM6C,KAAaxC,KAAKuC,WAAY,CACrC,MAAM7C,EAAM8C,EAAU,GAChB7C,EAAM6C,EAAU,GACtB,IAAId,EAAShC,EAAMwF,EACfzC,EAAS9C,EAAMwF,EACnB,KAAO/H,EAAMiF,QAAQX,EAAQe,IAAWrF,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,SAAS,CAC/E,MAAM+B,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAElF,GADA1D,EAAM2E,KAAKhD,GACPb,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,QAClC,MAEJwF,GAAShC,EACT+C,GAAS9C,CACb,CACJ,CACA,OAAOrD,GAGXqC,QAAU,CAACvB,EAAO0G,KACd,MAAMpE,EAAMM,KAAKiD,KAAKvD,IAChBC,EAAMK,KAAKiD,KAAKtD,IAChByF,EAAUtB,EAAKb,KAAKvD,IACpB2F,EAAUvB,EAAKb,KAAKtD,IAG1B,GAFgBlB,KAAK6G,IAAI5F,EAAM0F,KACf3G,KAAK6G,IAAI3F,EAAM0F,GAE3B,OAAO,EAEX,MAAMH,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IAC7B,IAAK,MAAM6C,KAAaxC,KAAKuC,WAAY,CACrC,MAAM7C,EAAM8C,EAAU,GAChB7C,EAAM6C,EAAU,GACtB,IAAId,EAAShC,EAAMwF,EACfzC,EAAS9C,EAAMwF,EACnB,KAAO/H,EAAMiF,QAAQX,EAAQe,IAAWrF,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,SAAS,CAC/E,GAAIkB,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,QAAS,CAC3C,GAAIkB,EAAMsD,SAASgB,EAAQe,GAAQC,OAASpD,EAAMqD,KAC9C,OAAO,EAEX,KACJ,CACAjB,GAAShC,EACT+C,GAAS9C,CACb,CACJ,CACA,OAAO,GAOXzB,UAAY,CAACD,EAAMsH,KACf,MAAMnI,EAAQmI,EAAYtD,WACpBP,EAASzD,EAAKwB,QAAQC,IACtB+C,EAASxE,EAAKwB,QAAQE,IACtB6F,EAAWpI,EAAMsE,GAAQe,GACd,OAAb+C,IACAvH,EAAKe,IAAMwG,GAEfpI,EAAMsE,GAAQe,GAAUzC,KACxB5C,EAAMa,EAAK6E,QAAQpD,KAAKzB,EAAK6E,QAAQnD,KAAO,KAC5CK,KAAKiD,KAAO,IAAI7C,EAAKsB,EAAQe,EAAM,EAGvCT,UAAY,KACahC,KAAK9D,SAAWoD,EAAMC,MAAQ,IAAM,KACnC,IAG9B,MAAMiB,UAAalB,EACfiD,WAAa,CAAC,CAAC,EAAE,GAAI,EAAE,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAG,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,GAAG,GAAG,EAAE,EAAE,IACrEqC,kBAAoB,EACpBA,kBAAoB,EACpBlC,KAAOpD,EAAMqD,KACbtD,OAAS,IAETG,WAAa,CACT,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,CAAC,GAAI,GAAK,EAAI,EAAI,EAAI,EAAG,GAAI,IAC7B,CAAC,GAAI,GAAI,GAAK,EAAI,EAAG,GAAI,GAAI,KAGjCI,WAAa,CACT,CAAC,GAAI,GAAI,GAAK,EAAI,EAAG,GAAI,GAAI,IAC7B,CAAC,GAAI,GAAK,EAAI,EAAI,EAAI,EAAG,GAAI,IAC7B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAElCe,cAAgB,CACZ,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,GAAK,EAAI,GAAG,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAK,EAAI,EAAI,EAAI,GAAG,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAElCC,cAAgB,CACZ,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAK,EAAI,EAAI,EAAI,GAAG,IAAI,IAC9B,EAAE,IAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAI,GAAI,GAAI,GAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,GAAK,EAAI,GAAG,IAAI,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAElCb,YAAY7D,EAAQ+G,GAChBgC,MAAM/I,EAAQ+G,EAClB,CAMAkB,SAAY/G,IACR,MAAMd,EAAQ,GACR4I,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IAC7B,IAAK,MAAM6C,KAAaxC,KAAKuC,WAAY,CACrC,MAEMb,EAFMc,EAAU,GAED0C,EACfzC,EAFMD,EAAU,GAED2C,EACrB,IAAM/H,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,SAAWkB,EAAMiF,QAAQX,EAAQe,KAAarF,EAAMkF,YAAYZ,EAAQe,EAAQzC,KAAK9D,QAAS,CAClI,MAAM+B,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAClF1D,EAAM2E,KAAKhD,EACf,CACJ,CAEA,GAAIb,EAAMwG,uBAAuB5D,KAAK9D,OAAQsE,EAAKkD,aAAetG,EAAMoG,aAAaxD,KAAK9D,OAAQsE,EAAKkD,aAAetG,EAAMmG,aAAavD,KAAK9D,QAAS,CACnJ,MAAMwD,EAAMM,KAAK9D,SAAWoD,EAAMa,MAAQ,EAAI,EACxCR,EAAM,EACZrD,EAAM2E,KAAK,IAAIxE,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKV,EAAKC,GAAMK,MAAM,EAC5E,CAACqD,UAAU,EAAMC,KAAM,IAAI7G,EAAK,IAAI2D,EAAKV,EAAK,GAAI,IAAIU,EAAKV,EAAK,GAAItC,EAAMsD,SAAShB,EAAK,MAChG,CACA,GAAItC,EAAMwG,uBAAuB5D,KAAK9D,OAAQsE,EAAKiF,cAAgBrI,EAAMoG,aAAaxD,KAAK9D,OAAQsE,EAAKiF,cAAgBrI,EAAMmG,aAAavD,KAAK9D,QAAS,CACrJ,MAAMwD,EAAMM,KAAK9D,SAAWoD,EAAMa,MAAQ,EAAI,EACxCR,EAAM,EACZrD,EAAM2E,KAAK,IAAIxE,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKV,EAAKC,GAAMK,MAAM,EAC5E,CAACqD,UAAU,EAAMC,KAAM,IAAI7G,EAAK,IAAI2D,EAAKV,EAAK,GAAI,IAAIU,EAAKV,EAAK,GAAItC,EAAMsD,SAAShB,EAAK,MAChG,CAGA,OAAOpD,GAGXqC,QAAU,CAACvB,EAAO0G,KACP,EAKX5F,UAAY,CAACD,EAAMsH,KACf,MAAMnI,EAAQmI,EAAYtD,WACpBP,EAASzD,EAAKwB,QAAQC,IACtB+C,EAASxE,EAAKwB,QAAQE,IACxB1B,EAAKmF,OAAOC,WACZjG,EAAMa,EAAKmF,OAAOE,KAAK7D,QAAQC,KAAKzB,EAAKmF,OAAOE,KAAK7D,QAAQE,KAAO1B,EAAKmF,OAAOE,KAAKnF,MACrFf,EAAMa,EAAKmF,OAAOE,KAAKR,QAAQpD,KAAKzB,EAAKmF,OAAOE,KAAKR,QAAQnD,KAAO,KACpE1B,EAAKmF,OAAOE,KAAKnF,MAAM8E,KAAKvD,IAAMzB,EAAKmF,OAAOE,KAAK7D,QAAQC,IAC3DzB,EAAKmF,OAAOE,KAAKnF,MAAM8E,KAAKtD,IAAM1B,EAAKmF,OAAOE,KAAK7D,QAAQE,KAE/D,MAAM6F,EAAWpI,EAAMsE,GAAQe,GACd,OAAb+C,IACAvH,EAAKe,IAAMwG,GAEfpI,EAAMsE,GAAQe,GAAUzC,KACxB5C,EAAMa,EAAK6E,QAAQpD,KAAKzB,EAAK6E,QAAQnD,KAAO,KAC5CK,KAAKiD,KAAO,IAAI7C,EAAKsB,EAAQe,EAAM,EAGvCT,UAAY,KACahC,KAAK9D,SAAWoD,EAAMC,MAAQ,IAAM,KACnC,IAG9B,MAAMc,UAAef,EACjBiD,WAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,EAAE,EAAG,GAAI,EAAE,GAAI,GAAI,EAAE,EAAG,GAAI,EAAE,GAAI,IAElFlD,OAAS,IACTqD,KAAOpD,EAAMoG,OAEblG,WAAa,CACT,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAK,EAAI,EAAI,EAAI,GAAG,IAAI,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,IAAI,GAAK,EAAI,EAAI,EAAI,GAAG,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAGlCI,WAAa,CACT,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,EAAE,IAAI,GAAK,EAAI,EAAI,EAAI,GAAG,IAAI,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,GAAK,EAAG,GAAI,GAAI,GAAI,GAAK,GAAG,IAC9B,EAAE,IAAI,GAAK,EAAI,EAAI,EAAI,GAAG,IAAI,IAC9B,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAElCG,YAAY7D,EAAQ+G,GAChBgC,MAAM/I,EAAQ+G,EAElB,CAMAkB,SAAY/G,IACR,MAAMd,EAAQ,GACd,IAAK,MAAMkG,KAAaxC,KAAKuC,WAAY,CACrC,MAAM7C,EAAM8C,EAAU,GAChB7C,EAAM6C,EAAU,GAChB0C,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IACvB+B,EAAShC,EAAMwF,EACfzC,EAAS9C,EAAMwF,EACrB,GAAI/H,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,SAAWkB,EAAMiF,QAAQX,EAAQe,GAAS,CAC5E,MAAMxE,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAClF1D,EAAM2E,KAAKhD,EACf,CACJ,CACA,OAAO3B,GAGXqC,QAAU,CAACvB,EAAO0G,KACd,MAAMpE,EAAMM,KAAKiD,KAAKvD,IAChBC,EAAMK,KAAKiD,KAAKtD,IAChByF,EAAUtB,EAAKb,KAAKvD,IACpB2F,EAAUvB,EAAKb,KAAKtD,IACpBgG,EAAUlH,KAAK6G,IAAI5F,EAAM0F,GACzBQ,EAAUnH,KAAK6G,IAAI3F,EAAM0F,GAC/B,OAAIM,EAAUC,IAAY,KAGL,IAAZD,GAA6B,IAAZC,EAAc,EAM5C1H,UAAY,CAACD,EAAMsH,KACf,MAAMnI,EAAQmI,EAAYtD,WACpBP,EAASzD,EAAKwB,QAAQC,IACtB+C,EAASxE,EAAKwB,QAAQE,IACtB6F,EAAWpI,EAAMsE,GAAQe,GACd,OAAb+C,IACAvH,EAAKe,IAAMwG,GAEfpI,EAAMsE,GAAQe,GAAUzC,KACxB5C,EAAMa,EAAK6E,QAAQpD,KAAKzB,EAAK6E,QAAQnD,KAAO,KAC5CK,KAAKiD,KAAO,IAAI7C,EAAKsB,EAAQe,EAAM,EAGvCT,UAAY,KACahC,KAAK9D,SAAWoD,EAAMC,MAAQ,IAAM,KACnC,IAG9B,MAAMkB,UAAanB,EACfD,OAAS,IACTqD,KAAOpD,EAAMuG,KAEbrG,WAAa,CACT,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAC7B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7B,CAAC,EAAI,EAAG,GAAI,GAAI,GAAI,GAAK,EAAI,GAC7B,CAAC,EAAI,EAAI,EAAG,GAAI,GAAK,EAAI,EAAI,GAC7B,CAAC,GAAI,GAAG,GAAK,EAAI,GAAG,IAAK,EAAI,GAC7B,CAAC,EAAG,GAAI,IAAI,IAAI,GAAI,GAAI,GAAK,GAC7B,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,IAEjCmB,cAAgB,CACZ,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAC3C,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7B,CAAC,EAAI,EAAG,GAAI,GAAI,GAAI,GAAK,EAAI,GAC7B,CAAC,EAAI,EAAI,EAAG,GAAI,GAAK,EAAI,EAAI,GAC7B,CAAC,GAAI,GAAG,GAAK,EAAI,GAAG,IAAK,EAAI,GAC7B,CAAC,EAAG,GAAI,IAAI,IAAI,GAAI,GAAI,GAAK,GAC7B,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,IAEjCf,WAAa,CACT,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAC7B,CAAC,EAAG,GAAI,IAAI,IAAI,GAAI,GAAI,GAAK,GAC7B,CAAC,EAAG,GAAG,GAAK,EAAI,GAAG,IAAK,EAAI,GAC5B,CAAC,EAAI,EAAI,EAAG,GAAI,GAAK,EAAI,EAAI,GAC7B,CAAC,EAAI,EAAG,GAAI,GAAI,GAAI,GAAK,EAAI,GAC7B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7B,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,IAEjCgB,cAAgB,CACZ,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAC7B,CAAC,EAAG,GAAI,IAAI,IAAI,GAAI,GAAI,GAAK,GAC7B,CAAC,EAAG,GAAG,GAAK,EAAI,GAAG,IAAK,EAAI,GAC5B,CAAC,EAAI,EAAI,EAAG,GAAI,GAAK,EAAI,EAAI,GAC7B,CAAC,EAAI,EAAG,GAAI,GAAI,GAAI,GAAK,EAAI,GAC7B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7B,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,MAE/Cb,YAAY7D,EAAQ+G,GAChBgC,MAAM/I,EAAQ+G,EAElB,CAMAkB,SAAY/G,IACR,MAAM8H,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IACvBrD,EAAQ,GACd,IAAIoF,EAAS1B,KAAKiD,KAAKvD,IAAM,EAAIM,KAAK9D,OAClCuG,EAASzC,KAAKiD,KAAKtD,IACvB,GAAIvC,EAAMiF,QAAQX,EAAQe,GAAS,CAC/B,MAAMxE,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GACrEzC,UAAM1B,OAAWA,OAAWA,EACjB,IAAXoD,GAA2B,IAAXA,GAIpB,GAHIpF,EAAM2E,KAAKhD,GAEfyD,EAAS1B,KAAKiD,KAAKvD,IAAM,EAAIM,KAAK9D,OAC9BkB,EAAMiF,QAAQX,EAAQe,KAAuB,IAAXf,GAA2B,IAAXA,GAClD,GAAI1B,KAAK9D,SAAWoD,EAAMa,OAA2B,IAAlBH,KAAKiD,KAAKvD,IAAW,CACpD,MAAMzB,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAE9E1D,EAAM2E,KAAKhD,EAEnB,MAAO,GAAI+B,KAAK9D,SAAWoD,EAAMC,OAA2B,IAAlBS,KAAKiD,KAAKvD,IAAW,CAC3D,MAAMzB,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAC9E1D,EAAM2E,KAAKhD,EACnB,CAGR,CAGA,GAFAyD,EAAS1B,KAAKiD,KAAKvD,IAAM,EAAIM,KAAK9D,OAClCuG,EAASzC,KAAKiD,KAAKtD,IAAM,EACrBvC,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,QAAS,CAC3C,MAAM+B,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,UAAO1B,OAAWA,EAAWlB,EAAMsD,SAASgB,EAAQe,GACvH,IAAXf,GAA2B,IAAXA,GAChBpF,EAAM2E,KAAKhD,EACnB,CAEA,GAAIb,EAAMiF,QAAQX,EAAQe,IAAWrF,EAAMd,MAAM0B,OAAS,EAAG,CACzD,MAAM8H,EAAW1I,EAAMd,MAAMyC,OAAO,GAAG,GACvC,GAAI+G,EAAS3H,MAAMuE,OAASpD,EAAMuG,MAAQC,EAASrG,QAAQC,MAAQM,KAAKiD,KAAKvD,KAAOoG,EAASrG,QAAQE,MAAQK,KAAKiD,KAAKtD,IAAM,GAC5D,IAA1DlB,KAAK6G,IAAIQ,EAASrG,QAAQC,IAAMoG,EAAShD,QAAQpD,KAAY,CAChE,MAAMzB,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAAM,GACpF1D,EAAM2E,KAAKhD,EACnB,CAEJ,CAGA,GAFAyD,EAAS1B,KAAKiD,KAAKvD,IAAM,EAAIM,KAAK9D,OAClCuG,EAASzC,KAAKiD,KAAKtD,IAAM,EACrBvC,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,QAAS,CAC3C,MAAM+B,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,UAAO1B,OAAWA,EAAWlB,EAAMsD,SAASgB,EAAQe,GACvH,IAAXf,GAA2B,IAAXA,GAChBpF,EAAM2E,KAAKhD,EACnB,CAEA,GAAIb,EAAMiF,QAAQX,EAAQe,IAAWrF,EAAMd,MAAM0B,OAAS,EAAG,CACzD,MAAM8H,EAAW1I,EAAMd,MAAMyC,OAAO,GAAG,GACvC,GAAI+G,EAAS3H,MAAMuE,OAASpD,EAAMuG,MAAQC,EAASrG,QAAQC,MAAQM,KAAKiD,KAAKvD,KAAOoG,EAASrG,QAAQE,MAAQK,KAAKiD,KAAKtD,IAAM,GAC5D,IAA1DlB,KAAK6G,IAAIQ,EAASrG,QAAQC,IAAMoG,EAAShD,QAAQpD,KAAY,CAChE,MAAMzB,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAAM,GACxF1D,EAAM2E,KAAKhD,EACf,CAEJ,CACA,OAAO3B,GAEXqC,QAAU,CAACvB,EAAO0G,KACd,MAAMsB,EAAUtB,EAAKb,KAAKvD,IACpB2F,EAAUvB,EAAKb,KAAKtD,IACpB+B,EAAS1B,KAAKiD,KAAKvD,IAAM,EAAIM,KAAK9D,OAClCuG,EAASzC,KAAKiD,KAAKtD,IAAM,EACzBoG,EAAY/F,KAAKiD,KAAKtD,IAAM,EAClC,OAAO+B,IAAW0D,IAAY3C,IAAW4C,GAAWU,IAAcV,EAAO,EAM7EnH,UAAY,CAACD,EAAMsH,KACf,MAAMnI,EAAQmI,EAAYtD,WACpBP,EAASzD,EAAKwB,QAAQC,IACtB+C,EAASxE,EAAKwB,QAAQE,IAG5B,GAAI1B,EAAKiF,YAAa,CAClB,MAAM4C,EAAWP,EAAYjJ,MAAMyC,OAAO,GAAG,GACvCyG,EAAWpI,EAAM0I,EAASrG,QAAQC,KAAKoG,EAASrG,QAAQE,KAC7C,OAAb6F,IACAvH,EAAKe,IAAMwG,GAEfpI,EAAM0I,EAASrG,QAAQC,KAAKoG,EAASrG,QAAQE,KAAO,IACxD,CACA,MAAM6F,EAAWpI,EAAMsE,GAAQe,GACd,OAAb+C,IACAvH,EAAKe,IAAMwG,GAEfpI,EAAMsE,GAAQe,GAAUzC,KACxB5C,EAAMa,EAAK6E,QAAQpD,KAAKzB,EAAK6E,QAAQnD,KAAO,KAC5CK,KAAKiD,KAAO,IAAI7C,EAAKsB,EAAQe,GACzBxE,EAAKkF,cACL/F,EAAMsE,GAAQe,GAAU,IAAIlC,EAAMP,KAAK9D,OAAQ8D,KAAKiD,MACxD,EAGJjB,UAAY,KACahC,KAAK9D,SAAWoD,EAAMC,MAAQ,IAAM,KACnC,IAG9B,MAAMgB,UAAcjB,EAChBiD,WAAa,CAAC,CAAC,EAAE,GAAI,EAAE,GAAG,GAAI,CAAC,GAAG,GAAG,EAAE,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,GAAG,GAAG,EAAE,EAAE,IACtElD,OAAS,IACTqD,KAAOpD,EAAM0G,MAEbxG,WAAa,CACT,EAAE,IAAI,IAAI,IAAK,GAAI,GAAG,IAAI,IAAI,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC7B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,IAAI,IAAI,IAAK,GAAI,GAAG,IAAI,IAAI,KAElCI,WAAa,CACT,EAAE,IAAI,IAAI,IAAK,GAAI,GAAG,IAAI,IAAI,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC7B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAAG,IAC9B,EAAE,IAAI,IAAI,IAAK,GAAI,GAAG,IAAI,IAAI,KAElCG,YAAY7D,EAAQ+G,GAChBgC,MAAM/I,EAAQ+G,EAElB,CAMAkB,SAAY/G,IACR,MAAMd,EAAQ,GACd,IAAK,MAAMkG,KAAaxC,KAAKuC,WAAY,CACrC,MAAM2C,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IACvBD,EAAM8C,EAAU,GAChB7C,EAAM6C,EAAU,GACtB,IAAId,EAAShC,EAAMwF,EACfzC,EAAS9C,EAAMwF,EACnB,KAAO/H,EAAMiF,QAAQX,EAAQe,IAAWrF,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,SAAS,CAC/E,MAAM+B,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAElF,GADI1D,EAAM2E,KAAKhD,GACXb,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,QAClC,MAEJwF,GAAShC,EACT+C,GAAS9C,CACb,CACJ,CACA,OAAOrD,GAEXqC,QAAU,CAACvB,EAAO0G,KACd,MAAMpE,EAAMM,KAAKiD,KAAKvD,IAChBC,EAAMK,KAAKiD,KAAKtD,IAChByF,EAAUtB,EAAKb,KAAKvD,IACpB2F,EAAUvB,EAAKb,KAAKtD,IAG1B,GAFgBlB,KAAK6G,IAAI5F,EAAM0F,KACf3G,KAAK6G,IAAI3F,EAAM0F,IACFA,IAAY1F,GAAOyF,IAAY1F,EACxD,OAAO,EAEX,MAAMwF,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IAC7B,IAAK,MAAM6C,KAAaxC,KAAKuC,WAAY,CACrC,MAAM7C,EAAM8C,EAAU,GAChB7C,EAAM6C,EAAU,GACtB,IAAId,EAAShC,EAAMwF,EACfzC,EAAS9C,EAAMwF,EACnB,KAAO/H,EAAMiF,QAAQX,EAAQe,IAAWrF,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,SAAS,CAC/E,GAAIkB,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,QAAS,CAC3C,GAAIkB,EAAMsD,SAASgB,EAAQe,GAAQC,OAASpD,EAAMqD,KAC9C,OAAO,EAEX,KACJ,CACAjB,GAAShC,EACT+C,GAAS9C,CACb,CACJ,CACA,OAAO,GAOXzB,UAAY,CAACD,EAAMsH,KACf,MAAMnI,EAAQmI,EAAYtD,WACpBP,EAASzD,EAAKwB,QAAQC,IACtB+C,EAASxE,EAAKwB,QAAQE,IACtB6F,EAAWpI,EAAMsE,GAAQe,GACd,OAAb+C,IACAvH,EAAKe,IAAMwG,GAEfpI,EAAMsE,GAAQe,GAAUzC,KACxB5C,EAAMa,EAAK6E,QAAQpD,KAAKzB,EAAK6E,QAAQnD,KAAO,KAC5CK,KAAKiD,KAAO,IAAI7C,EAAKsB,EAAQe,EAAM,EAGvCT,UAAY,KACahC,KAAK9D,SAAWoD,EAAMC,MAAQ,IAAM,KACnC,IAG9B,MAAMW,UAAaZ,EACfiD,WAAa,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,GAAG,GAAG,EAAE,EAAE,IACvClD,OAAS,IACTqD,KAAOpD,EAAMqE,KACbnE,WAAa,CACT,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAC7B,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAK,GAC7B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,IAEjCI,WAAa,CACT,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,GAAK,EAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,EAAE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC9B,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAK,GAC7B,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,IAEjCG,YAAY7D,EAAQ+G,GAChBgC,MAAM/I,EAAQ+G,EAElB,CAMAkB,SAAY/G,IACR,MAAMd,EAAQ,GACd,IAAK,MAAMkG,KAAaxC,KAAKuC,WAAY,CACrC,MAAM2C,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IACvBD,EAAM8C,EAAU,GAChB7C,EAAM6C,EAAU,GACtB,IAAId,EAAShC,EAAMwF,EACfzC,EAAS9C,EAAMwF,EACnB,KAAO/H,EAAMiF,QAAQX,EAAQe,IAAWrF,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,SAAS,CAC/E,MAAM+B,EAAO,IAAIxB,EAAK,IAAI2D,EAAK8E,EAAYC,GAAa,IAAI/E,EAAKsB,EAAQe,GAASzC,MAElF,GADI1D,EAAM2E,KAAKhD,GACXb,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,QAClC,MAEJwF,GAAShC,EACT+C,GAAS9C,CACb,CACJ,CACA,OAAOrD,GAEXqC,QAAU,CAACvB,EAAO0G,KACd,MAAMpE,EAAMM,KAAKiD,KAAKvD,IAChBC,EAAMK,KAAKiD,KAAKtD,IAChByF,EAAUtB,EAAKb,KAAKvD,IAE1B,GADgBoE,EAAKb,KAAKtD,MACVA,GAAOyF,IAAY1F,EAC/B,OAAO,EAEX,IAAK,MAAM8C,KAAaxC,KAAKuC,WAAY,CACrC,MAAM2C,EAAalF,KAAKiD,KAAKvD,IACvByF,EAAanF,KAAKiD,KAAKtD,IACvBD,EAAM8C,EAAU,GAChB7C,EAAM6C,EAAU,GACtB,IAAId,EAAShC,EAAMwF,EACfzC,EAAS9C,EAAMwF,EACnB,KAAO/H,EAAMiF,QAAQX,EAAQe,IAAWrF,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,SAAS,CAC/E,GAAIkB,EAAMgF,OAAOV,EAAQe,EAAQzC,KAAK9D,QAAS,CAC3C,GAAIkB,EAAMsD,SAASgB,EAAQe,GAAQC,OAASpD,EAAMqD,KAC9C,OAAO,EAEX,KACJ,CACAjB,GAAShC,EACT+C,GAAS9C,CACb,CACJ,CACA,OAAO,GAMXzB,UAAY,CAACD,EAAMsH,KACf,MAAMnI,EAAQmI,EAAYtD,WACpBP,EAASzD,EAAKwB,QAAQC,IACtB+C,EAASxE,EAAKwB,QAAQE,IACtB6F,EAAWpI,EAAMsE,GAAQe,GACd,OAAb+C,IACAvH,EAAKe,IAAMwG,GAGfpI,EAAMsE,GAAQe,GAAUzC,KACxB5C,EAAMa,EAAK6E,QAAQpD,KAAKzB,EAAK6E,QAAQnD,KAAO,KAC5CK,KAAKiD,KAAO,IAAI7C,EAAKsB,EAAQe,EAAM,EAGvCT,UAAY,KACahC,KAAK9D,SAAWoD,EAAMC,MAAQ,IAAM,KACnC,IAI1B,IACI,MAAMsF,EAAOhJ,EAAQgJ,KACf9I,EAAc8I,EAAK,GACnB7I,EAAQ6I,EAAK,GACb5I,EAAa4I,EAAK,GAClB3I,EAAS2I,EAAK,GAEpB,GADApJ,EAAaQ,EAAW+B,OACL,IAAfvC,GACA,GAAIS,IAAWoD,EAAMC,MAAO,CAExB,MAAMjD,EAAQ,CACV,IAAIG,EAAK,IAAI2D,EAAK,EAAG,GAAI,IAAIA,EAAK,EAAE,GAAI,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,KAC1E,IAAI3D,EAAK,IAAI2D,EAAK,EAAG,GAAI,IAAIA,EAAK,EAAE,GAAI,IAAIK,EAAKnB,EAAMC,MAAO,IAAIa,EAAK,EAAG,MAExE6F,EAAcxH,KAAKyH,MAAMzH,KAAK0H,UAAY7J,EAAM0B,OAAS,IAE/DoI,YAAY9J,EAAM2J,GAAa1B,gBACnC,OACG,GAAmB,IAAf9I,EAAkB,CAEzB,MAAM4K,EAAUpK,EAAWM,KAAIC,GAAKC,EAAKC,eAAU4B,EAAW9B,KAAI,GAClE,GAA4B,IAAxB6J,EAAQvD,QAAQpD,KAAqC,IAAxB2G,EAAQvD,QAAQnD,KAAqC,IAAxB0G,EAAQ5G,QAAQC,KAAqC,IAAxB2G,EAAQ5G,QAAQE,IAAW,CAClH,MAAMrD,EAAQ,CACV,IAAIG,EAAK,IAAI2D,EAAK,EAAG,GAAI,IAAIA,EAAK,EAAE,GAAI,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,KAC1E,IAAI3D,EAAK,IAAI2D,EAAK,EAAG,GAAI,IAAIA,EAAK,EAAE,GAAI,IAAIK,EAAKnB,EAAMa,MAAO,IAAIC,EAAK,EAAG,MAExE6F,EAAcxH,KAAKyH,MAAMzH,KAAK0H,UAAY7J,EAAM0B,OAAS,IAE/DoI,YAAY9J,EAAM2J,GAAa1B,gBACnC,KAAO,CACH,MAAM+B,EAAWxK,EAAGC,EAAaC,EAAOC,EAAYC,GACpDkK,YAAYE,EAAS/B,gBACzB,CACJ,KAAO,CACH,MAAM+B,EAAWxK,EAAGC,EAAaC,EAAOC,EAAYC,GACpDkK,YAAYE,EAAS/B,gBACzB,CACJ,CAAE,MAAOgC,GACLH,YAAY,CAACI,SAAS,EAAM3K,QAAQ,UAAY0K,GACpD,I","sources":["Chess/ai/worker.worker.js"],"sourcesContent":["let totalMoves = 0\r\nconst test = async (message) => {\r\n   // https://chess.stackexchange.com/questions/40362/my-transposition-tables-implementation-slows-down-alpha-beta-pruning\r\n    // https://github.com/maksimKorzh/chess_programming/blob/master/src/negamax/tutorials/alpha-beta_quiescence_search/chess.c\r\n    //https://stackoverflow.com/questions/29990116/alpha-beta-prunning-with-transposition-table-iterative-deepening\r\n    // https://stackoverflow.com/questions/16500739/chess-high-branching-factor\r\n    // TODO: check if endgame before running search, set score tables before search, done after set board string\r\n    // End game defined by: either side has a queen + pawns only / either side has at most 2 minor pieces\r\n    // TODO: update piece score tables based on position before running search, done after set board string\r\n    // for knight, -5 per missing pawn of any colour\r\n    // for bishop, fianchetto bonus points, control over square colour (using pawns), bishop pair bonus\r\n    // rook penalty for trap by king, bonus for open file, bonus for each missing pawn\r\n    // pawn, increase value +30 if past pawn (no pawns of opposing colour on the 3 cols), decrease value if doubled (-10)\r\n\r\n    const ab =  (boardString, depth, moveString, colour) => {\r\n        const copyBoard = new Board()\r\n        copyBoard.setBoardString(boardString)\r\n        // const start = performance.now()\r\n        copyBoard.moves = moveString.map(x => Move.parseMove(copyBoard, x))\r\n        const isEndGame = copyBoard.isEndGame()\r\n        if (isEndGame) {\r\n            console.log(\"endgame\")\r\n            copyBoard.setEndGame()\r\n        }\r\n        copyBoard.updatePieceValues(totalMoves)\r\n        const result = miniMax(copyBoard, depth, -Number.MAX_VALUE, Number.MAX_VALUE, colour, colour)\r\n        // const result = rootNegaMax(depth, copyBoard, Piece.BLACK, Piece.BLACK)\r\n        // const end = performance.now()\r\n        // console.log(end - start, totalMoves, nodes)\r\n        // console.log(\"eval\", nodes)\r\n        console.log(\"Score\", result[1])\r\n        return result[0] // should be a move\r\n    }\r\n\r\n    const miniMax = (board, depth, alpha, beta, maxPlayer, currentPlayer) => {\r\n        const moves = board.getAllMoves(currentPlayer) // TODO: time consuming\r\n        moves.sort(sortMoves)\r\n        let bestMove;\r\n        if (currentPlayer === maxPlayer) {\r\n            let maxEval = -90000\r\n            let illegal = 0\r\n            for (let i = 0; i < moves.length; i++) {\r\n                const move = moves[i]\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    board.undoMove()\r\n                    illegal++\r\n                    continue\r\n                }\r\n\r\n                if (bestMove === undefined) {\r\n                    bestMove = move\r\n                }\r\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1, moves)\r\n                board.undoMove()\r\n                if (currentEval > maxEval) {\r\n                    maxEval = currentEval\r\n                    bestMove = move\r\n                }\r\n                alpha = Math.max(alpha, currentEval)\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) { // TODO: check stalemate\r\n                if (board.isCheck(currentPlayer)) {\r\n                    return [null, -90000]\r\n                }\r\n                return [null, 0]\r\n            }\r\n            return [bestMove, maxEval]\r\n        } else {\r\n            let minEval = 90000\r\n            let illegal = 0\r\n            for (let i = 0; i < moves.length; i++) {\r\n                const move = moves[i]\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    board.undoMove()\r\n                    illegal++\r\n                    continue\r\n                }\r\n                if (bestMove === undefined) {\r\n                    bestMove = move\r\n                }\r\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1, moves)\r\n                board.undoMove()\r\n                if (currentEval < minEval) {\r\n                    minEval = currentEval\r\n                    bestMove = move\r\n                }\r\n                beta = Math.min(beta, currentEval)\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) {\r\n                if (board.isCheck(currentPlayer)) {\r\n                    return [null, 90000]\r\n                }\r\n                return [null, 0]\r\n\r\n            }\r\n            return [bestMove, minEval]\r\n        }\r\n    }\r\n    const miniMaxCore = (board, depth, alpha, beta, maxPlayer, currentPlayer, prevMoves) => {\r\n        if (depth === 0) {\r\n            let result\r\n            if (maxPlayer === currentPlayer && board.moves.slice(-1)[0].ate !== null) {\r\n                result = quiesce(alpha, beta, board, currentPlayer, 1, prevMoves)\r\n            } else {\r\n                result = board.getScore(maxPlayer, prevMoves)\r\n            }\r\n            return result\r\n        }\r\n        const moves = board.getAllMoves(currentPlayer) // TODO: time consuming\r\n        moves.sort(sortMoves)\r\n        if (currentPlayer === maxPlayer) {\r\n            let maxEval = -30000\r\n            let illegal = 0\r\n            for (let i = 0; i < moves.length; i++) {\r\n                const move = moves[i]\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    board.undoMove()\r\n                    illegal++\r\n                    continue\r\n                }\r\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1, moves)\r\n                board.undoMove()\r\n                if (currentEval > maxEval) {\r\n                    maxEval = currentEval\r\n                }\r\n                if (currentEval > alpha) {\r\n                    alpha = currentEval\r\n                }\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) {\r\n                if (board.isCheck(currentPlayer)) {\r\n                    return -30000 * depth // faster checkmates\r\n                }\r\n                return 0 // stalemate\r\n            }\r\n            return maxEval\r\n        } else {\r\n            let minEval = 30000\r\n            let illegal = 0\r\n            for (let i = 0; i < moves.length; i++) {\r\n                const move = moves[i]\r\n                board.movePiece(move.piece, move)\r\n                if (board.isIllegal(currentPlayer, move)) {\r\n                    board.undoMove()\r\n                    illegal++\r\n                    continue\r\n                }\r\n\r\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1, prevMoves)\r\n                board.undoMove()\r\n                if (currentEval < minEval) {\r\n                    minEval = currentEval\r\n                }\r\n\r\n                if (currentEval < beta) {\r\n                    beta = currentEval\r\n                }\r\n                if (beta <= alpha) {\r\n                    break\r\n                }\r\n            }\r\n            if (illegal === moves.length) {\r\n                if (board.isCheck(currentPlayer)) {\r\n                    return 30000 * depth\r\n                }\r\n                return 0\r\n\r\n            }\r\n            return minEval\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // const sortMovesQuiesce = (a, b) => {\r\n    //     if (a.ate !== null && b.ate !== null) {\r\n    //         const aScore = a.piece.points - a.ate.points\r\n    //         const bScore = b.piece.points - b.ate.points\r\n    //         return aScore < bScore ? 1: -1\r\n    //     } else if (a.ate !== null) {\r\n    //         return -1\r\n    //     } else if (b.ate !== null) {\r\n    //         return 1\r\n    //     }\r\n    //     return 0\r\n    // }\r\n    const sortMoves = (a, b) => {\r\n        if (a.ate !== null && b.ate !== null) {\r\n            const aScore = a.piece.points - a.ate.points\r\n            const bScore = b.piece.points - b.ate.points\r\n            return aScore < bScore ? -1: 1\r\n        } else if (a.ate !== null) {\r\n            return -1\r\n        } else if (b.ate !== null) {\r\n            return 1\r\n        } else {\r\n            const aScore = a.piece.colour === Piece.WHITE ? a.piece.whiteScore[a.newCell.row][a.newCell.col] : a.piece.blackScore[a.newCell.row][a.newCell.col]\r\n            const bScore = b.piece.colour === Piece.WHITE ? b.piece.whiteScore[b.newCell.row][b.newCell.col] : b.piece.blackScore[b.newCell.row][b.newCell.col]\r\n            return aScore < bScore ? 1: -1\r\n        }\r\n    }\r\n\r\n    const quiesce = (alpha, beta, board, colour, depth, prevMoves) => {\r\n        const evaluation = board.getScore(colour, prevMoves)\r\n        if (depth === 0) {\r\n            return evaluation\r\n        }\r\n        if (evaluation >= beta) {\r\n            return beta\r\n        }\r\n\r\n        alpha = Math.max(alpha, evaluation)\r\n        const moves = board.getAllMoves(colour)\r\n        moves.sort(sortMoves)\r\n        for (let i = 0; i < moves.length; i++) {\r\n            const move = moves[i]\r\n            if (move.ate !== null) { //  && move.ate.points > move.piece.points\r\n                board.movePiece(move.piece, move)\r\n                let score = -quiesce(-beta, -alpha, board, colour * -1, depth - 1, prevMoves)\r\n                board.undoMove()\r\n                if (score >= beta) {\r\n                    return beta\r\n                }\r\n                if (score > alpha) {\r\n                    alpha = score\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        return alpha\r\n    }\r\n    //\r\n    // const quiesceOdd = (alpha, beta, board, colour, depth) => {\r\n    //     // const evaluation = evaluate(board, colour)\r\n    //     let evaluation\r\n    //     const boardHash = board.getBoardHash() + colour.toString()\r\n    //     if (mem.has(boardHash)) {\r\n    //         evaluation = mem.get(boardHash)\r\n    //     } else {\r\n    //         evaluation = evaluate(board, colour)\r\n    //         mem.set(boardHash, evaluation)\r\n    //     }\r\n    //\r\n    //     if (depth === 0) {\r\n    //         return evaluation\r\n    //     }\r\n    //     if (evaluation >= beta) {\r\n    //         return beta\r\n    //     }\r\n    //\r\n    //     alpha = Math.max(alpha, evaluation)\r\n    //     const moves = board.getAllMoves(colour)\r\n    //     moves.sort(sortMovesQuiesce)\r\n    //     for (const move of moves) {\r\n    //         if (move.ate !== null) { //  && move.ate.points > move.piece.points\r\n    //             board.movePiece(move.piece, move)\r\n    //             let score = -quiesce(-beta, -alpha, board, switchColour(colour), depth - 1)\r\n    //             board.undoMove()\r\n    //             if (score >= beta) {\r\n    //                 return beta\r\n    //             }\r\n    //             if (score > alpha) {\r\n    //                 alpha = score\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return alpha\r\n    // }\r\n\r\n    // const negaMax = (depth, board, colour, maxColour) => {\r\n    //     if (depth === 0) {\r\n    //         return evaluate(board, maxColour)\r\n    //     }\r\n    //     const testGameOver = board.isGameOver(colour).isGameOver\r\n    //     if (testGameOver && colour === maxColour) {\r\n    //         return -Number.MAX_VALUE\r\n    //     }\r\n    //     if (testGameOver && colour !== maxColour) {\r\n    //         return Number.MAX_VALUE\r\n    //     }\r\n    //     let max = -Number.MAX_VALUE\r\n    //     const moves = board.getAllMoves(colour)\r\n    //     for (const move of moves) {\r\n    //         board.movePiece(move.piece, move)\r\n    //         const currentEval = -negaMax(depth - 1, board, switchColour(colour), maxColour)\r\n    //         if (currentEval > max) {\r\n    //             max = currentEval\r\n    //         }\r\n    //         board.undoMove()\r\n    //     }\r\n    //     return max\r\n    // }\r\n    // const rootNegaMax = (depth, board, colour, maxColour) => {\r\n    //     const rootMoves = board.getAllMoves(maxColour)\r\n    //     let max = -Number.MAX_VALUE\r\n    //     const randomIndex = Math.floor(Math.random() * (rootMoves.length - 1))\r\n    //     let bestMove = rootMoves.length > 0 ? rootMoves[randomIndex] : null\r\n    //     for (const move of rootMoves) {\r\n    //         board.movePiece(move.piece, move)\r\n    //         const score = negaMax(depth, board, colour, maxColour)\r\n    //         if (score > max) {\r\n    //             max = score\r\n    //             bestMove = move\r\n    //         }\r\n    //         board.undoMove()\r\n    //     }\r\n    //     return bestMove\r\n    //\r\n    // }\r\n    class Board {\r\n        board;\r\n\r\n        constructor() {\r\n            this.board = this.newBoard()\r\n            this.moves = []\r\n        }\r\n\r\n        newBoard = () => {\r\n            const startingBoard = [\r\n                [new Rook(Piece.BLACK, new Cell(0,0)), new Knight(Piece.BLACK, new Cell(0, 1)), new Bishop(Piece.BLACK, new Cell(0, 2)), new Queen(Piece.BLACK, new Cell(0, 3)), new King(Piece.BLACK, new Cell(0, 4)), new Bishop(Piece.BLACK, new Cell(0, 5)), new Knight(Piece.BLACK, new Cell(0, 6)), new Rook(Piece.BLACK, new Cell(0,7))],\r\n                [new Pawn(Piece.BLACK, new Cell(1, 0)), new Pawn(Piece.BLACK, new Cell(1, 1)), new Pawn(Piece.BLACK, new Cell(1, 2)), new Pawn(Piece.BLACK, new Cell(1, 3)), new Pawn(Piece.BLACK, new Cell(1, 4)), new Pawn(Piece.BLACK, new Cell(1, 5)), new Pawn(Piece.BLACK, new Cell(1, 6)), new Pawn(Piece.BLACK, new Cell(1, 7))],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null],\r\n                [new Pawn(Piece.WHITE, new Cell(6, 0)), new Pawn(Piece.WHITE, new Cell(6, 1)), new Pawn(Piece.WHITE, new Cell(6, 2)), new Pawn(Piece.WHITE, new Cell(6, 3)), new Pawn(Piece.WHITE, new Cell(6, 4)), new Pawn(Piece.WHITE, new Cell(6, 5)), new Pawn(Piece.WHITE, new Cell(6, 6)), new Pawn(Piece.WHITE, new Cell(6, 7))],\r\n                [new Rook(Piece.WHITE, new Cell(7,0)), new Knight(Piece.WHITE, new Cell(7, 1)), new Bishop(Piece.WHITE, new Cell(7, 2)), new Queen(Piece.WHITE, new Cell(7, 3)), new King(Piece.WHITE, new Cell(7, 4)), new Bishop(Piece.WHITE, new Cell(7, 5)), new Knight(Piece.WHITE, new Cell(7, 6)), new Rook(Piece.WHITE, new Cell(7,7))],\r\n            ]\r\n            return startingBoard\r\n        }\r\n        // update piece square tables for endgame\r\n        setEndGame = () => {\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null && piece.whiteScoreEnd !== undefined) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            piece.whiteScore = piece.whiteScoreEnd\r\n                        } else {\r\n                            piece.blackScore = piece.blackScoreEnd\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // update values of pieces\r\n        updatePieceValues = (totalMoves) => {\r\n            const MOVE_THRESHOLD = 12\r\n            // for knight, -5 per missing pawn of any colour done\r\n            // for bishop, fianchetto bonus points, control over square colour (using pawns), bishop pair bonus\r\n            // rook penalty for trap by king, bonus for open file, bonus for each missing pawn\r\n            // pawn, increase value +30 if past pawn (no pawns of opposing colour on the 3 cols), decrease value if doubled (-10)\r\n\r\n            let whitePawnCount = 0\r\n            let blackPawnCount = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece instanceof Pawn) {\r\n                            if (piece.colour === Piece.WHITE) {\r\n                                whitePawnCount++\r\n                            } else {\r\n                                blackPawnCount++\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const openFiles = []\r\n            for (let col = 0; col < 8; col++) {\r\n                let hasPawn = false\r\n                for (let row = 0; row < 8; row++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece instanceof Pawn) {\r\n                            hasPawn = true\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n                if (!hasPawn) {\r\n                    openFiles.push(col)\r\n                }\r\n            }\r\n\r\n            // first ten moves, bad to move queen out, and encourage piece development\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        if (piece instanceof Queen) {\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][3]+=50\r\n                                } else {\r\n                                    piece.blackScore[0][3]+=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Knight) {\r\n                            piece.points-= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][1]-=50\r\n                                    piece.whiteScore[7][6]-=50\r\n                                } else {\r\n                                    piece.blackScore[0][1]-=50\r\n                                    piece.blackScore[0][6]-=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Bishop) {\r\n                            piece.points+= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                            if (totalMoves <= MOVE_THRESHOLD) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.whiteScore[7][2]-=50\r\n                                    piece.whiteScore[7][5]-=50\r\n                                } else {\r\n                                    piece.blackScore[0][2]-=50\r\n                                    piece.blackScore[0][5]-=50\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Rook) {\r\n                            piece.points+= ((16 - whitePawnCount - blackPawnCount) * 3)\r\n                            for (const openCol of openFiles) {\r\n                                for (let openRow = 0; openRow<8; openRow++) {\r\n                                    piece.whiteScore[openRow][openCol]+= 15\r\n                                    piece.blackScore[openRow][openCol]+= 15\r\n                                }\r\n                            }\r\n                        }\r\n                        if (piece instanceof Pawn) {\r\n                            let past = true\r\n                            if (col + 1 < 8) {\r\n                                for (let i = 0; i < 8; i++) {\r\n                                    if (this.getPiece(i, col + 1) instanceof Pawn) {\r\n                                        past = false\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (col - 1 >= 0) {\r\n                                for (let i = 0; i < 8; i++) {\r\n                                    if (this.getPiece(i, col - 1) instanceof Pawn) {\r\n                                        past = false\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (past) {\r\n                                if (piece.colour === Piece.WHITE) {\r\n                                    piece.points+= (20 * (6 - row))\r\n                                } else {\r\n                                    piece.points+= (20 * (row - 1))\r\n                                }\r\n\r\n                            }\r\n                            let doubled = false\r\n                            for (let i = 0; i < 8; i++) {\r\n                                if (piece instanceof Pawn && i !== row) {\r\n                                    doubled = true\r\n                                }\r\n                            }\r\n                            if (doubled) {\r\n                                piece.points-=10\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        isEndGame = () => {\r\n            // End game defined by: either side has a queen + pawns only / either side has at most 2 minor pieces\r\n            let countWhitePieces = 0\r\n            let countBlackPieces = 0\r\n            let countWhiteQueen = 0\r\n            let countBlackQueen = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece instanceof Queen) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            countWhiteQueen++\r\n                        } else {\r\n                            countBlackQueen++\r\n                        }\r\n                    }\r\n                    if (piece instanceof Rook || piece instanceof Bishop || piece instanceof Knight) {\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            countWhitePieces++\r\n                        } else {\r\n                            countBlackPieces++\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return ((countWhiteQueen <= 1 && countWhitePieces <=1) || (countBlackQueen <= 1  && countBlackPieces <=1))\r\n                || ((countWhitePieces <=3 && countWhiteQueen <= 0) || (countBlackPieces <=3  && countBlackQueen <= 0))\r\n        }\r\n\r\n        setBoardString = (boardString) => {\r\n            const newBoard = []\r\n            for (let row = 0; row < 8; row++) {\r\n                const newRow = []\r\n                for (let col = 0; col < 8; col++) {\r\n                    const pieceString = boardString[row][col]\r\n                    if (pieceString === null) {\r\n                        newRow.push(null)\r\n                    } else {\r\n                        const pieceColour = pieceString.slice(0, 1)\r\n                        const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\r\n                        const piece = pieceString.slice(1, 2)\r\n                        if (piece === \"b\") {\r\n                            newRow.push(new Bishop(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'k') {\r\n                            newRow.push(new King(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'n') {\r\n                            newRow.push(new Knight(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'p') {\r\n                            newRow.push(new Pawn(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'q') {\r\n                            newRow.push(new Queen(actualColour, new Cell(row, col)))\r\n                        } else if (piece === 'r') {\r\n                            newRow.push(new Rook(actualColour, new Cell(row, col)))\r\n                        } else {\r\n                            newRow.push(null)\r\n                        }\r\n                    }\r\n                }\r\n                newBoard.push(newRow)\r\n            }\r\n            this.board = newBoard\r\n        }\r\n\r\n        getBoardHash = () => {\r\n            let str = \"\"\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        str += this.getPiece(row, col).getString()\r\n                    } else {\r\n                        str += \" \"\r\n                    }\r\n                }\r\n            }\r\n            return str\r\n        }\r\n\r\n        /**\r\n         * Returns the board represented by the array\r\n         */\r\n        getBoard = () => {\r\n            return this.board\r\n        }\r\n        /**\r\n         * Returns piece at the coordinates\r\n         */\r\n        getPiece = (row, col) => {\r\n            return this.board[row][col]\r\n        }\r\n\r\n        /**\r\n         * Returns if the cell is empty\r\n         */\r\n        isEmpty = (row, col) => {\r\n            if (this.isOutSide(row, col)) {\r\n                return false\r\n            }\r\n            return this.board[row][col] === null\r\n        }\r\n        isUnderCheck = (colour) => {\r\n            return false\r\n        }\r\n        isOutSide = (row, col) => {\r\n            return row < 0 || col < 0 || row > 7 || col > 7\r\n        }\r\n\r\n        canEat = (row, col, colour) => {\r\n            return !this.isOutSide(row, col) && !this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour\r\n        }\r\n\r\n\r\n        canMove = (row, col) => {\r\n            return !this.isOutSide(row, col) && this.isEmpty(row, col)\r\n        }\r\n\r\n        canKingMove = (row, col, colour) => {\r\n            const directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\r\n            for (const direction of directions) {\r\n                const newRow = row + direction[0]\r\n                const newCol = col + direction[1]\r\n                if (!this.isOutSide(newRow, newCol) && !this.isEmpty(newRow, newCol)\r\n                    && (this.getPiece(newRow, newCol).name === Piece.KING && this.getPiece(newRow, newCol).colour !== colour)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n\r\n        movePiece = (piece, move) => {\r\n            move.piece.movePiece(move, this)\r\n            this.moves.push(move)\r\n        }\r\n\r\n        undoMove = () => {\r\n            if (this.moves.length > 0) {\r\n                const move = this.moves.pop()\r\n                const prevRow = move.oldCell.row\r\n                const prevCol = move.oldCell.col\r\n                const piece = this.board[move.newCell.row][move.newCell.col]\r\n                if (piece === null) {\r\n                    console.log(this.getBoardString(), move)\r\n                }\r\n\r\n                this.board[prevRow][prevCol] = piece\r\n                piece.cell.row = prevRow\r\n                piece.cell.col = prevCol\r\n                if (move.isEnPassant) { // add back pawn\r\n                    this.board[move.ate.cell.row][move.ate.cell.col] = move.ate\r\n                    this.board[move.newCell.row][move.newCell.col] = null\r\n                    return true\r\n                } else if (move.isPromotion) { // remove piece, add back pawn\r\n                    this.board[prevRow][prevCol] = new Pawn(piece.colour, piece.cell, piece.moves)\r\n                } else if (move.castle.isCastle) { // king will be undone, need to undo rook\r\n                    this.board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = move.castle.rook.piece\r\n                    move.castle.rook.piece.cell.row = move.castle.rook.oldCell.row\r\n                    move.castle.rook.piece.cell.col = move.castle.rook.oldCell.col\r\n                    this.board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = null\r\n                }\r\n                this.board[move.newCell.row][move.newCell.col] = move.ate\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n\r\n        kingHasMoved = (colour) => {\r\n            for (let i = 0; i < this.moves.length; i++) {\r\n                const move = this.moves[i]\r\n                if (move.piece.name === Piece.KING && move.piece.colour === colour) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        rookHasMoved = (colour, side) => {\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const col = side === King.KING_SIDE ? 7 : 0\r\n            if (!(this.getPiece(row, col) !== null && this.getPiece(row, col).name === Piece.ROOK)) { // no rook on cell\r\n                return true\r\n            }\r\n            for (const move of this.moves) {\r\n                if (move.piece.name === Piece.ROOK && move.piece.colour === colour && move.oldCell.row === row && move.oldCell.col === col) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        castlingSquaresIsEmpty = (colour, side) => {\r\n            const row = colour === Piece.BLACK ? 0 : 7\r\n            const cols = side === King.KING_SIDE ? [5,6] : [1,2,3]\r\n            for (const col of cols) {\r\n                if (!this.isEmpty(row, col)) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n\r\n        // returns if colour is under check, need check for castling\r\n        isIllegal = (colour, move) => {\r\n            // get colour king first\r\n            let king;\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.name === Piece.KING) {\r\n                            if (piece.colour === colour) {\r\n                                king = piece\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (move.isCastle) {\r\n                const moves = this.getAllMoves(colour * -1)\r\n                const row = move.newCell.row\r\n                if (move.newCell.col === 6) { // kingside\r\n                    for (const opp of moves) {\r\n                        const moveRow = opp.newCell.row\r\n                        const moveCol = opp.newCell.col\r\n                        if (moveRow === row && (moveCol === 6 || moveCol === 5 || moveCol === 4)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (const opp of moves) {\r\n                        const moveRow = opp.newCell.row\r\n                        const moveCol = opp.newCell.col\r\n                        if (moveRow === row && (moveCol === 2 || moveCol === 3 || moveCol === 4)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.isCheck(this, king)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false\r\n        }\r\n        // check if colour is under check\r\n        isCheck = (colour) => {\r\n            let king;\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col)) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.name === Piece.KING) {\r\n                            if (piece.colour === colour) {\r\n                                king = piece\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        if (piece.isCheck(this, king)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return false\r\n        }\r\n\r\n        /**\r\n         * Checks if game is over for colour, means other colour wins\r\n         * @param colour\r\n         * @return {*[]}\r\n         */\r\n\r\n        getAllMoves = (colour) => {\r\n            let squares = []\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour === colour) {\r\n                        const piece = this.getPiece(row, col)\r\n                        const moves = piece.getMoves(this)\r\n                        squares = squares.concat(moves)\r\n                    }\r\n                }\r\n            }\r\n            return squares\r\n        }\r\n        /**\r\n         * Goes through board for positional eval, like piece development, hardcoded for black\r\n         */\r\n        scanSquaresScore = () => {\r\n            let score = 0\r\n            let materialScore = 0\r\n            for (let row = 0; row < 8; row++) {\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        // material score\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            materialScore += piece.points\r\n                        } else {\r\n                            materialScore -= piece.points\r\n                        }\r\n\r\n                        // development / positional score\r\n                        if (piece.colour === Piece.WHITE) {\r\n                            score += piece.whiteScore[row][col]\r\n                        } else {\r\n                            score -= piece.blackScore[row][col]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return score + materialScore\r\n        }\r\n\r\n        /**\r\n         * used for minimax heuristics\r\n         * @param colour colour making the next move\r\n         * @param prevMoves total moves available\r\n         * @return {number} score of position\r\n         */\r\n        getScore = (colour, prevMoves) => {\r\n            const positionalScore = this.scanSquaresScore()\r\n            return (positionalScore + prevMoves.length * 5) * colour * -1\r\n        }\r\n\r\n        getBoardString = () => {\r\n            const newBoard = []\r\n            for (let row = 0; row < 8; row++) {\r\n                const newRow = []\r\n                for (let col = 0; col < 8; col++) {\r\n                    const piece = this.getPiece(row, col)\r\n                    if (piece !== null) {\r\n                        newRow.push(piece.getString())\r\n                    } else {\r\n                        newRow.push(null)\r\n                    }\r\n                }\r\n                newBoard.push(newRow)\r\n            }\r\n            return newBoard\r\n        }\r\n\r\n    }\r\n    /**\r\n     * This class represents a coordinate on the chess board\r\n     */\r\n    class Cell {\r\n        constructor(row, col) {\r\n            this.row = row\r\n            this.col = col\r\n        }\r\n    }\r\n    class Move {\r\n        oldCell\r\n        newCell\r\n\r\n        constructor(oldCell, newCell, piece, isEnPassant = false,\r\n                    castle = {isCastle: false}, ate = null, isPromotion = false) {\r\n            this.oldCell = oldCell\r\n            this.newCell = newCell\r\n            this.piece = piece\r\n            this.isEnPassant = isEnPassant\r\n            this.castle = castle\r\n            this.ate = ate\r\n            this.isPromotion = isPromotion\r\n        }\r\n\r\n        getMoveString = () => {\r\n            return {\r\n                oldCellRow: this.oldCell.row,\r\n                oldCellCol: this.oldCell.col,\r\n                newCellRow: this.newCell.row,\r\n                newCellCol: this.newCell.col,\r\n                pieceString: this.piece.getString(),\r\n                isEnPassant: this.isEnPassant,\r\n                castle: this.castle.isCastle === false ? {isCastle: false} : {isCastle: true,\r\n                    rook:{\r\n                    pieceString : this.castle.rook.piece.getString(),\r\n                    oldCellRow: this.castle.rook.oldCell.row,\r\n                    oldCellCol: this.castle.rook.oldCell.col,\r\n                    newCellRow: this.castle.rook.newCell.row,\r\n                    newCellCol: this.castle.rook.newCell.col,\r\n                }},\r\n                ate: this.ate !== null ? this.ate.getString() : null,\r\n                isPromotion: this.isPromotion\r\n            }\r\n        }\r\n        static parseMove = (board, data) => {\r\n            const parseMove = new Move(\r\n                new Cell(data.oldCellRow, data.oldCellCol),\r\n                new Cell(data.newCellRow, data.newCellCol),\r\n                Piece.parsePieceString(data.pieceString),\r\n                data.isEnPassant,\r\n                {isCastle: false},\r\n                null,\r\n                data.isPromotion\r\n            )\r\n\r\n            if (data.castle.isCastle) {\r\n                const rookObj = data.castle.rook\r\n                parseMove.castle.isCastle = true\r\n                parseMove.castle.rook = new Move(new Cell(rookObj.oldCellRow, rookObj.oldCellCol)\r\n                    , new Cell(rookObj.newCellRow, rookObj.newCellCol), board.getPiece(rookObj.oldCellRow, rookObj.oldCellCol))\r\n            }\r\n            return parseMove\r\n        }\r\n\r\n    }\r\n    class Piece {\r\n        static WHITE = -1\r\n        static BLACK = 1\r\n        static ROOK = \"r\"\r\n        static BISHOP = \"b\"\r\n        static KNIGHT = \"n\"\r\n        static KING = \"k\"\r\n        static QUEEN = \"q\"\r\n        static PAWN = \"p\"\r\n        constructor(colour, cell) {\r\n            this.colour = colour // white or black\r\n            this.cell = cell\r\n        }\r\n        static parsePieceString = (pieceString) => {\r\n            const pieceColour = pieceString.slice(0, 1)\r\n            const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\r\n            const piece = pieceString.slice(1, 2)\r\n            if (piece === \"b\") {\r\n                return new Bishop(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'k') {\r\n                return new King(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'n') {\r\n                return new Knight(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'p') {\r\n                return new Pawn(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'q') {\r\n                return new Queen(actualColour, new Cell(0, 0))\r\n            } else if (piece === 'r') {\r\n                return new Rook(actualColour, new Cell(0, 0))\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    class Bishop extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1]]\r\n        points = 330\r\n        name = Piece.BISHOP\r\n        whiteScore = [\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-10,  0,  5, 10, 10,  5,  0,-10],\r\n            [-10,  5,  5, 10, 10,  5,  5,-10],\r\n            [-10,  0, 10, 10, 10, 10,  0,-10],\r\n            [-10, 10, 10, 10, 10, 10, 10,-10],\r\n            [-10,  5,  0,  0,  0,  0,  5,-10],\r\n            [-20,-10,-10,-10,-10,-10,-10,-20]\r\n        ]\r\n        blackScore = [\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n            [-10,  5,  0,  0,  0,  0,  5,-10],\r\n            [-10, 10, 10, 10, 10, 10, 10,-10],\r\n            [-10,  0, 10, 10, 10, 10,  0,-10],\r\n            [-10,  5,  5, 10, 10,  5,  5,-10],\r\n            [-10,  0,  5, 10, 10,  5,  0,-10],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if (rowDiff !== colDiff) {\r\n                return false\r\n            }\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"b\"\r\n        }\r\n    }\r\n    class King extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\r\n        static KING_SIDE = -1\r\n        static QUEEN_SIDE = 1\r\n        name = Piece.KING\r\n        points = 10000\r\n\r\n        whiteScore = [\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-20,-30,-30,-40,-40,-30,-30,-20],\r\n            [-10,-20,-20,-20,-20,-20,-20,-10],\r\n            [20, 20,  0,  0,  0,  0, 20, 20],\r\n            [20, 30, 10,  0,  0, 10, 30, 20]\r\n        ]\r\n\r\n        blackScore = [\r\n            [20, 30, 10,  0,  0, 10, 30, 20],\r\n            [20, 20,  0,  0,  0,  0, 20, 20],\r\n            [-10,-20,-20,-20,-20,-20,-20,-10],\r\n            [-20,-30,-30,-40,-40,-30,-30,-20],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n        ]\r\n        whiteScoreEnd = [\r\n            [-50,-40,-30,-20,-20,-30,-40,-50],\r\n            [-30,-20,-10,  0,  0,-10,-20,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-30,  0,  0,  0,  0,-30,-30],\r\n            [-50,-30,-30,-30,-30,-30,-30,-50]\r\n        ]\r\n        blackScoreEnd = [\r\n            [-50,-30,-30,-30,-30,-30,-30,-50],\r\n            [-30,-30,  0,  0,  0,  0,-30,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 30, 40, 40, 30,-10,-30],\r\n            [-30,-10, 20, 30, 30, 20,-10,-30],\r\n            [-30,-20,-10,  0,  0,-10,-20,-30],\r\n            [-50,-40,-30,-20,-20,-30,-40,-50],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (((board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol))) && board.canKingMove(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                }\r\n            }\r\n            // king and rook has not moved, illegal check later\r\n            if (board.castlingSquaresIsEmpty(this.colour, King.KING_SIDE) && !board.rookHasMoved(this.colour, King.KING_SIDE) && !board.kingHasMoved(this.colour)) {\r\n                const row = this.colour === Piece.BLACK ? 0 : 7\r\n                const col = 6\r\n                moves.push(new Move(new Cell(currentRow, currentCol), new Cell(row, col), this, false,\r\n                    {isCastle: true, rook: new Move(new Cell(row, 7), new Cell(row, 5), board.getPiece(row, 7))}))\r\n            }\r\n            if (board.castlingSquaresIsEmpty(this.colour, King.QUEEN_SIDE) && !board.rookHasMoved(this.colour, King.QUEEN_SIDE) && !board.kingHasMoved(this.colour)) {\r\n                const row = this.colour === Piece.BLACK ? 0 : 7\r\n                const col = 2\r\n                moves.push(new Move(new Cell(currentRow, currentCol), new Cell(row, col), this, false,\r\n                    {isCastle: true, rook: new Move(new Cell(row, 0), new Cell(row, 3), board.getPiece(row, 0))}))\r\n            }\r\n\r\n\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            return false\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            if (move.castle.isCastle) {\r\n                board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = move.castle.rook.piece\r\n                board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = null\r\n                move.castle.rook.piece.cell.row = move.castle.rook.newCell.row\r\n                move.castle.rook.piece.cell.col = move.castle.rook.newCell.col\r\n            }\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"k\"\r\n        }\r\n    }\r\n    class Knight extends Piece {\r\n        directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\r\n\r\n        points = 320\r\n        name = Piece.KNIGHT\r\n\r\n        whiteScore = [\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n            [-40,-20,  0,  0,  0,  0,-20,-40],\r\n            [-30,  0, 10, 15, 15, 10,  0,-30],\r\n            [-30,  5, 15, 20, 20, 15,  5,-30],\r\n            [-30,  0, 15, 20, 20, 15,  0,-30],\r\n            [-30,  5, 10, 15, 15, 10,  5,-30],\r\n            [-40,-20,  0,  5,  5,  0,-20,-40],\r\n            [-50,-40,-30,-30,-30,-30,-40,-50]\r\n        ]\r\n\r\n        blackScore = [\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n            [-40,-20,  0,  5,  5,  0,-20,-40],\r\n            [-30,  5, 10, 15, 15, 10,  5,-30],\r\n            [-30,  0, 15, 20, 20, 15,  0,-30],\r\n            [-30,  5, 15, 20, 20, 15,  5,-30],\r\n            [-30,  0, 10, 15, 15, 10,  0,-30],\r\n            [-40,-20,  0,  0,  0,  0,-20,-40],\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const newRow = row + currentRow\r\n                const newCol = col + currentCol\r\n                if (board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                    moves.push(move)\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        // check if piece is checking the enemy king\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if (rowDiff + colDiff !== 3) {\r\n                return false\r\n            }\r\n            return !(rowDiff === 0 || colDiff === 0);\r\n\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"n\"\r\n        }\r\n    }\r\n    class Pawn extends Piece {\r\n        points = 100\r\n        name = Piece.PAWN\r\n\r\n        whiteScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5, -5,-10,  0,  0,-10, -5,  5],\r\n            [5, 10, 10,-20,-20, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0]\r\n        ]\r\n        whiteScoreEnd = [\r\n            [100,  100,  100,  100,  100,  100,  100,  100],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5, -5,-10,  0,  0,-10, -5,  5],\r\n            [5, 10, 10,-20,-20, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0]\r\n        ]\r\n        blackScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10,-40,-40, 10, 10,  5],\r\n            [5, 10,20,  0,  0,-10, -5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n        ]\r\n        blackScoreEnd = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10,-40,-40, 10, 10,  5],\r\n            [5, 10,20,  0,  0,-10, -5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [100,  100,  100,  100,  100,  100,  100,  100],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            const moves = []\r\n            let newRow = this.cell.row + 1 * this.colour\r\n            let newCol = this.cell.col\r\n            if (board.canMove(newRow, newCol)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol),\r\n                    this, undefined, undefined, undefined,\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n\r\n                newRow = this.cell.row + 2 * this.colour\r\n                if (board.canMove(newRow, newCol) && (newRow === 3 || newRow === 4)) {\r\n                    if (this.colour === Piece.BLACK && this.cell.row === 1) {\r\n                        const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n\r\n                            moves.push(move)\r\n\r\n                    } else if (this.colour === Piece.WHITE && this.cell.row === 6) {\r\n                        const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                            moves.push(move)\r\n                    }\r\n\r\n                }\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col + 1\r\n            if (board.canEat(newRow, newCol, this.colour)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this , undefined, undefined, board.getPiece(newRow, newCol),\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n            }\r\n            // en passant\r\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\r\n                const prevMove = board.moves.slice(-1)[0]\r\n                if (prevMove.piece.name === Piece.PAWN && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col + 1\r\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this, true)\r\n                        moves.push(move)\r\n                }\r\n\r\n            }\r\n            newRow = this.cell.row + 1 * this.colour\r\n            newCol = this.cell.col - 1\r\n            if (board.canEat(newRow, newCol, this.colour)) {\r\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this , undefined, undefined, board.getPiece(newRow, newCol),\r\n                    newRow === 0 || newRow === 7)\r\n                    moves.push(move)\r\n            }\r\n            // en passant\r\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\r\n                const prevMove = board.moves.slice(-1)[0]\r\n                if (prevMove.piece.name === Piece.PAWN && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col - 1\r\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this, true)\r\n                    moves.push(move)\r\n                }\r\n\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const newRow = this.cell.row + 1 * this.colour\r\n            const newCol = this.cell.col + 1\r\n            const newColOpp = this.cell.col - 1\r\n            return newRow === kingRow && (newCol === kingCol || newColOpp === kingCol)\r\n        }\r\n\r\n        /**\r\n         * Moves the piece\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            // const old = board[move.oldCell.row][move.oldCell.col]\r\n            // promotion\r\n            if (move.isEnPassant) {\r\n                const prevMove = boardObject.moves.slice(-1)[0]\r\n                const oldPiece = board[prevMove.newCell.row][prevMove.newCell.col]\r\n                if (oldPiece !== null) {\r\n                    move.ate = oldPiece\r\n                }\r\n                board[prevMove.newCell.row][prevMove.newCell.col] = null\r\n            }\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n            if (move.isPromotion) {\r\n                board[newRow][newCol] = new Queen(this.colour, this.cell)\r\n            }\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"p\"\r\n        }\r\n    }\r\n    class Queen extends Piece {\r\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1], [0,1], [1,0], [0,-1],[-1,0]]\r\n        points = 900\r\n        name = Piece.QUEEN\r\n\r\n        whiteScore = [\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-10,  0,  5,  5,  5,  5,  0,-10],\r\n            [-5,  0,  5,  5,  5,  5,  0, -5],\r\n            [0,  0,  5,  5,  5,  5,  0, -5],\r\n            [-10,  5,  5,  5,  5,  5,  0,-10],\r\n            [-10,  0,  5,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10, -5, -5,-10,-10,-20]\r\n        ]\r\n        blackScore = [\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n            [-10,  0,  5,  0,  0,  0,  0,-10],\r\n            [-10,  5,  5,  5,  5,  5,  0,-10],\r\n            [0,  0,  5,  5,  5,  5,  0, -5],\r\n            [-5,  0,  5,  5,  5,  5,  0, -5],\r\n            [-10,  0,  5,  5,  5,  5,  0,-10],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                        moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            const rowDiff = Math.abs(row - kingRow)\r\n            const colDiff = Math.abs(col - kingCol)\r\n            if ((rowDiff !== colDiff) && kingCol !== col && kingRow !== row) {\r\n                return false\r\n            }\r\n            const currentRow = this.cell.row\r\n            const currentCol = this.cell.col\r\n            for (const direction of this.directions) {\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break;\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"q\"\r\n        }\r\n    }\r\n    class Rook extends Piece {\r\n        directions = [[0,1], [1,0], [0,-1],[-1,0]]\r\n        points = 500\r\n        name = Piece.ROOK\r\n        whiteScore = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10, 10, 10, 10, 10,  5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [0,  0,  0,  5,  5,  0,  0,  0]\r\n        ]\r\n        blackScore = [\r\n            [0,  0,  4,  5,  5,  10,  0,  0],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [5, 10, 10, 10, 10, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n        ]\r\n        constructor(colour, cell) {\r\n            super(colour, cell)\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns valid moves of a piece (move object)\r\n         * @param board chess board, object\r\n         */\r\n        getMoves = (board) => {\r\n            const moves = []\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\r\n                        moves.push(move)\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return moves\r\n        }\r\n        isCheck = (board, king) => {\r\n            const row = this.cell.row\r\n            const col = this.cell.col\r\n            const kingRow = king.cell.row\r\n            const kingCol = king.cell.col\r\n            if (kingCol !== col && kingRow !== row) {\r\n                return false\r\n            }\r\n            for (const direction of this.directions) {\r\n                const currentRow = this.cell.row\r\n                const currentCol = this.cell.col\r\n                const row = direction[0]\r\n                const col = direction[1]\r\n                let newRow = row + currentRow\r\n                let newCol = col + currentCol\r\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\r\n                    if (board.canEat(newRow, newCol, this.colour)) {\r\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\r\n                            return true\r\n                        }\r\n                        break\r\n                    }\r\n                    newRow +=row\r\n                    newCol +=col\r\n                }\r\n            }\r\n            return false\r\n\r\n        }\r\n        /**\r\n         * Moves the piece, updates the board object as well\r\n         */\r\n        movePiece = (move, boardObject) => {\r\n            const board = boardObject.getBoard()\r\n            const newRow = move.newCell.row\r\n            const newCol = move.newCell.col\r\n            const oldPiece = board[newRow][newCol]\r\n            if (oldPiece !== null) {\r\n                move.ate = oldPiece\r\n            }\r\n\r\n            board[newRow][newCol] = this\r\n            board[move.oldCell.row][move.oldCell.col] = null\r\n            this.cell = new Cell(newRow, newCol)\r\n        }\r\n\r\n        getString = () => {\r\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\r\n            return colourString + \"r\"\r\n        }\r\n    }\r\n\r\n        try {\r\n            const data = message.data\r\n            const boardString = data[0]\r\n            const depth = data[1]\r\n            const moveString = data[2]\r\n            const colour = data[3]\r\n            totalMoves = moveString.length\r\n            if (totalMoves === 0) {\r\n                if (colour === Piece.WHITE) {\r\n                    // equal chance to play d4, e4\r\n                    const moves = [\r\n                        new Move(new Cell(6, 3), new Cell(4,3), new Pawn(Piece.WHITE, new Cell(6, 3))),\r\n                        new Move(new Cell(6, 4), new Cell(4,4), new Pawn(Piece.WHITE, new Cell(6, 4))),\r\n                    ]\r\n                    const randomIndex = Math.round(Math.random() * (moves.length - 1))\r\n\r\n                    postMessage(moves[randomIndex].getMoveString())\r\n                }\r\n            } else if (totalMoves === 1) {\r\n                // equal chance to play c5 / e5, in response to e4\r\n                const getMove = moveString.map(x => Move.parseMove(undefined, x))[0]\r\n                if (getMove.oldCell.row === 6 && getMove.oldCell.col === 4 && getMove.newCell.row === 4 && getMove.newCell.col === 4) {\r\n                    const moves = [\r\n                        new Move(new Cell(1, 2), new Cell(3,2), new Pawn(Piece.BLACK, new Cell(1, 2))),\r\n                        new Move(new Cell(1, 4), new Cell(3,4), new Pawn(Piece.BLACK, new Cell(1, 4))),\r\n                    ]\r\n                    const randomIndex = Math.round(Math.random() * (moves.length - 1))\r\n\r\n                    postMessage(moves[randomIndex].getMoveString())\r\n                } else {\r\n                    const nextMove = ab(boardString, depth, moveString, colour)\r\n                    postMessage(nextMove.getMoveString())\r\n                }\r\n            } else {\r\n                const nextMove = ab(boardString, depth, moveString, colour)\r\n                postMessage(nextMove.getMoveString())\r\n            }\r\n        } catch (e) {\r\n            postMessage({isError: true, message:\"Error: \" + e})\r\n        }\r\n\r\n}\r\n// eslint-disable-next-line no-restricted-globals,no-undef\r\nself.addEventListener(\"message\", test);\r\n"],"names":["totalMoves","self","addEventListener","async","message","ab","boardString","depth","moveString","colour","copyBoard","Board","setBoardString","moves","map","x","Move","parseMove","isEndGame","console","log","setEndGame","updatePieceValues","result","miniMax","Number","MAX_VALUE","board","alpha","beta","maxPlayer","currentPlayer","getAllMoves","bestMove","sort","sortMoves","maxEval","illegal","i","length","move","movePiece","piece","isIllegal","undoMove","undefined","currentEval","miniMaxCore","Math","max","isCheck","minEval","min","prevMoves","slice","ate","quiesce","getScore","a","b","points","Piece","WHITE","whiteScore","newCell","row","col","blackScore","evaluation","score","constructor","this","newBoard","Rook","BLACK","Cell","Knight","Bishop","Queen","King","Pawn","getPiece","whiteScoreEnd","blackScoreEnd","whitePawnCount","blackPawnCount","openFiles","hasPawn","push","openCol","openRow","past","doubled","countWhitePieces","countBlackPieces","countWhiteQueen","countBlackQueen","newRow","pieceString","actualColour","getBoardHash","str","isEmpty","getString","getBoard","isOutSide","isUnderCheck","canEat","canMove","canKingMove","directions","direction","newCol","name","KING","pop","prevRow","oldCell","prevCol","getBoardString","cell","isEnPassant","isPromotion","castle","isCastle","rook","kingHasMoved","rookHasMoved","side","KING_SIDE","ROOK","castlingSquaresIsEmpty","cols","king","opp","moveRow","moveCol","squares","getMoves","concat","scanSquaresScore","materialScore","getMoveString","oldCellRow","oldCellCol","newCellRow","newCellCol","static","data","parsePieceString","rookObj","BISHOP","super","currentRow","currentCol","kingRow","kingCol","abs","boardObject","oldPiece","QUEEN_SIDE","KNIGHT","rowDiff","colDiff","PAWN","prevMove","newColOpp","QUEEN","randomIndex","round","random","postMessage","getMove","nextMove","e","isError"],"sourceRoot":""}