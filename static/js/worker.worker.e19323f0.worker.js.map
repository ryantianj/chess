{"version":3,"file":"static/js/worker.worker.e19323f0.worker.js","mappings":"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","sources":["Chess/ai/worker.worker.js"],"sourcesContent":["let totalMoves = 0\nconst test = async (message) => {\n   // https://chess.stackexchange.com/questions/40362/my-transposition-tables-implementation-slows-down-alpha-beta-pruning\n    // https://github.com/maksimKorzh/chess_programming/blob/master/src/negamax/tutorials/alpha-beta_quiescence_search/chess.c\n    //https://stackoverflow.com/questions/29990116/alpha-beta-prunning-with-transposition-table-iterative-deepening\n    // https://stackoverflow.com/questions/16500739/chess-high-branching-factor\n    // https://github.com/maksimKorzh/chess_programming/blob/master/src/bbc/collecting_pv/bbc.c\n    // https://github.com/kbjorklu/chess/blob/master/src/bitboard.js\n    //https://chess.stackexchange.com/questions/28160/moves-per-depth-in-search-engines\n    // Null move: https://web.archive.org/web/20071031095933/http://www.brucemo.com/compchess/programming/nullmove.htm\n    // https://github.com/maksimKorzh/chess_programming/blob/master/src/bbc/null_move_pruning/bbc.c\n    // TODO: check if endgame before running search, set score tables before search, done after set board string\n    // End game defined by: either side has a queen + pawns only / either side has at most 2 minor pieces\n    // TODO: update piece score tables based on position before running search, done after set board string\n    // for knight, -5 per missing pawn of any colour\n    // for bishop, fianchetto bonus points, control over square colour (using pawns), bishop pair bonus\n    // rook penalty for trap by king, bonus for open file, bonus for each missing pawn\n    // pawn, increase value +30 if past pawn (no pawns of opposing colour on the 3 cols), decrease value if doubled (-10)\n    const mem = new Map() // for killer moves\n    const MAX_DEPTH = 10\n    let whiteCanCastle = true\n    let blackCanCastle = true\n    const pv_length = Array.from({length: MAX_DEPTH}, (x) => 0);\n    const pv_table = Array.from({length: MAX_DEPTH}, (x) => Array.from({length: MAX_DEPTH}, (x) => 0))\n    let currentPv = []\n    let startTime;\n    const MAX_TIME = 20000 // 20 seconds\n    const CHECK_THRESHOLD = 100000 // power of 2\n    let nodes = 0\n    let branch = 0\n    const NULL_MOVE_R = 2\n    const ab =  (boardString, depth, moveString, colour, pv) => {\n        let bestMove;\n        const copyBoard = new Board()\n        copyBoard.setBoardString(boardString)\n        copyBoard.moves = moveString.map(x => Move.parseMove(copyBoard, x))\n        // set pv from previous iteration\n        for (let i = 2; i < pv.length; i++) { // first two moves would have been made\n            pv_table[0][i - 2] = Move.parseMove(copyBoard, pv[i])\n        }\n        const prev = pv_table[0]\n        currentPv = [...prev]\n        const isEndGame = copyBoard.isEndGame()\n        if (isEndGame) {\n            console.log(\"endgame\")\n            copyBoard.setEndGame()\n        }\n        copyBoard.updatePieceValues(totalMoves)\n        for (let i = 1; i < depth; i++) {\n            mem.set(i, [null, null, null]) // max number of killer moves\n        }\n        startTime = performance.now()\n        let result\n        for (let i = 2; i <= depth; i+=2) { // iterative deepening\n            result = miniMax(copyBoard, i, -Number.MAX_VALUE, Number.MAX_VALUE, colour, colour, mem, 0)\n            bestMove = pv_table[0][0]\n            const prev = pv_table[0]\n            currentPv = [...prev]\n            console.log(i, \"Score\", result[1], pv_table[0][0].newCell)\n        }\n        // result = miniMax(copyBoard, depth, -Number.MAX_VALUE, Number.MAX_VALUE, colour, colour, mem, 0)\n        const end = performance.now()\n        // console.log(end - start, totalMoves, nodes)\n        const arr = []\n        for (let i = 0; i < depth; i++) {\n            if (pv_table[0][i] === 0) {\n                break\n            }\n            arr.push(pv_table[0][i].getMoveString())\n        }\n        console.log(end - startTime, nodes, branch)\n        // console.log(\"eval\", nodes)\n\n\n        return [bestMove.getMoveString(), arr] // should be a move\n    }\n\n    const miniMax = (board, depth, alpha, beta, maxPlayer, currentPlayer, mem, ply) => {\n        if (nodes % CHECK_THRESHOLD === 0) {\n            if (performance.now() - startTime > MAX_TIME) {\n                return [pv_table[0][0], -99999]\n            }\n        }\n        const moves = board.getAllMoves(currentPlayer) // TODO: time consuming\n        moveOrderRoot(moves, depth, ply)\n        let bestMove;\n        if (currentPlayer === maxPlayer) {\n            let maxEval = -90000\n            let legal = 0\n            for (let i = 0; i < moves.length; i++) {\n                const move = moves[i]\n                board.movePiece(move.piece, move)\n                if (board.isIllegal(currentPlayer, move)) {\n                    board.undoMove()\n\n                    continue\n                }\n                legal++\n                if (bestMove === undefined) {\n                    bestMove = move\n                }\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1, moves, mem, ply + 1, legal === 1)\n                board.undoMove()\n                if (currentEval > maxEval) {\n                    maxEval = currentEval\n                    bestMove = move\n                    pv_table[ply][ply] = move\n                    for (let next_ply = ply + 1; next_ply < pv_length[ply + 1]; next_ply++) {\n                        // copy move from deeper ply into a current ply's line\n                        pv_table[ply][next_ply] = pv_table[ply + 1][next_ply];\n                    }\n                    // adjust PV length\n                    pv_length[ply] = pv_length[ply + 1];\n                }\n                alpha = Math.max(alpha, currentEval)\n                if (beta <= alpha) {\n                    break\n                }\n            }\n            if (legal === 0) { // TODO: check stalemate\n                if (board.isCheck(currentPlayer)) {\n                    return [null, -90000]\n                }\n                return [null, 0]\n            }\n            return [bestMove, maxEval]\n        } else {\n            let minEval = 90000\n            let legal = 0\n            for (let i = 0; i < moves.length; i++) {\n                const move = moves[i]\n                board.movePiece(move.piece, move)\n                if (board.isIllegal(currentPlayer, move)) {\n                    board.undoMove()\n                    continue\n                }\n                legal++\n                if (bestMove === undefined) {\n                    bestMove = move\n                }\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1, moves, mem, ply + 1, legal === 1)\n                board.undoMove()\n                if (currentEval < minEval) {\n                    minEval = currentEval\n                    bestMove = move\n                    pv_table[ply][ply] = move\n                    for (let next_ply = ply + 1; next_ply < pv_length[ply + 1]; next_ply++) {\n                        // copy move from deeper ply into a current ply's line\n                        pv_table[ply][next_ply] = pv_table[ply + 1][next_ply];\n                    }\n                    // adjust PV length\n                    pv_length[ply] = pv_length[ply + 1];\n                }\n                beta = Math.min(beta, currentEval)\n                if (beta <= alpha) {\n                    break\n                }\n            }\n            if (legal === 0) {\n                if (board.isCheck(currentPlayer)) {\n                    return [null, 90000]\n                }\n                return [null, 0]\n\n            }\n            return [bestMove, minEval]\n        }\n    }\n    const miniMaxCore = (board, depth, alpha, beta, maxPlayer, currentPlayer, prevMoves, mem, ply, isLeftMost) => {\n        if (nodes % CHECK_THRESHOLD === 0) {\n            if (performance.now() - startTime > MAX_TIME) {\n                return -99999\n            }\n        }\n        let branchLocal = 0\n        nodes++\n        const MAX_KILLER = 2\n        pv_length[ply] = ply\n        if (depth <= 0) {\n            let result\n            if (false) {\n                result = quiesce(alpha, beta, board, currentPlayer, 2, prevMoves)\n            } else {\n                result = board.getScore(maxPlayer, prevMoves)\n            }\n            return result\n        }\n        const nullMoveVal =  miniMaxCore(board, depth - 1 - NULL_MOVE_R, alpha, beta, maxPlayer, currentPlayer * -1, prevMoves, mem, ply + 1 + NULL_MOVE_R, false)\n        if (nullMoveVal >= beta) {\n            return beta\n        }\n        const moves = board.getAllMoves(currentPlayer) // TODO: time consuming\n        moveOrder(moves, mem, depth, ply, isLeftMost)\n        if (currentPlayer === maxPlayer) {\n            let maxEval = -30000\n            let legal = 0\n            for (let i = 0; i < moves.length; i++) {\n                const move = moves[i]\n                board.movePiece(move.piece, move)\n                if (board.isIllegal(currentPlayer, move)) {\n                    board.undoMove()\n                    continue\n                }\n                legal++\n                branchLocal++\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1, moves, mem, ply + 1, legal === 1)\n                board.undoMove()\n                if (currentEval > maxEval) {\n                    maxEval = currentEval\n                    pv_table[ply][ply] = move\n                    for (let next_ply = ply + 1; next_ply < pv_length[ply + 1]; next_ply++) {\n                        // copy move from deeper ply into a current ply's line\n                        pv_table[ply][next_ply] = pv_table[ply + 1][next_ply];\n                    }\n                    // adjust PV length\n                    pv_length[ply] = pv_length[ply + 1];\n                }\n                if (currentEval > alpha) {\n                    alpha = currentEval\n                }\n                if (beta <= alpha) {\n                    if (move.ate !== null) {\n                        break\n                    }\n                    const arr = mem.get(depth)\n                    if (arr.find(e => e!== null && isEqualMove(e, move))) {\n                        break\n                    }\n                    for (let j = MAX_KILLER - 2; j >= 0; j--) {\n                        arr[j + 1] = arr[j]\n                    }\n                    arr[0] = move\n                    break\n                }\n            }\n            branch = (branch + branchLocal) / 2\n            if (legal === 0) {\n                if (board.isCheck(currentPlayer)) {\n                    return -30000 * depth // faster checkmates\n                }\n                return 0 // stalemate\n            }\n            return maxEval\n        } else {\n            let minEval = 30000\n            let legal = 0\n            for (let i = 0; i < moves.length; i++) {\n                const move = moves[i]\n                board.movePiece(move.piece, move)\n                if (board.isIllegal(currentPlayer, move)) {\n                    board.undoMove()\n                    continue\n                }\n                legal++\n                branchLocal++\n                const currentEval = miniMaxCore(board, depth - 1, alpha, beta, maxPlayer, currentPlayer * -1, prevMoves, mem, ply +1, legal === 1)\n                board.undoMove()\n                if (currentEval < minEval) {\n                    minEval = currentEval\n                    pv_table[ply][ply] = move\n                    for (let next_ply = ply + 1; next_ply < pv_length[ply + 1]; next_ply++) {\n                        // copy move from deeper ply into a current ply's line\n                        pv_table[ply][next_ply] = pv_table[ply + 1][next_ply];\n                    }\n                    // adjust PV length\n                    pv_length[ply] = pv_length[ply + 1];\n                }\n\n                if (currentEval < beta) {\n                    beta = currentEval\n                }\n                if (beta <= alpha) {\n                    if (move.ate !== null) {\n                        break\n                    }\n                    const arr = mem.get(depth)\n                    if (arr.find(e => e!== null && isEqualMove(e, move))) {\n                        break\n                    }\n                    for (let j = MAX_KILLER - 2; j >= 0; j--) {\n                        arr[j + 1] = arr[j]\n                    }\n                    arr[0] = move\n                    break\n                }\n            }\n            branch = (branch + branchLocal) / 2\n            if (legal === 0) {\n                if (board.isCheck(currentPlayer)) {\n                    return 30000 * depth\n                }\n                return 0\n\n            }\n            return minEval\n        }\n    }\n\n    const moveOrderRoot = (moves, depth, ply) => {\n        const sortMovesO = (a, b) => {\n            const pvMove = currentPv[ply]\n            if (pvMove !== 0 && isEqualMove(a, pvMove)) {\n                return -1\n            } else if (pvMove !== 0 && isEqualMove(b, pvMove)) {\n                return 1\n            }\n            if (a.ate !== null && b.ate !== null) {\n                const aScore = a.piece.points - a.ate.points\n                const bScore = b.piece.points - b.ate.points\n                return aScore < bScore ? -1: 1\n            } else {\n                if (a.ate !== null) {\n                    return -1\n                } else if (b.ate !== null) {\n                    return 1\n                }\n                const aScore = a.piece.colour === Piece.WHITE ? a.piece.whiteScore[a.newCell.row][a.newCell.col] : a.piece.blackScore[a.newCell.row][a.newCell.col]\n                const bScore = b.piece.colour === Piece.WHITE ? b.piece.whiteScore[b.newCell.row][b.newCell.col] : b.piece.blackScore[b.newCell.row][b.newCell.col]\n                return aScore < bScore ? 1: -1\n\n            }\n        }\n        moves.sort(sortMovesO)\n    }\n\n    const moveOrder = (moves, mem, depth, ply, isLeftMost) => {\n\n        const sortMovesO = (a, b) => {\n            const pvMove = currentPv[ply]\n            if (isLeftMost && pvMove !== 0) {\n                if (isEqualMove(a, pvMove)) {\n                    return -1\n                } else if (isEqualMove(b, pvMove)) {\n                    return 1\n                }\n            }\n            if (a.ate !== null && b.ate !== null) {\n                const aScore = a.piece.points - a.ate.points\n                const bScore = b.piece.points - b.ate.points\n                return aScore < bScore ? -1: 1\n            } else {\n                if (a.ate !== null) {\n                    return -1\n                } else if (b.ate !== null) {\n                    return 1\n                }\n                const memSlot = mem.get(depth)\n                for (let slot = 0; slot < memSlot.length; slot++) {\n                    const killerMove = memSlot[slot]\n                    if (killerMove !== null && isEqualMove(a, killerMove)) {\n                        return -1\n                    }\n                    if (killerMove !== null && isEqualMove(b, killerMove)) {\n                        return 1\n                    }\n                }\n\n                const aScore = a.piece.colour === Piece.WHITE ? a.piece.whiteScore[a.newCell.row][a.newCell.col] : a.piece.blackScore[a.newCell.row][a.newCell.col]\n                const bScore = b.piece.colour === Piece.WHITE ? b.piece.whiteScore[b.newCell.row][b.newCell.col] : b.piece.blackScore[b.newCell.row][b.newCell.col]\n                return aScore < bScore ? 1: -1\n\n            }\n        }\n        moves.sort(sortMovesO)\n    }\n\n    const isEqualMove = (a, b) => {\n        if (a.newCell.row === b.newCell.row && a.newCell.col === b.newCell.col && a.oldCell.row === b.oldCell.row && a.oldCell.col === b.oldCell.col && a.piece.constructor === b.piece.constructor) {\n            if (a.ate !== null && b.ate !== null) {\n                return a.ate.constructor === b.ate.constructor\n            }\n            return a.ate === b.ate\n        }\n        return false\n    }\n\n    const sortMoves = (a, b) => {\n        if (a.ate !== null && b.ate !== null) {\n            const aScore = a.piece.points - a.ate.points\n            const bScore = b.piece.points - b.ate.points\n            return aScore < bScore ? -1: 1\n        } else {\n            if (a.ate !== null) {\n                return -1\n            } else if (b.ate !== null) {\n                return 1\n            } else {\n                const aScore = a.piece.colour === Piece.WHITE ? a.piece.whiteScore[a.newCell.row][a.newCell.col] : a.piece.blackScore[a.newCell.row][a.newCell.col]\n                const bScore = b.piece.colour === Piece.WHITE ? b.piece.whiteScore[b.newCell.row][b.newCell.col] : b.piece.blackScore[b.newCell.row][b.newCell.col]\n                return aScore < bScore ? 1: -1\n            }\n        }\n    }\n\n\n\n\n\n    const quiesce = (alpha, beta, board, colour, depth, prevMoves) => {\n        const evaluation = board.getScore(colour, prevMoves)\n        if (depth === 0) {\n            return evaluation\n        }\n        if (evaluation >= beta) {\n            return beta\n        }\n\n        alpha = Math.max(alpha, evaluation)\n        const moves = board.getAllMoves(colour)\n        moves.sort(sortMoves)\n        for (let i = 0; i < moves.length; i++) {\n            const move = moves[i]\n            if (move.ate !== null) { //  && move.ate.points > move.piece.points\n                board.movePiece(move.piece, move)\n                let score = -quiesce(-beta, -alpha, board, colour * -1, depth - 1, prevMoves)\n                board.undoMove()\n                if (score >= beta) {\n                    return beta\n                }\n                if (score > alpha) {\n                    alpha = score\n                }\n            } else {\n                break\n            }\n        }\n        return alpha\n    }\n    //\n    // const quiesceOdd = (alpha, beta, board, colour, depth) => {\n    //     // const evaluation = evaluate(board, colour)\n    //     let evaluation\n    //     const boardHash = board.getBoardHash() + colour.toString()\n    //     if (mem.has(boardHash)) {\n    //         evaluation = mem.get(boardHash)\n    //     } else {\n    //         evaluation = evaluate(board, colour)\n    //         mem.set(boardHash, evaluation)\n    //     }\n    //\n    //     if (depth === 0) {\n    //         return evaluation\n    //     }\n    //     if (evaluation >= beta) {\n    //         return beta\n    //     }\n    //\n    //     alpha = Math.max(alpha, evaluation)\n    //     const moves = board.getAllMoves(colour)\n    //     moves.sort(sortMovesQuiesce)\n    //     for (const move of moves) {\n    //         if (move.ate !== null) { //  && move.ate.points > move.piece.points\n    //             board.movePiece(move.piece, move)\n    //             let score = -quiesce(-beta, -alpha, board, switchColour(colour), depth - 1)\n    //             board.undoMove()\n    //             if (score >= beta) {\n    //                 return beta\n    //             }\n    //             if (score > alpha) {\n    //                 alpha = score\n    //             }\n    //         }\n    //     }\n    //     return alpha\n    // }\n\n    // const negaMax = (depth, board, colour, maxColour) => {\n    //     if (depth === 0) {\n    //         return evaluate(board, maxColour)\n    //     }\n    //     const testGameOver = board.isGameOver(colour).isGameOver\n    //     if (testGameOver && colour === maxColour) {\n    //         return -Number.MAX_VALUE\n    //     }\n    //     if (testGameOver && colour !== maxColour) {\n    //         return Number.MAX_VALUE\n    //     }\n    //     let max = -Number.MAX_VALUE\n    //     const moves = board.getAllMoves(colour)\n    //     for (const move of moves) {\n    //         board.movePiece(move.piece, move)\n    //         const currentEval = -negaMax(depth - 1, board, switchColour(colour), maxColour)\n    //         if (currentEval > max) {\n    //             max = currentEval\n    //         }\n    //         board.undoMove()\n    //     }\n    //     return max\n    // }\n    // const rootNegaMax = (depth, board, colour, maxColour) => {\n    //     const rootMoves = board.getAllMoves(maxColour)\n    //     let max = -Number.MAX_VALUE\n    //     const randomIndex = Math.floor(Math.random() * (rootMoves.length - 1))\n    //     let bestMove = rootMoves.length > 0 ? rootMoves[randomIndex] : null\n    //     for (const move of rootMoves) {\n    //         board.movePiece(move.piece, move)\n    //         const score = negaMax(depth, board, colour, maxColour)\n    //         if (score > max) {\n    //             max = score\n    //             bestMove = move\n    //         }\n    //         board.undoMove()\n    //     }\n    //     return bestMove\n    //\n    // }\n    class Board {\n        board;\n\n        constructor() {\n            this.board = this.newBoard()\n            this.moves = []\n        }\n\n        newBoard = () => {\n            const startingBoard = [\n                [new Rook(Piece.BLACK, new Cell(0,0)), new Knight(Piece.BLACK, new Cell(0, 1)), new Bishop(Piece.BLACK, new Cell(0, 2)), new Queen(Piece.BLACK, new Cell(0, 3)), new King(Piece.BLACK, new Cell(0, 4)), new Bishop(Piece.BLACK, new Cell(0, 5)), new Knight(Piece.BLACK, new Cell(0, 6)), new Rook(Piece.BLACK, new Cell(0,7))],\n                [new Pawn(Piece.BLACK, new Cell(1, 0)), new Pawn(Piece.BLACK, new Cell(1, 1)), new Pawn(Piece.BLACK, new Cell(1, 2)), new Pawn(Piece.BLACK, new Cell(1, 3)), new Pawn(Piece.BLACK, new Cell(1, 4)), new Pawn(Piece.BLACK, new Cell(1, 5)), new Pawn(Piece.BLACK, new Cell(1, 6)), new Pawn(Piece.BLACK, new Cell(1, 7))],\n                [null, null, null, null, null, null, null, null],\n                [null, null, null, null, null, null, null, null],\n                [null, null, null, null, null, null, null, null],\n                [null, null, null, null, null, null, null, null],\n                [new Pawn(Piece.WHITE, new Cell(6, 0)), new Pawn(Piece.WHITE, new Cell(6, 1)), new Pawn(Piece.WHITE, new Cell(6, 2)), new Pawn(Piece.WHITE, new Cell(6, 3)), new Pawn(Piece.WHITE, new Cell(6, 4)), new Pawn(Piece.WHITE, new Cell(6, 5)), new Pawn(Piece.WHITE, new Cell(6, 6)), new Pawn(Piece.WHITE, new Cell(6, 7))],\n                [new Rook(Piece.WHITE, new Cell(7,0)), new Knight(Piece.WHITE, new Cell(7, 1)), new Bishop(Piece.WHITE, new Cell(7, 2)), new Queen(Piece.WHITE, new Cell(7, 3)), new King(Piece.WHITE, new Cell(7, 4)), new Bishop(Piece.WHITE, new Cell(7, 5)), new Knight(Piece.WHITE, new Cell(7, 6)), new Rook(Piece.WHITE, new Cell(7,7))],\n            ]\n            return startingBoard\n        }\n        // update piece square tables for endgame\n        setEndGame = () => {\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    const piece = this.getPiece(row, col)\n                    if (piece !== null && piece.whiteScoreEnd !== undefined) {\n                        if (piece.colour === Piece.WHITE) {\n                            piece.whiteScore = piece.whiteScoreEnd\n                        } else {\n                            piece.blackScore = piece.blackScoreEnd\n                        }\n                    }\n                }\n            }\n        }\n        // update values of pieces\n        updatePieceValues = (totalMoves) => {\n            // set if colour can castle here\n            if (this.kingHasMoved(Piece.WHITE) || this.rookHasMoved(Piece.WHITE, King.KING_SIDE) || this.rookHasMoved(Piece.WHITE, King.QUEEN_SIDE)) {\n                whiteCanCastle = false\n            }\n            if (this.kingHasMoved(Piece.BLACK) || this.rookHasMoved(Piece.BLACK, King.KING_SIDE) || this.rookHasMoved(Piece.BLACK, King.QUEEN_SIDE)) {\n                blackCanCastle = false\n            }\n            const MOVE_THRESHOLD = 12\n            // for knight, -5 per missing pawn of any colour done\n            // for bishop, fianchetto bonus points, control over square colour (using pawns), bishop pair bonus\n            // rook penalty for trap by king, bonus for open file, bonus for each missing pawn\n            // pawn, increase value +30 if past pawn (no pawns of opposing colour on the 3 cols), decrease value if doubled (-10)\n\n            let whitePawnCount = 0\n            let blackPawnCount = 0\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    const piece = this.getPiece(row, col)\n                    if (piece !== null) {\n                        if (piece instanceof Pawn) {\n                            if (piece.colour === Piece.WHITE) {\n                                whitePawnCount++\n                            } else {\n                                blackPawnCount++\n                            }\n                        }\n                    }\n                }\n            }\n            const openFiles = []\n            for (let col = 0; col < 8; col++) {\n                let hasPawn = false\n                for (let row = 0; row < 8; row++) {\n                    const piece = this.getPiece(row, col)\n                    if (piece !== null) {\n                        if (piece instanceof Pawn) {\n                            hasPawn = true\n                            break\n                        }\n                    }\n                }\n                if (!hasPawn) {\n                    openFiles.push(col)\n                }\n            }\n\n            // first ten moves, bad to move queen out, and encourage piece development\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    const piece = this.getPiece(row, col)\n                    if (piece !== null) {\n                        if (piece instanceof Queen) {\n                            if (totalMoves <= MOVE_THRESHOLD) {\n                                if (piece.colour === Piece.WHITE) {\n                                    piece.whiteScore[7][3]+=50\n                                } else {\n                                    piece.blackScore[0][3]+=50\n                                }\n                            }\n                        }\n                        if (piece instanceof Knight) {\n                            piece.points-= ((16 - whitePawnCount - blackPawnCount) * 3)\n                            if (totalMoves <= MOVE_THRESHOLD) {\n                                if (piece.colour === Piece.WHITE) {\n                                    piece.whiteScore[7][1]-=50\n                                    piece.whiteScore[7][6]-=50\n                                } else {\n                                    piece.blackScore[0][1]-=50\n                                    piece.blackScore[0][6]-=50\n                                }\n                            }\n                        }\n                        if (piece instanceof Bishop) {\n                            piece.points+= ((16 - whitePawnCount - blackPawnCount) * 3)\n                            if (totalMoves <= MOVE_THRESHOLD) {\n                                if (piece.colour === Piece.WHITE) {\n                                    piece.whiteScore[7][2]-=50\n                                    piece.whiteScore[7][5]-=50\n                                } else {\n                                    piece.blackScore[0][2]-=50\n                                    piece.blackScore[0][5]-=50\n                                }\n                            }\n                        }\n                        if (piece instanceof Rook) {\n                            piece.points+= ((16 - whitePawnCount - blackPawnCount) * 3)\n                            for (const openCol of openFiles) {\n                                for (let openRow = 0; openRow<8; openRow++) {\n                                    piece.whiteScore[openRow][openCol]+= 15\n                                    piece.blackScore[openRow][openCol]+= 15\n                                }\n                            }\n                        }\n                        if (piece instanceof Pawn) {\n                            let past = true\n                            if (col + 1 < 8) {\n                                if (piece.colour === Piece.WHITE) {\n                                    for (let i = row  - 1; i >= 0; i--) {\n                                        if (this.getPiece(i, col + 1) instanceof Pawn) {\n                                            past = false\n                                        }\n                                    }\n                                } else {\n                                    for (let i = row + 1; i < 8; i++) {\n                                        if (this.getPiece(i, col + 1) instanceof Pawn) {\n                                            past = false\n                                        }\n                                    }\n                                }\n\n                            }\n                            if (col < 8) {\n                                if (piece.colour === Piece.WHITE) {\n                                    for (let i = row  - 1; i >= 0; i--) {\n                                        if (this.getPiece(i, col) instanceof Pawn) {\n                                            past = false\n                                        }\n                                    }\n                                } else {\n                                    for (let i = row + 1; i < 8; i++) {\n                                        if (this.getPiece(i, col) instanceof Pawn) {\n                                            past = false\n                                        }\n                                    }\n                                }\n\n                            }\n                            if (col - 1 >= 0) {\n                                if (piece.colour === Piece.WHITE) {\n                                    for (let i = row  - 1; i >= 0; i--) {\n                                        if (this.getPiece(i, col - 1) instanceof Pawn) {\n                                            past = false\n                                        }\n                                    }\n                                } else {\n                                    for (let i = row + 1; i < 8; i++) {\n                                        if (this.getPiece(i, col - 1) instanceof Pawn) {\n                                            past = false\n                                        }\n                                    }\n                                }\n                            }\n                            if (past) {\n                                if (piece.colour === Piece.WHITE) {\n                                    piece.points+= (20 * (6 - row))\n                                } else {\n                                    piece.points+= (20 * (row - 1))\n                                }\n\n                            }\n                            let doubled = false\n                            for (let i = 0; i < 8; i++) {\n                                if (piece instanceof Pawn && i !== row) {\n                                    doubled = true\n                                }\n                            }\n                            if (doubled) {\n                                piece.points-=10\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        isEndGame = () => {\n            // End game defined by: either side has a queen + pawns only / either side has at most 2 minor pieces\n            let countWhitePieces = 0\n            let countBlackPieces = 0\n            let countWhiteQueen = 0\n            let countBlackQueen = 0\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    const piece = this.getPiece(row, col)\n                    if (piece instanceof Queen) {\n                        if (piece.colour === Piece.WHITE) {\n                            countWhiteQueen++\n                        } else {\n                            countBlackQueen++\n                        }\n                    }\n                    if (piece instanceof Rook || piece instanceof Bishop || piece instanceof Knight) {\n                        if (piece.colour === Piece.WHITE) {\n                            countWhitePieces++\n                        } else {\n                            countBlackPieces++\n                        }\n                    }\n                }\n            }\n            return ((countWhiteQueen <= 1 && countWhitePieces <=1) || (countBlackQueen <= 1  && countBlackPieces <=1))\n                || ((countWhitePieces <=3 && countWhiteQueen <= 0) || (countBlackPieces <=3  && countBlackQueen <= 0))\n        }\n\n        setBoardString = (boardString) => {\n            const newBoard = []\n            for (let row = 0; row < 8; row++) {\n                const newRow = []\n                for (let col = 0; col < 8; col++) {\n                    const pieceString = boardString[row][col]\n                    if (pieceString === null) {\n                        newRow.push(null)\n                    } else {\n                        const pieceColour = pieceString.slice(0, 1)\n                        const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\n                        const piece = pieceString.slice(1, 2)\n                        if (piece === \"b\") {\n                            newRow.push(new Bishop(actualColour, new Cell(row, col)))\n                        } else if (piece === 'k') {\n                            newRow.push(new King(actualColour, new Cell(row, col)))\n                        } else if (piece === 'n') {\n                            newRow.push(new Knight(actualColour, new Cell(row, col)))\n                        } else if (piece === 'p') {\n                            newRow.push(new Pawn(actualColour, new Cell(row, col)))\n                        } else if (piece === 'q') {\n                            newRow.push(new Queen(actualColour, new Cell(row, col)))\n                        } else if (piece === 'r') {\n                            newRow.push(new Rook(actualColour, new Cell(row, col)))\n                        } else {\n                            newRow.push(null)\n                        }\n                    }\n                }\n                newBoard.push(newRow)\n            }\n            this.board = newBoard\n        }\n\n        getBoardHash = () => {\n            let str = \"\"\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    if (!this.isEmpty(row, col)) {\n                        str += this.getPiece(row, col).getString()\n                    } else {\n                        str += \" \"\n                    }\n                }\n            }\n            return str\n        }\n\n        /**\n         * Returns the board represented by the array\n         */\n        getBoard = () => {\n            return this.board\n        }\n        /**\n         * Returns piece at the coordinates\n         */\n        getPiece = (row, col) => {\n            return this.board[row][col]\n        }\n\n        /**\n         * Returns if the cell is empty\n         */\n        isEmpty = (row, col) => {\n            if (this.isOutSide(row, col)) {\n                return false\n            }\n            return this.board[row][col] === null\n        }\n        isUnderCheck = (colour) => {\n            return false\n        }\n        isOutSide = (row, col) => {\n            return row < 0 || col < 0 || row > 7 || col > 7\n        }\n\n        canEat = (row, col, colour) => {\n            return !this.isOutSide(row, col) && !this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour\n        }\n\n\n        canMove = (row, col) => {\n            return !this.isOutSide(row, col) && this.isEmpty(row, col)\n        }\n\n        canKingMove = (row, col, colour) => {\n            const directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\n            for (const direction of directions) {\n                const newRow = row + direction[0]\n                const newCol = col + direction[1]\n                if (!this.isOutSide(newRow, newCol) && !this.isEmpty(newRow, newCol)\n                    && (this.getPiece(newRow, newCol).name === Piece.KING && this.getPiece(newRow, newCol).colour !== colour)) {\n                    return false\n                }\n            }\n            return true\n        }\n\n        movePiece = (piece, move) => {\n            move.piece.movePiece(move, this)\n            this.moves.push(move)\n        }\n\n        undoMove = () => {\n            if (this.moves.length > 0) {\n                const move = this.moves.pop()\n                const prevRow = move.oldCell.row\n                const prevCol = move.oldCell.col\n                const piece = this.board[move.newCell.row][move.newCell.col]\n                if (piece === null) {\n                    console.log(this.getBoardString(), move)\n                }\n\n                this.board[prevRow][prevCol] = piece\n                piece.cell.row = prevRow\n                piece.cell.col = prevCol\n                if (move.isEnPassant) { // add back pawn\n                    this.board[move.ate.cell.row][move.ate.cell.col] = move.ate\n                    this.board[move.newCell.row][move.newCell.col] = null\n                    return true\n                } else if (move.isPromotion) { // remove piece, add back pawn\n                    this.board[prevRow][prevCol] = new Pawn(piece.colour, piece.cell, piece.moves)\n                } else if (move.castle.isCastle) { // king will be undone, need to undo rook\n                    this.board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = move.castle.rook.piece\n                    move.castle.rook.piece.cell.row = move.castle.rook.oldCell.row\n                    move.castle.rook.piece.cell.col = move.castle.rook.oldCell.col\n                    this.board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = null\n                }\n                this.board[move.newCell.row][move.newCell.col] = move.ate\n                return true\n            }\n            return false\n        }\n\n        kingHasMoved = (colour) => {\n            for (let i = 0; i < this.moves.length; i++) {\n                const move = this.moves[i]\n                if (move.piece.name === Piece.KING && move.piece.colour === colour) {\n                    return true\n                }\n            }\n            return false\n        }\n\n        rookHasMoved = (colour, side) => {\n            const row = colour === Piece.BLACK ? 0 : 7\n            const col = side === King.KING_SIDE ? 7 : 0\n            if (!(this.getPiece(row, col) !== null && this.getPiece(row, col).name === Piece.ROOK)) { // no rook on cell\n                return true\n            }\n            for (const move of this.moves) {\n                if (move.piece.name === Piece.ROOK && move.piece.colour === colour && move.oldCell.row === row && move.oldCell.col === col) {\n                    return true\n                }\n            }\n            return false\n        }\n\n        castlingSquaresIsEmpty = (colour, side) => {\n            const row = colour === Piece.BLACK ? 0 : 7\n            const cols = side === King.KING_SIDE ? [5,6] : [1,2,3]\n            for (const col of cols) {\n                if (!this.isEmpty(row, col)) {\n                    return false\n                }\n            }\n            return true\n        }\n\n        // returns if colour is under check, need check for castling\n        isIllegal = (colour, move) => {\n            // get colour king first\n            let king;\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    if (!this.isEmpty(row, col)) {\n                        const piece = this.getPiece(row, col)\n                        if (piece.name === Piece.KING) {\n                            if (piece.colour === colour) {\n                                king = piece\n                            }\n                        }\n                    }\n                }\n            }\n            if (move.castle.isCastle) {\n                const moves = this.getAllMoves(colour * -1)\n                const row = move.newCell.row\n                if (move.newCell.col === 6) { // kingside\n                    for (const opp of moves) {\n                        const moveRow = opp.newCell.row\n                        const moveCol = opp.newCell.col\n                        if (moveRow === row && (moveCol === 6 || moveCol === 5 || moveCol === 4)) {\n                            return true\n                        }\n                    }\n                } else {\n                    for (const opp of moves) {\n                        const moveRow = opp.newCell.row\n                        const moveCol = opp.newCell.col\n                        if (moveRow === row && (moveCol === 1 || moveCol === 2 || moveCol === 3 || moveCol === 4)) {\n                            return true\n                        }\n                    }\n                }\n            }\n\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour) {\n                        const piece = this.getPiece(row, col)\n                        if (piece.isCheck(this, king)) {\n                            return true\n                        }\n                    }\n                }\n            }\n            return false\n        }\n        // check if colour is under check\n        isCheck = (colour) => {\n            let king;\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    if (!this.isEmpty(row, col)) {\n                        const piece = this.getPiece(row, col)\n                        if (piece.name === Piece.KING) {\n                            if (piece.colour === colour) {\n                                king = piece\n                            }\n                        }\n                    }\n                }\n            }\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour !== colour) {\n                        const piece = this.getPiece(row, col)\n                        if (piece.isCheck(this, king)) {\n                            return true\n                        }\n                    }\n                }\n            }\n            return false\n        }\n\n        /**\n         * Checks if game is over for colour, means other colour wins\n         * @param colour\n         * @return {*[]}\n         */\n\n        getAllMoves = (colour) => {\n            let squares = []\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    if (!this.isEmpty(row, col) && this.getPiece(row, col).colour === colour) {\n                        const piece = this.getPiece(row, col)\n                        const moves = piece.getMoves(this)\n                        squares = squares.concat(moves)\n                    }\n                }\n            }\n            return squares\n        }\n        /**\n         * Goes through board for positional eval, like piece development, hardcoded for black\n         */\n        scanSquaresScore = () => {\n            let score = 0\n            let materialScore = 0\n            for (let row = 0; row < 8; row++) {\n                for (let col = 0; col < 8; col++) {\n                    const piece = this.getPiece(row, col)\n                    if (piece !== null) {\n                        // material score\n                        if (piece.colour === Piece.WHITE) {\n                            materialScore += piece.points\n                        } else {\n                            materialScore -= piece.points\n                        }\n\n                        // development / positional score\n                        if (piece.colour === Piece.WHITE) {\n                            score += piece.whiteScore[row][col]\n                        } else {\n                            score -= piece.blackScore[row][col]\n                        }\n                    }\n                }\n            }\n\n            return score + materialScore\n        }\n\n        /**\n         * used for minimax heuristics\n         * @param colour colour making the next move\n         * @param prevMoves total moves available\n         * @return {number} score of position\n         */\n        getScore = (colour, prevMoves) => {\n            const positionalScore = this.scanSquaresScore()\n            return (positionalScore + prevMoves.length * 5) * colour * -1\n        }\n\n        getBoardString = () => {\n            const newBoard = []\n            for (let row = 0; row < 8; row++) {\n                const newRow = []\n                for (let col = 0; col < 8; col++) {\n                    const piece = this.getPiece(row, col)\n                    if (piece !== null) {\n                        newRow.push(piece.getString())\n                    } else {\n                        newRow.push(null)\n                    }\n                }\n                newBoard.push(newRow)\n            }\n            return newBoard\n        }\n\n    }\n    /**\n     * This class represents a coordinate on the chess board\n     */\n    class Cell {\n        constructor(row, col) {\n            this.row = row\n            this.col = col\n        }\n    }\n    class Move {\n        oldCell\n        newCell\n\n        constructor(oldCell, newCell, piece, isEnPassant = false,\n                    castle = {isCastle: false}, ate = null, isPromotion = false) {\n            this.oldCell = oldCell\n            this.newCell = newCell\n            this.piece = piece\n            this.isEnPassant = isEnPassant\n            this.castle = castle\n            this.ate = ate\n            this.isPromotion = isPromotion\n        }\n\n        getMoveString = () => {\n            return {\n                oldCellRow: this.oldCell.row,\n                oldCellCol: this.oldCell.col,\n                newCellRow: this.newCell.row,\n                newCellCol: this.newCell.col,\n                pieceString: this.piece.getString(),\n                isEnPassant: this.isEnPassant,\n                castle: this.castle.isCastle === false ? {isCastle: false} : {isCastle: true,\n                    rook:{\n                    pieceString : this.castle.rook.piece.getString(),\n                    oldCellRow: this.castle.rook.oldCell.row,\n                    oldCellCol: this.castle.rook.oldCell.col,\n                    newCellRow: this.castle.rook.newCell.row,\n                    newCellCol: this.castle.rook.newCell.col,\n                }},\n                ate: this.ate !== null ? this.ate.getString() : null,\n                isPromotion: this.isPromotion\n            }\n        }\n        static parseMove = (board, data) => {\n            const parseMove = new Move(\n                new Cell(data.oldCellRow, data.oldCellCol),\n                new Cell(data.newCellRow, data.newCellCol),\n                Piece.parsePieceString(data.pieceString),\n                data.isEnPassant,\n                {isCastle: false},\n                null,\n                data.isPromotion\n            )\n\n            if (data.castle.isCastle) {\n                const rookObj = data.castle.rook\n                parseMove.castle.isCastle = true\n                parseMove.castle.rook = new Move(new Cell(rookObj.oldCellRow, rookObj.oldCellCol)\n                    , new Cell(rookObj.newCellRow, rookObj.newCellCol), board.getPiece(rookObj.oldCellRow, rookObj.oldCellCol))\n            }\n            return parseMove\n        }\n\n    }\n    class Piece {\n        static WHITE = -1\n        static BLACK = 1\n        static ROOK = \"r\"\n        static BISHOP = \"b\"\n        static KNIGHT = \"n\"\n        static KING = \"k\"\n        static QUEEN = \"q\"\n        static PAWN = \"p\"\n        constructor(colour, cell) {\n            this.colour = colour // white or black\n            this.cell = cell\n        }\n        static parsePieceString = (pieceString) => {\n            const pieceColour = pieceString.slice(0, 1)\n            const actualColour = pieceColour === \"w\" ? Piece.WHITE : Piece.BLACK\n            const piece = pieceString.slice(1, 2)\n            if (piece === \"b\") {\n                return new Bishop(actualColour, new Cell(0, 0))\n            } else if (piece === 'k') {\n                return new King(actualColour, new Cell(0, 0))\n            } else if (piece === 'n') {\n                return new Knight(actualColour, new Cell(0, 0))\n            } else if (piece === 'p') {\n                return new Pawn(actualColour, new Cell(0, 0))\n            } else if (piece === 'q') {\n                return new Queen(actualColour, new Cell(0, 0))\n            } else if (piece === 'r') {\n                return new Rook(actualColour, new Cell(0, 0))\n            } else {\n                return null\n            }\n        }\n    }\n\n    class Bishop extends Piece {\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1]]\n        points = 330\n        name = Piece.BISHOP\n        whiteScore = [\n            [-20,-10,-10,-10,-10,-10,-10,-20],\n            [-10,  0,  0,  0,  0,  0,  0,-10],\n            [-10,  0,  5, 10, 10,  5,  0,-10],\n            [-10,  5,  5, 10, 10,  5,  5,-10],\n            [-10,  0, 10, 10, 10, 10,  0,-10],\n            [-10, 10, 10, 10, 10, 10, 10,-10],\n            [-10,  5,  0,  0,  0,  0,  5,-10],\n            [-20,-10,-10,-10,-10,-10,-10,-20]\n        ]\n        blackScore = [\n            [-20,-10,-10,-10,-10,-10,-10,-20],\n            [-10,  5,  0,  0,  0,  0,  5,-10],\n            [-10, 10, 10, 10, 10, 10, 10,-10],\n            [-10,  0, 10, 10, 10, 10,  0,-10],\n            [-10,  5,  5, 10, 10,  5,  5,-10],\n            [-10,  0,  5, 10, 10,  5,  0,-10],\n            [-10,  0,  0,  0,  0,  0,  0,-10],\n            [-20,-10,-10,-10,-10,-10,-10,-20],\n        ]\n        constructor(colour, cell) {\n            super(colour, cell)\n        }\n\n        /**\n         * Returns valid moves of a piece (move object)\n         * @param board chess board, object\n         */\n        getMoves = (board) => {\n            const moves = []\n            const currentRow = this.cell.row\n            const currentCol = this.cell.col\n            for (const direction of this.directions) {\n                const row = direction[0]\n                const col = direction[1]\n                let newRow = row + currentRow\n                let newCol = col + currentCol\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\n                    moves.push(move)\n                    if (board.canEat(newRow, newCol, this.colour)) {\n                        break\n                    }\n                    newRow +=row\n                    newCol +=col\n                }\n            }\n            return moves\n        }\n        // check if piece is checking the enemy king\n        isCheck = (board, king) => {\n            const row = this.cell.row\n            const col = this.cell.col\n            const kingRow = king.cell.row\n            const kingCol = king.cell.col\n            const rowDiff = Math.abs(row - kingRow)\n            const colDiff = Math.abs(col - kingCol)\n            if (rowDiff !== colDiff) {\n                return false\n            }\n            const currentRow = this.cell.row\n            const currentCol = this.cell.col\n            for (const direction of this.directions) {\n                const row = direction[0]\n                const col = direction[1]\n                let newRow = row + currentRow\n                let newCol = col + currentCol\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\n                    if (board.canEat(newRow, newCol, this.colour)) {\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\n                            return true\n                        }\n                        break\n                    }\n                    newRow +=row\n                    newCol +=col\n                }\n            }\n            return false\n\n        }\n\n        /**\n         * Moves the piece, updates the board object as well\n         */\n        movePiece = (move, boardObject) => {\n            const board = boardObject.getBoard()\n            const newRow = move.newCell.row\n            const newCol = move.newCell.col\n            const oldPiece = board[newRow][newCol]\n            if (oldPiece !== null) {\n                move.ate = oldPiece\n            }\n            board[newRow][newCol] = this\n            board[move.oldCell.row][move.oldCell.col] = null\n            this.cell = new Cell(newRow, newCol)\n        }\n\n        getString = () => {\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\n            return colourString + \"b\"\n        }\n    }\n    class King extends Piece {\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1],[0,1], [1,0], [0,-1],[-1,0]]\n        static KING_SIDE = -1\n        static QUEEN_SIDE = 1\n        name = Piece.KING\n        points = 10000\n\n        whiteScore = [\n            [-30,-40,-40,-50,-50,-40,-40,-30],\n            [-30,-40,-40,-50,-50,-40,-40,-30],\n            [-30,-40,-40,-50,-50,-40,-40,-30],\n            [-30,-40,-40,-50,-50,-40,-40,-30],\n            [-20,-30,-30,-40,-40,-30,-30,-20],\n            [-10,-20,-20,-20,-20,-20,-20,-10],\n            [20, 20,  0,  0,  0,  0, 20, 20],\n            [20, 30, 10,  0,  0, 10, 30, 20]\n        ]\n\n        blackScore = [\n            [20, 30, 10,  0,  0, 10, 30, 20],\n            [20, 20,  0,  0,  0,  0, 20, 20],\n            [-10,-20,-20,-20,-20,-20,-20,-10],\n            [-20,-30,-30,-40,-40,-30,-30,-20],\n            [-30,-40,-40,-50,-50,-40,-40,-30],\n            [-30,-40,-40,-50,-50,-40,-40,-30],\n            [-30,-40,-40,-50,-50,-40,-40,-30],\n            [-30,-40,-40,-50,-50,-40,-40,-30],\n        ]\n        whiteScoreEnd = [\n            [-50,-40,-30,-20,-20,-30,-40,-50],\n            [-30,-20,-10,  0,  0,-10,-20,-30],\n            [-30,-10, 20, 30, 30, 20,-10,-30],\n            [-30,-10, 30, 40, 40, 30,-10,-30],\n            [-30,-10, 30, 40, 40, 30,-10,-30],\n            [-30,-10, 20, 30, 30, 20,-10,-30],\n            [-30,-30,  0,  0,  0,  0,-30,-30],\n            [-50,-30,-30,-30,-30,-30,-30,-50]\n        ]\n        blackScoreEnd = [\n            [-50,-30,-30,-30,-30,-30,-30,-50],\n            [-30,-30,  0,  0,  0,  0,-30,-30],\n            [-30,-10, 20, 30, 30, 20,-10,-30],\n            [-30,-10, 30, 40, 40, 30,-10,-30],\n            [-30,-10, 30, 40, 40, 30,-10,-30],\n            [-30,-10, 20, 30, 30, 20,-10,-30],\n            [-30,-20,-10,  0,  0,-10,-20,-30],\n            [-50,-40,-30,-20,-20,-30,-40,-50],\n        ]\n        constructor(colour, cell) {\n            super(colour, cell)\n        }\n\n        /**\n         * Returns valid moves of a piece (move object)\n         * @param board chess board, object\n         */\n        getMoves = (board) => {\n            const moves = []\n            const currentRow = this.cell.row\n            const currentCol = this.cell.col\n            for (const direction of this.directions) {\n                const row = direction[0]\n                const col = direction[1]\n                const newRow = row + currentRow\n                const newCol = col + currentCol\n                if (((board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol))) && board.canKingMove(newRow, newCol, this.colour)) {\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\n                    moves.push(move)\n                }\n            }\n            // king and rook has not moved, illegal check later\n            if (whiteCanCastle && board.castlingSquaresIsEmpty(this.colour, King.KING_SIDE) && !board.rookHasMoved(this.colour, King.KING_SIDE) && !board.kingHasMoved(this.colour)) {\n                const row = this.colour === Piece.BLACK ? 0 : 7\n                const col = 6\n                moves.push(new Move(new Cell(currentRow, currentCol), new Cell(row, col), this, false,\n                    {isCastle: true, rook: new Move(new Cell(row, 7), new Cell(row, 5), board.getPiece(row, 7))}))\n            }\n            if (blackCanCastle && board.castlingSquaresIsEmpty(this.colour, King.QUEEN_SIDE) && !board.rookHasMoved(this.colour, King.QUEEN_SIDE) && !board.kingHasMoved(this.colour)) {\n                const row = this.colour === Piece.BLACK ? 0 : 7\n                const col = 2\n                moves.push(new Move(new Cell(currentRow, currentCol), new Cell(row, col), this, false,\n                    {isCastle: true, rook: new Move(new Cell(row, 0), new Cell(row, 3), board.getPiece(row, 0))}))\n            }\n\n\n            return moves\n        }\n        // check if piece is checking the enemy king\n        isCheck = (board, king) => {\n            return false\n        }\n        /**\n         * Moves the piece, updates the board object as well\n         */\n        movePiece = (move, boardObject) => {\n            const board = boardObject.getBoard()\n            const newRow = move.newCell.row\n            const newCol = move.newCell.col\n            if (move.castle.isCastle) {\n                board[move.castle.rook.newCell.row][move.castle.rook.newCell.col] = move.castle.rook.piece\n                board[move.castle.rook.oldCell.row][move.castle.rook.oldCell.col] = null\n                move.castle.rook.piece.cell.row = move.castle.rook.newCell.row\n                move.castle.rook.piece.cell.col = move.castle.rook.newCell.col\n            }\n            const oldPiece = board[newRow][newCol]\n            if (oldPiece !== null) {\n                move.ate = oldPiece\n            }\n            board[newRow][newCol] = this\n            board[move.oldCell.row][move.oldCell.col] = null\n            this.cell = new Cell(newRow, newCol)\n        }\n\n        getString = () => {\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\n            return colourString + \"k\"\n        }\n    }\n    class Knight extends Piece {\n        directions = [[1, 2], [1, -2], [2, 1], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n\n        points = 320\n        name = Piece.KNIGHT\n\n        whiteScore = [\n            [-50,-40,-30,-30,-30,-30,-40,-50],\n            [-40,-20,  0,  0,  0,  0,-20,-40],\n            [-30,  0, 10, 15, 15, 10,  0,-30],\n            [-30,  5, 15, 20, 20, 15,  5,-30],\n            [-30,  0, 15, 20, 20, 15,  0,-30],\n            [-30,  5, 10, 15, 15, 10,  5,-30],\n            [-40,-20,  0,  5,  5,  0,-20,-40],\n            [-50,-40,-30,-30,-30,-30,-40,-50]\n        ]\n\n        blackScore = [\n            [-50,-40,-30,-30,-30,-30,-40,-50],\n            [-40,-20,  0,  5,  5,  0,-20,-40],\n            [-30,  5, 10, 15, 15, 10,  5,-30],\n            [-30,  0, 15, 20, 20, 15,  0,-30],\n            [-30,  5, 15, 20, 20, 15,  5,-30],\n            [-30,  0, 10, 15, 15, 10,  0,-30],\n            [-40,-20,  0,  0,  0,  0,-20,-40],\n            [-50,-40,-30,-30,-30,-30,-40,-50],\n        ]\n        constructor(colour, cell) {\n            super(colour, cell)\n\n        }\n\n        /**\n         * Returns valid moves of a piece (move object)\n         * @param board chess board, object\n         */\n        getMoves = (board) => {\n            const moves = []\n            for (const direction of this.directions) {\n                const row = direction[0]\n                const col = direction[1]\n                const currentRow = this.cell.row\n                const currentCol = this.cell.col\n                const newRow = row + currentRow\n                const newCol = col + currentCol\n                if (board.canEat(newRow, newCol, this.colour) || board.canMove(newRow, newCol)) {\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\n                    moves.push(move)\n                }\n            }\n            return moves\n        }\n        // check if piece is checking the enemy king\n        isCheck = (board, king) => {\n            const row = this.cell.row\n            const col = this.cell.col\n            const kingRow = king.cell.row\n            const kingCol = king.cell.col\n            const rowDiff = Math.abs(row - kingRow)\n            const colDiff = Math.abs(col - kingCol)\n            if (rowDiff + colDiff !== 3) {\n                return false\n            }\n            return !(rowDiff === 0 || colDiff === 0);\n\n        }\n        /**\n         * Moves the piece, updates the board object as well\n         */\n        movePiece = (move, boardObject) => {\n            const board = boardObject.getBoard()\n            const newRow = move.newCell.row\n            const newCol = move.newCell.col\n            const oldPiece = board[newRow][newCol]\n            if (oldPiece !== null) {\n                move.ate = oldPiece\n            }\n            board[newRow][newCol] = this\n            board[move.oldCell.row][move.oldCell.col] = null\n            this.cell = new Cell(newRow, newCol)\n        }\n\n        getString = () => {\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\n            return colourString + \"n\"\n        }\n    }\n    class Pawn extends Piece {\n        points = 100\n        name = Piece.PAWN\n\n        whiteScore = [\n            [0,  0,  0,  0,  0,  0,  0,  0],\n            [50, 50, 50, 50, 50, 50, 50, 50],\n            [10, 10, 20, 30, 30, 20, 10, 10],\n            [5,  5, 10, 25, 25, 10,  5,  5],\n            [0,  0,  0, 20, 20,  0,  0,  0],\n            [5, -5,-10,  0,  0,-10, -5,  5],\n            [5, 10, 10,-20,-20, 10, 10,  5],\n            [0,  0,  0,  0,  0,  0,  0,  0]\n        ]\n        whiteScoreEnd = [\n            [100,  100,  100,  100,  100,  100,  100,  100],\n            [50, 50, 50, 50, 50, 50, 50, 50],\n            [10, 10, 20, 30, 30, 20, 10, 10],\n            [5,  5, 10, 25, 25, 10,  5,  5],\n            [0,  0,  0, 20, 20,  0,  0,  0],\n            [5, -5,-10,  0,  0,-10, -5,  5],\n            [5, 10, 10,-20,-20, 10, 10,  5],\n            [0,  0,  0,  0,  0,  0,  0,  0]\n        ]\n        blackScore = [\n            [0,  0,  0,  0,  0,  0,  0,  0],\n            [5, 10, 10,-40,-40, 10, 10,  5],\n            [5, 10,20,  0,  0,-10, -5,  5],\n            [0,  0,  0, 20, 20,  0,  0,  0],\n            [5,  5, 10, 25, 25, 10,  5,  5],\n            [10, 10, 20, 30, 30, 20, 10, 10],\n            [50, 50, 50, 50, 50, 50, 50, 50],\n            [0,  0,  0,  0,  0,  0,  0,  0],\n        ]\n        blackScoreEnd = [\n            [0,  0,  0,  0,  0,  0,  0,  0],\n            [5, 10, 10,-40,-40, 10, 10,  5],\n            [5, 10,20,  0,  0,-10, -5,  5],\n            [0,  0,  0, 20, 20,  0,  0,  0],\n            [5,  5, 10, 25, 25, 10,  5,  5],\n            [10, 10, 20, 30, 30, 20, 10, 10],\n            [50, 50, 50, 50, 50, 50, 50, 50],\n            [100,  100,  100,  100,  100,  100,  100,  100],\n        ]\n        constructor(colour, cell) {\n            super(colour, cell)\n\n        }\n\n        /**\n         * Returns valid moves of a piece (move object)\n         * @param board chess board, object\n         */\n        getMoves = (board) => {\n            const currentRow = this.cell.row\n            const currentCol = this.cell.col\n            const moves = []\n            let newRow = this.cell.row + 1 * this.colour\n            let newCol = this.cell.col\n            if (board.canMove(newRow, newCol)) {\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol),\n                    this, undefined, undefined, undefined,\n                    newRow === 0 || newRow === 7)\n                    moves.push(move)\n\n                newRow = this.cell.row + 2 * this.colour\n                if (board.canMove(newRow, newCol) && (newRow === 3 || newRow === 4)) {\n                    if (this.colour === Piece.BLACK && this.cell.row === 1) {\n                        const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\n\n                            moves.push(move)\n\n                    } else if (this.colour === Piece.WHITE && this.cell.row === 6) {\n                        const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\n                            moves.push(move)\n                    }\n\n                }\n            }\n            newRow = this.cell.row + 1 * this.colour\n            newCol = this.cell.col + 1\n            if (board.canEat(newRow, newCol, this.colour)) {\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this , undefined, undefined, board.getPiece(newRow, newCol),\n                    newRow === 0 || newRow === 7)\n                    moves.push(move)\n            }\n            // en passant\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\n                const prevMove = board.moves.slice(-1)[0]\n                if (prevMove.piece.name === Piece.PAWN && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col + 1\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this, true)\n                        moves.push(move)\n                }\n\n            }\n            newRow = this.cell.row + 1 * this.colour\n            newCol = this.cell.col - 1\n            if (board.canEat(newRow, newCol, this.colour)) {\n                const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this , undefined, undefined, board.getPiece(newRow, newCol),\n                    newRow === 0 || newRow === 7)\n                    moves.push(move)\n            }\n            // en passant\n            if (board.canMove(newRow, newCol) && board.moves.length > 0) {\n                const prevMove = board.moves.slice(-1)[0]\n                if (prevMove.piece.name === Piece.PAWN && prevMove.newCell.row === this.cell.row && prevMove.newCell.col === this.cell.col - 1\n                    && Math.abs(prevMove.newCell.row - prevMove.oldCell.row) === 2) {\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this, true)\n                    moves.push(move)\n                }\n\n            }\n            return moves\n        }\n        isCheck = (board, king) => {\n            const kingRow = king.cell.row\n            const kingCol = king.cell.col\n            const newRow = this.cell.row + 1 * this.colour\n            const newCol = this.cell.col + 1\n            const newColOpp = this.cell.col - 1\n            return newRow === kingRow && (newCol === kingCol || newColOpp === kingCol)\n        }\n\n        /**\n         * Moves the piece\n         */\n        movePiece = (move, boardObject) => {\n            const board = boardObject.getBoard()\n            const newRow = move.newCell.row\n            const newCol = move.newCell.col\n            // const old = board[move.oldCell.row][move.oldCell.col]\n            // promotion\n            if (move.isEnPassant) {\n                const prevMove = boardObject.moves.slice(-1)[0]\n                const oldPiece = board[prevMove.newCell.row][prevMove.newCell.col]\n                if (oldPiece !== null) {\n                    move.ate = oldPiece\n                }\n                board[prevMove.newCell.row][prevMove.newCell.col] = null\n            }\n            const oldPiece = board[newRow][newCol]\n            if (oldPiece !== null) {\n                move.ate = oldPiece\n            }\n            board[newRow][newCol] = this\n            board[move.oldCell.row][move.oldCell.col] = null\n            this.cell = new Cell(newRow, newCol)\n            if (move.isPromotion) {\n                board[newRow][newCol] = new Queen(this.colour, this.cell)\n            }\n        }\n\n        getString = () => {\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\n            return colourString + \"p\"\n        }\n    }\n    class Queen extends Piece {\n        directions = [[1,1], [-1,-1], [1,-1],[-1,1], [0,1], [1,0], [0,-1],[-1,0]]\n        points = 900\n        name = Piece.QUEEN\n\n        whiteScore = [\n            [-20,-10,-10, -5, -5,-10,-10,-20],\n            [-10,  0,  0,  0,  0,  0,  0,-10],\n            [-10,  0,  5,  5,  5,  5,  0,-10],\n            [-5,  0,  5,  5,  5,  5,  0, -5],\n            [0,  0,  5,  5,  5,  5,  0, -5],\n            [-10,  5,  5,  5,  5,  5,  0,-10],\n            [-10,  0,  5,  0,  0,  0,  0,-10],\n            [-20,-10,-10, -5, -5,-10,-10,-20]\n        ]\n        blackScore = [\n            [-20,-10,-10, -5, -5,-10,-10,-20],\n            [-10,  0,  5,  0,  0,  0,  0,-10],\n            [-10,  5,  5,  5,  5,  5,  0,-10],\n            [0,  0,  5,  5,  5,  5,  0, -5],\n            [-5,  0,  5,  5,  5,  5,  0, -5],\n            [-10,  0,  5,  5,  5,  5,  0,-10],\n            [-10,  0,  0,  0,  0,  0,  0,-10],\n            [-20,-10,-10, -5, -5,-10,-10,-20],\n        ]\n        constructor(colour, cell) {\n            super(colour, cell)\n\n        }\n\n        /**\n         * Returns valid moves of a piece (move object)\n         * @param board chess board, object\n         */\n        getMoves = (board) => {\n            const moves = []\n            for (const direction of this.directions) {\n                const currentRow = this.cell.row\n                const currentCol = this.cell.col\n                const row = direction[0]\n                const col = direction[1]\n                let newRow = row + currentRow\n                let newCol = col + currentCol\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\n                        moves.push(move)\n                    if (board.canEat(newRow, newCol, this.colour)) {\n                        break\n                    }\n                    newRow +=row\n                    newCol +=col\n                }\n            }\n            return moves\n        }\n        isCheck = (board, king) => {\n            const row = this.cell.row\n            const col = this.cell.col\n            const kingRow = king.cell.row\n            const kingCol = king.cell.col\n            const rowDiff = Math.abs(row - kingRow)\n            const colDiff = Math.abs(col - kingCol)\n            if ((rowDiff !== colDiff) && kingCol !== col && kingRow !== row) {\n                return false\n            }\n            const currentRow = this.cell.row\n            const currentCol = this.cell.col\n            for (const direction of this.directions) {\n                const row = direction[0]\n                const col = direction[1]\n                let newRow = row + currentRow\n                let newCol = col + currentCol\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\n                    if (board.canEat(newRow, newCol, this.colour)) {\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\n                            return true\n                        }\n                        break;\n                    }\n                    newRow +=row\n                    newCol +=col\n                }\n            }\n            return false\n\n        }\n\n        /**\n         * Moves the piece, updates the board object as well\n         */\n        movePiece = (move, boardObject) => {\n            const board = boardObject.getBoard()\n            const newRow = move.newCell.row\n            const newCol = move.newCell.col\n            const oldPiece = board[newRow][newCol]\n            if (oldPiece !== null) {\n                move.ate = oldPiece\n            }\n            board[newRow][newCol] = this\n            board[move.oldCell.row][move.oldCell.col] = null\n            this.cell = new Cell(newRow, newCol)\n        }\n\n        getString = () => {\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\n            return colourString + \"q\"\n        }\n    }\n    class Rook extends Piece {\n        directions = [[0,1], [1,0], [0,-1],[-1,0]]\n        points = 500\n        name = Piece.ROOK\n        whiteScore = [\n            [0,  0,  0,  0,  0,  0,  0,  0],\n            [5, 10, 10, 10, 10, 10, 10,  5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [0,  0,  0,  5,  5,  0,  0,  0]\n        ]\n        blackScore = [\n            [0,  0,  4,  5,  5,  10,  0,  0],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [-5,  0,  0,  0,  0,  0,  0, -5],\n            [5, 10, 10, 10, 10, 10, 10,  5],\n            [0,  0,  0,  0,  0,  0,  0,  0],\n        ]\n        constructor(colour, cell) {\n            super(colour, cell)\n\n        }\n\n        /**\n         * Returns valid moves of a piece (move object)\n         * @param board chess board, object\n         */\n        getMoves = (board) => {\n            const moves = []\n            for (const direction of this.directions) {\n                const currentRow = this.cell.row\n                const currentCol = this.cell.col\n                const row = direction[0]\n                const col = direction[1]\n                let newRow = row + currentRow\n                let newCol = col + currentCol\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\n                    const move = new Move(new Cell(currentRow, currentCol), new Cell(newRow, newCol), this)\n                        moves.push(move)\n                    if (board.canEat(newRow, newCol, this.colour)) {\n                        break\n                    }\n                    newRow +=row\n                    newCol +=col\n                }\n            }\n            return moves\n        }\n        isCheck = (board, king) => {\n            const row = this.cell.row\n            const col = this.cell.col\n            const kingRow = king.cell.row\n            const kingCol = king.cell.col\n            if (kingCol !== col && kingRow !== row) {\n                return false\n            }\n            for (const direction of this.directions) {\n                const currentRow = this.cell.row\n                const currentCol = this.cell.col\n                const row = direction[0]\n                const col = direction[1]\n                let newRow = row + currentRow\n                let newCol = col + currentCol\n                while (board.canMove(newRow, newCol) || board.canEat(newRow, newCol, this.colour)) {\n                    if (board.canEat(newRow, newCol, this.colour)) {\n                        if (board.getPiece(newRow, newCol).name === Piece.KING) {\n                            return true\n                        }\n                        break\n                    }\n                    newRow +=row\n                    newCol +=col\n                }\n            }\n            return false\n\n        }\n        /**\n         * Moves the piece, updates the board object as well\n         */\n        movePiece = (move, boardObject) => {\n            const board = boardObject.getBoard()\n            const newRow = move.newCell.row\n            const newCol = move.newCell.col\n            const oldPiece = board[newRow][newCol]\n            if (oldPiece !== null) {\n                move.ate = oldPiece\n            }\n\n            board[newRow][newCol] = this\n            board[move.oldCell.row][move.oldCell.col] = null\n            this.cell = new Cell(newRow, newCol)\n        }\n\n        getString = () => {\n            const colourString = this.colour === Piece.WHITE ? \"w\" : \"b\"\n            return colourString + \"r\"\n        }\n    }\n\n        // try {\n            const data = message.data\n            const boardString = data[0]\n            const depth = data[1]\n            const moveString = data[2]\n            const colour = data[3]\n            const pv = data[4]\n            totalMoves = moveString.length\n            if (totalMoves === 0) {\n                if (colour === Piece.WHITE) {\n                    // equal chance to play d4, e4\n                    const moves = [\n                        new Move(new Cell(6, 3), new Cell(4,3), new Pawn(Piece.WHITE, new Cell(6, 3))),\n                        new Move(new Cell(6, 4), new Cell(4,4), new Pawn(Piece.WHITE, new Cell(6, 4))),\n                    ]\n                    const randomIndex = Math.round(Math.random() * (moves.length - 1))\n\n                    postMessage(moves[randomIndex].getMoveString())\n                }\n            } else if (totalMoves === 1) {\n                // equal chance to play c5 / e5, in response to e4\n                const getMove = moveString.map(x => Move.parseMove(undefined, x))[0]\n                if (getMove.oldCell.row === 6 && getMove.oldCell.col === 4 && getMove.newCell.row === 4 && getMove.newCell.col === 4) {\n                    const moves = [\n                        new Move(new Cell(1, 2), new Cell(3,2), new Pawn(Piece.BLACK, new Cell(1, 2))),\n                        new Move(new Cell(1, 4), new Cell(3,4), new Pawn(Piece.BLACK, new Cell(1, 4))),\n                    ]\n                    const randomIndex = Math.round(Math.random() * (moves.length - 1))\n\n                    postMessage(moves[randomIndex].getMoveString())\n                } else {\n                    const nextMove = ab(boardString, depth, moveString, colour, pv)\n                    postMessage(nextMove)\n                }\n            } else {\n                const nextMove = ab(boardString, depth, moveString, colour, pv)\n                postMessage(nextMove)\n            }\n        // } catch (e) {\n        //     postMessage({isError: true, message:\"Error: \" + e})\n        // }\n\n}\n// eslint-disable-next-line no-restricted-globals,no-undef\nself.addEventListener(\"message\", test);\n"],"names":["totalMoves","self","addEventListener","async","message","mem","Map","whiteCanCastle","blackCanCastle","pv_length","Array","from","length","x","pv_table","startTime","currentPv","CHECK_THRESHOLD","nodes","branch","ab","boardString","depth","moveString","colour","pv","bestMove","copyBoard","Board","setBoardString","moves","map","Move","parseMove","i","prev","isEndGame","console","log","setEndGame","updatePieceValues","set","result","performance","now","miniMax","Number","MAX_VALUE","newCell","end","arr","push","getMoveString","board","alpha","beta","maxPlayer","currentPlayer","ply","getAllMoves","moveOrderRoot","maxEval","legal","move","movePiece","piece","isIllegal","undoMove","undefined","currentEval","miniMaxCore","next_ply","Math","max","isCheck","minEval","min","prevMoves","isLeftMost","branchLocal","getScore","moveOrder","ate","get","find","e","isEqualMove","j","MAX_KILLER","sort","a","b","pvMove","points","Piece","WHITE","whiteScore","row","col","blackScore","memSlot","slot","killerMove","oldCell","constructor","this","newBoard","Rook","BLACK","Cell","Knight","Bishop","Queen","King","Pawn","getPiece","whiteScoreEnd","blackScoreEnd","kingHasMoved","rookHasMoved","KING_SIDE","QUEEN_SIDE","whitePawnCount","blackPawnCount","openFiles","hasPawn","openCol","openRow","past","doubled","countWhitePieces","countBlackPieces","countWhiteQueen","countBlackQueen","newRow","pieceString","actualColour","slice","getBoardHash","str","isEmpty","getString","getBoard","isOutSide","isUnderCheck","canEat","canMove","canKingMove","directions","direction","newCol","name","KING","pop","prevRow","prevCol","getBoardString","cell","isEnPassant","isPromotion","castle","isCastle","rook","side","ROOK","castlingSquaresIsEmpty","cols","king","opp","moveRow","moveCol","squares","getMoves","concat","scanSquaresScore","score","materialScore","oldCellRow","oldCellCol","newCellRow","newCellCol","static","data","parsePieceString","rookObj","BISHOP","super","currentRow","currentCol","kingRow","kingCol","abs","boardObject","oldPiece","KNIGHT","rowDiff","colDiff","PAWN","prevMove","newColOpp","QUEEN","randomIndex","round","random","postMessage","getMove","nextMove"],"sourceRoot":""}