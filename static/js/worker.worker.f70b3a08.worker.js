!function(){let e=0,l=new Map;self.addEventListener("message",(async t=>{let o=0;e%2===0&&(l=new Map),e++;const s=(e,l)=>e.getScore(l),n=e=>e===u.BLACK?u.WHITE:u.BLACK,c=(e,l,t,o,s,w,h)=>{if(0===l){return[null,r(t,o,e,h,2)]}const a=e.isGameOver(h);if(a.isGameOver&&h===w)return[null,-Number.MAX_VALUE];if(a.isGameOver&&h!==w)return[null,Number.MAX_VALUE];const u=a.allMoves;u.sort(i);const C=Math.floor(Math.random()*(u.length-1));let d=u.length>0?u[C]:null;if(s){let s=-Number.MAX_VALUE;for(const i of u){e.movePiece(i.piece,i);const r=c(e,l-1,t,o,!1,w,n(h))[1];if(e.undoMove(),r>s&&(s=r,d=i),o<=(t=Math.max(t,r)))break}return[d,s]}{let s=Number.MAX_VALUE;for(const i of u){e.movePiece(i.piece,i);const r=c(e,l-1,t,o,!0,w,n(h))[1];if(e.undoMove(),r<s&&(s=r,d=i),(o=Math.min(o,r))<=t)break}return[d,s]}},i=(e,l)=>{if(null!==e.ate&&null!==l.ate){return e.piece.points-e.ate.points<l.piece.points-l.ate.points?1:-1}return null!==e.ate?-1:null!==l.ate?1:0},r=(e,t,c,w,h)=>{let a;const u=c.getBoardHash()+w.toString();if(l.has(u)?(o++,a=l.get(u)):(a=s(c,w),l.set(u,a)),0===h)return a;if(a>=t)return t;e=Math.max(e,a);const C=c.getAllMoves(w);C.sort(i);for(const l of C)if(null!==l.ate&&l.ate.points>l.piece.points){c.movePiece(l.piece,l);let o=-r(-t,-e,c,n(w),h-1);if(c.undoMove(),o>=t)return t;o>e&&(e=o)}return e};class w{board;constructor(){this.board=this.newBoard(),this.moves=[]}newBoard=()=>[[new v(u.BLACK,new h(0,0)),new f(u.BLACK,new h(0,1)),new C(u.BLACK,new h(0,2)),new g(u.BLACK,new h(0,3)),new d(u.BLACK,new h(0,4)),new C(u.BLACK,new h(0,5)),new f(u.BLACK,new h(0,6)),new v(u.BLACK,new h(0,7))],[new p(u.BLACK,new h(1,0)),new p(u.BLACK,new h(1,1)),new p(u.BLACK,new h(1,2)),new p(u.BLACK,new h(1,3)),new p(u.BLACK,new h(1,4)),new p(u.BLACK,new h(1,5)),new p(u.BLACK,new h(1,6)),new p(u.BLACK,new h(1,7))],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[new p(u.WHITE,new h(6,0)),new p(u.WHITE,new h(6,1)),new p(u.WHITE,new h(6,2)),new p(u.WHITE,new h(6,3)),new p(u.WHITE,new h(6,4)),new p(u.WHITE,new h(6,5)),new p(u.WHITE,new h(6,6)),new p(u.WHITE,new h(6,7))],[new v(u.WHITE,new h(7,0)),new f(u.WHITE,new h(7,1)),new C(u.WHITE,new h(7,2)),new g(u.WHITE,new h(7,3)),new d(u.WHITE,new h(7,4)),new C(u.WHITE,new h(7,5)),new f(u.WHITE,new h(7,6)),new v(u.WHITE,new h(7,7))]];deepCopyBoard=()=>{};setBoardString=e=>{const l=[];for(let t=0;t<8;t++){const o=[];for(let l=0;l<8;l++){const s=e[t][l];if(null===s)o.push(null);else{const e="w"===s.slice(0,1)?u.WHITE:u.BLACK,n=s.slice(1,2);"b"===n?o.push(new C(e,new h(t,l))):"k"===n?o.push(new d(e,new h(t,l))):"n"===n?o.push(new f(e,new h(t,l))):"p"===n?o.push(new p(e,new h(t,l))):"q"===n?o.push(new g(e,new h(t,l))):"r"===n?o.push(new v(e,new h(t,l))):o.push(null)}}l.push(o)}this.board=l};getBoardHash=()=>{let e="";for(let l=0;l<8;l++)for(let t=0;t<8;t++)this.isEmpty(l,t)?e+=" ":e+=this.getPiece(l,t).getString();return e};clonePiece=e=>e instanceof p?new p(e.colour,new h(e.cell.row,e.cell.col)):e instanceof C?new C(e.colour,new h(e.cell.row,e.cell.col)):e instanceof d?new d(e.colour,new h(e.cell.row,e.cell.col)):e instanceof f?new f(e.colour,new h(e.cell.row,e.cell.col)):e instanceof g?new g(e.colour,new h(e.cell.row,e.cell.col)):e instanceof v?new v(e.colour,new h(e.cell.row,e.cell.col)):null;getBoard=()=>this.board;getPiece=(e,l)=>this.board[e][l];isEmpty=(e,l)=>!this.isOutSide(e,l)&&null===this.board[e][l];isUnderCheck=e=>!1;isOutSide=(e,l)=>e<0||l<0||e>7||l>7;canEat=(e,l,t)=>!this.isOutSide(e,l)&&!this.isEmpty(e,l)&&this.getPiece(e,l).colour!==t;canEatDefend=(e,l)=>!this.isOutSide(e,l)&&!this.isEmpty(e,l);canMove=(e,l)=>!this.isOutSide(e,l)&&this.isEmpty(e,l);canKingMove=(e,l,t)=>{const o=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];for(const s of o){const o=e+s[0],n=l+s[1];if(!this.isOutSide(o,n)&&!this.isEmpty(o,n)&&this.getPiece(o,n).name===u.KING&&this.getPiece(o,n).colour!==t)return!1}return!0};getAttackingSquares=e=>{const l=[];for(let t=0;t<8;t++)for(let o=0;o<8;o++)if(!this.isEmpty(t,o)){const s=this.getPiece(t,o);if(s.colour!==e&&s.name!==u.KING){const e=s.getAttack(this);l.push.apply(l,e)}}return[l,[]]};movePiece=(e,l)=>{const t=this.board[l.oldCell.row][l.oldCell.col].movePiece(l,this);return this.moves.push(l),t};undoMove=()=>{if(this.moves.length>0){const e=this.moves.pop(),l=e.oldCell.row,t=e.oldCell.col,o=this.board[e.newCell.row][e.newCell.col];return this.board[l][t]=o,o.moves.pop(),o.cell.row=l,o.cell.col=t,e.isEnPassant?(this.board[e.ate.cell.row][e.ate.cell.col]=e.ate,this.board[e.newCell.row][e.newCell.col]=null,!0):(e.isPromotion?this.board[l][t]=new p(o.colour,o.cell,o.moves):e.castle.isCastle&&(this.board[e.castle.rook.oldCell.row][e.castle.rook.oldCell.col]=e.castle.rook.piece,e.castle.rook.piece.cell.row=e.castle.rook.oldCell.row,e.castle.rook.piece.cell.col=e.castle.rook.oldCell.col,this.board[e.castle.rook.newCell.row][e.castle.rook.newCell.col]=null),this.board[e.newCell.row][e.newCell.col]=e.ate,!0)}return!1};kingHasMoved=e=>{for(const l of this.moves)if(l.piece.name===u.KING&&l.piece.colour===e)return!0;return!1};rookHasMoved=(e,l)=>{const t=e===u.BLACK?0:7,o=l===d.KING_SIDE?7:0;if(null===this.getPiece(t,o)||this.getPiece(t,o).name!==u.ROOK)return!0;for(const s of this.moves)if(s.piece.name===u.ROOK&&s.piece.colour===e&&s.oldCell.row===t&&s.oldCell.col===o)return!0;return!1};castlingSquaresIsEmpty=(e,l)=>{const t=e===u.BLACK?0:7,o=l===d.KING_SIDE?[5,6]:[1,2,3];for(const s of o)if(!this.isEmpty(t,s))return!1;return!0};castlingSquaresUnderAttack=(e,l,t)=>{const o=e===u.BLACK?0:7,s=l===d.KING_SIDE?[4,5,6]:[1,2,3,4];for(const n of s)for(const e of t)if(e.newCell.row===o&&e.newCell.col===n)return!0;return!1};canCastle=(e,l,t)=>this.castlingSquaresIsEmpty(e,l)&&!this.castlingSquaresUnderAttack(e,l,t)&&!this.rookHasMoved(e,l)&&!this.kingHasMoved(e);promotePiece=e=>{const l=e.cell.row,t=e.cell.col;this.board[l][t]=e};isCheck=(e,l=null)=>{const t=null===l?this.getAttackingSquares(e)[0]:l;for(const o of t){const l=this.getPiece(o.newCell.row,o.newCell.col);if(null!==l&&l.name===u.KING&&l.colour===e)return!0}return!1};willCheck=(e,l)=>(this.movePiece(e,l),this.isCheck(e.colour)?(this.undoMove(),!0):(this.undoMove(),!1));getAllMoves=e=>{let l=[];for(let t=0;t<8;t++)for(let o=0;o<8;o++){null!==this.board[t][o]&&this.getPiece(t,o).colour===e&&(l=l.concat(this.getPiece(t,o).getMoves(this)))}return l};isRepeatPosition=e=>{const l=e;if(this.moves.length>=l){const e=this.moves.slice(-l);let t=e[0],o=e[1];for(let s=2;s<l;s+=4){const l=e[s],n=e[s+1];if(l.newCell.row!==t.oldCell.row||l.newCell.col!==t.oldCell.col||t.piece!==l.piece)return!1;if(n.newCell.row!==o.oldCell.row||n.newCell.col!==o.oldCell.col||o.piece!==n.piece)return!1}return!0}return!1};isGameOver=e=>{const l=this.getAllMoves(e),t=e===u.BLACK?"White":"Black";return l.length<=0?{isGameOver:!0,message:t+" wins by checkmate",allMoves:l}:{isGameOver:!1,message:"",allMoves:l}};getAllMoves=e=>{let l=[];for(let t=0;t<8;t++)for(let o=0;o<8;o++)if(!this.isEmpty(t,o)&&this.getPiece(t,o).colour===e){const e=this.getPiece(t,o).getMoves(this);l=l.concat(e)}return l};scanSquaresScore=e=>{let l=0,t=0;for(let o=0;o<8;o++)for(let e=0;e<8;e++){const s=this.getPiece(o,e);null!==s&&(s.colour===u.WHITE?t+=s.points:t-=s.points,s.colour===u.WHITE?l+=s.whiteScore[o][e]:l-=s.blackScore[o][e],s.name===u.PAWN&&s.colour===u.WHITE?this.isEmpty(o+1,e)||this.getPiece(o+1,e).name!==u.PAWN||s.colour!==u.WHITE||(l-=20):s.name===u.PAWN&&s.colour!==u.WHITE&&(this.isEmpty(o-1,e)||this.getPiece(o-1,e).name!==u.PAWN||s.colour===u.WHITE||(l+=20)))}return l+t};getScore=e=>{e===u.WHITE?u.BLACK:u.WHITE;return this.scanSquaresScore(e)*e*-1};getBoardString=()=>{const e=[];for(let l=0;l<8;l++){const t=[];for(let e=0;e<8;e++){const o=this.getPiece(l,e);null!==o?t.push(o.getString()):t.push(null)}e.push(t)}return e}}class h{constructor(e,l){this.row=e,this.col=l}}class a{oldCell;newCell;constructor(e,l,t,o=!1,s={isCastle:!1},n=null,c=!1){this.oldCell=e,this.newCell=l,this.piece=t,this.isEnPassant=o,this.castle=s,this.ate=n,this.isPromotion=c}getMoveString=()=>({oldCellRow:this.oldCell.row,oldCellCol:this.oldCell.col,newCellRow:this.newCell.row,newCellCol:this.newCell.col,pieceString:this.piece.getString(),isEnPassant:this.isEnPassant,castle:!1===this.castle.isCastle?{isCastle:!1}:{isCastle:!0,rook:{pieceString:this.castle.rook.piece.getString(),oldCellRow:this.castle.rook.oldCell.row,oldCellCol:this.castle.rook.oldCell.col,newCellRow:this.castle.rook.newCell.row,newCellCol:this.castle.rook.newCell.col}},ate:null!==this.ate?this.ate.getString():null,isPromotion:this.isPromotion});static parseMove=(e,l)=>{const t=new a(new h(l.oldCellRow,l.oldCellCol),new h(l.newCellRow,l.newCellCol),u.parsePieceString(l.pieceString),l.isEnPassant,{isCastle:!1},null,l.isPromotion);if(l.castle.isCastle){const o=l.castle.rook;t.castle.isCastle=!0,t.castle.rook=new a(new h(o.oldCellRow,o.oldCellCol),new h(o.newCellRow,o.newCellCol),e.getPiece(o.oldCellRow,o.oldCellCol))}return t}}class u{static WHITE=-1;static BLACK=1;static ROOK="r";static BISHOP="b";static KNIGHT="n";static KING="k";static QUEEN="q";static PAWN="p";isAlive=!0;constructor(e,l,t=[]){this.colour=e,this.cell=l,this.moves=t}static parsePieceString=e=>{const l="w"===e.slice(0,1)?u.WHITE:u.BLACK,t=e.slice(1,2);return"b"===t?new C(l,new h(0,0)):"k"===t?new d(l,new h(0,0)):"n"===t?new f(l,new h(0,0)):"p"===t?new p(l,new h(0,0)):"q"===t?new g(l,new h(0,0)):"r"===t?new v(l,new h(0,0)):null}}class C extends u{directions=[[1,1],[-1,-1],[1,-1],[-1,1]];points=330;name=u.BISHOP;whiteScore=[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,10,10,5,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,10,10,10,10,0,-10],[-10,10,10,10,10,10,10,-10],[-10,5,0,0,0,0,5,-10],[-20,-10,-10,-10,-10,-10,-10,-20]];blackScore=[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,5,0,0,0,0,5,-10],[-10,10,10,10,10,10,10,-10],[-10,0,10,10,10,10,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,5,10,10,5,0,-10],[-10,0,0,0,0,0,0,-10],[-20,-10,-10,-10,-10,-10,-10,-20]];constructor(e,l,t){super(e,l,t)}getMoves=e=>{const l=[];for(const t of this.directions){const o=this.cell.row,s=this.cell.col,n=t[0],c=t[1];let i=n+o,r=c+s;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const t=new a(this.cell,new h(i,r),this);if(e.willCheck(this,t)||l.push(t),e.canEat(i,r,this.colour))break;i+=n,r+=c}}return l};getAttack=e=>{const l=[];for(const t of this.directions){const o=this.cell.row,s=this.cell.col,n=t[0],c=t[1];let i=n+o,r=c+s;for(;(e.canMove(i,r)||e.canEatDefend(i,r))&&(l.push(new a(this.cell,new h(i,r),this)),!e.canEatDefend(i,r));)i+=n,r+=c}return l};movePiece=(e,l)=>{const t=l.getBoard(),o=e.newCell.row,s=e.newCell.col,n=t[o][s];return null!==n&&(e.ate=n),t[o][s]=this,t[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(o,s),this.moves.push(e),{row:o,col:s}};getString=()=>(this.colour===u.WHITE?"w":"b")+"b"}class d extends u{directions=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];static KING_SIDE="king";static QUEEN_SIDE="queen";name=u.KING;points=2e4;whiteScore=[[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-20,-30,-30,-40,-40,-30,-30,-20],[-10,-20,-20,-20,-20,-20,-20,-10],[20,20,0,0,0,0,20,20],[20,30,10,0,0,10,30,20]];blackScore=[[20,30,10,0,0,10,30,20],[20,20,0,0,0,0,20,20],[-10,-20,-20,-20,-20,-20,-20,-10],[-20,-30,-30,-40,-40,-30,-30,-20],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30]];constructor(e,l,t){super(e,l,t)}getMoves=e=>{const l=[],t=e.getAttackingSquares(this.colour)[0];for(const s of this.directions){const t=s[0],o=s[1],n=t+this.cell.row,c=o+this.cell.col;if((e.canEat(n,c,this.colour)||e.canMove(n,c))&&e.canKingMove(n,c,this.colour)){const t=new a(this.cell,new h(n,c),this);e.willCheck(this,t)||l.push(t)}}const o=l.filter((e=>{for(const l of t)if(e.newCell.row===l.newCell.row&&e.newCell.col===l.newCell.col)return!1;return!0}));if(e.canCastle(this.colour,d.KING_SIDE,t)){const l=this.colour===u.BLACK?0:7,t=6;o.push(new a(this.cell,new h(l,t),this,!1,{isCastle:!0,rook:new a(new h(l,7),new h(l,5),e.getPiece(l,7))}))}if(e.canCastle(this.colour,d.QUEEN_SIDE,t)){const l=this.colour===u.BLACK?0:7,t=2;o.push(new a(this.cell,new h(l,t),this,!1,{isCastle:!0,rook:new a(new h(l,0),new h(l,3),e.getPiece(l,0))}))}return o};getAttack=e=>this.getMoves(e);movePiece=(e,l)=>{const t=l.getBoard(),o=e.newCell.row,s=e.newCell.col;e.castle.isCastle&&(t[e.castle.rook.newCell.row][e.castle.rook.newCell.col]=e.castle.rook.piece,t[e.castle.rook.oldCell.row][e.castle.rook.oldCell.col]=null,e.castle.rook.piece.cell.row=e.castle.rook.newCell.row,e.castle.rook.piece.cell.col=e.castle.rook.newCell.col);const n=t[o][s];return null!==n&&(e.ate=n),t[o][s]=this,t[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(o,s),this.moves.push(e),{row:o,col:s}};getString=()=>(this.colour===u.WHITE?"w":"b")+"k"}class f extends u{directions=[[1,2],[1,-2],[2,1],[2,-1],[-1,2],[-1,-2],[-2,1],[-2,-1]];points=320;name=u.KNIGHT;whiteScore=[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,0,0,0,-20,-40],[-30,0,10,15,15,10,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,10,15,15,10,5,-30],[-40,-20,0,5,5,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]];blackScore=[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,5,5,0,-20,-40],[-30,5,10,15,15,10,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,10,15,15,10,0,-30],[-40,-20,0,0,0,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]];constructor(e,l,t){super(e,l,t)}getMoves=e=>{const l=[];for(const t of this.directions){const o=t[0],s=t[1],n=o+this.cell.row,c=s+this.cell.col;if(e.canEat(n,c,this.colour)||e.canMove(n,c)){const t=new a(this.cell,new h(n,c),this);e.willCheck(this,t)||l.push(t)}}return l};getAttack=e=>{const l=[];for(const t of this.directions){const o=t[0],s=t[1],n=o+this.cell.row,c=s+this.cell.col;(e.canEatDefend(n,c)||e.canMove(n,c))&&l.push(new a(this.cell,new h(n,c),this))}return l};movePiece=(e,l)=>{const t=l.getBoard(),o=e.newCell.row,s=e.newCell.col,n=t[o][s];return null!==n&&(e.ate=n),t[o][s]=this,t[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(o,s),this.moves.push(e),{row:o,col:s}};getString=()=>(this.colour===u.WHITE?"w":"b")+"n"}class p extends u{points=100;name=u.PAWN;whiteScore=[[0,0,0,0,0,0,0,0],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]];blackScore=[[0,0,0,0,0,0,0,0],[5,10,10,-40,-40,10,10,5],[5,10,20,0,0,-10,-5,5],[0,0,0,20,20,0,0,0],[5,5,10,25,25,10,5,5],[10,10,20,30,30,20,10,10],[50,50,50,50,50,50,50,50],[0,0,0,0,0,0,0,0]];constructor(e,l,t){super(e,l,t)}getMoves=e=>{const l=[];let t=this.cell.row+1*this.colour,o=this.cell.col;if(e.canMove(t,o)){const s=new a(this.cell,new h(t,o),this,void 0,void 0,void 0,0===t||7===t);if(e.willCheck(this,s)||l.push(s),t=this.cell.row+2*this.colour,e.canMove(t,o)&&this.moves.length<=0)if(this.colour===u.BLACK&&1===this.cell.row){const s=new a(this.cell,new h(t,o),this);e.willCheck(this,s)||l.push(s)}else if(this.colour===u.WHITE&&6===this.cell.row){const s=new a(this.cell,new h(t,o),this);e.willCheck(this,s)||l.push(s)}}if(t=this.cell.row+1*this.colour,o=this.cell.col+1,e.canEat(t,o,this.colour)){const s=new a(this.cell,new h(t,o),this,void 0,void 0,e.getPiece(t,o),0===t||7===t);e.willCheck(this,s)||l.push(s)}if(e.canMove(t,o)&&e.moves.length>0){const s=e.moves.slice(-1)[0];if(s.piece.name===u.PAWN&&s.newCell.row===this.cell.row&&s.newCell.col===this.cell.col+1&&2===Math.abs(s.newCell.row-s.oldCell.row)){const s=new a(this.cell,new h(t,o),this,!0);e.willCheck(this,s)||l.push(s)}}if(t=this.cell.row+1*this.colour,o=this.cell.col-1,e.canEat(t,o,this.colour)){const s=new a(this.cell,new h(t,o),this,void 0,void 0,e.getPiece(t,o),0===t||7===t);e.willCheck(this,s)||l.push(s)}if(e.canMove(t,o)&&e.moves.length>0){const s=e.moves.slice(-1)[0];if(s.piece.name===u.PAWN&&s.newCell.row===this.cell.row&&s.newCell.col===this.cell.col-1&&2===Math.abs(s.newCell.row-s.oldCell.row)){const s=new a(this.cell,new h(t,o),this,!0);e.willCheck(this,s)||l.push(s)}}return l};getAttack=e=>{const l=[];let t=this.cell.row+1*this.colour,o=this.cell.col+1;return(e.canMove(t,o)||e.canEatDefend(t,o))&&l.push(new a(this.cell,new h(t,o),this)),t=this.cell.row+1*this.colour,o=this.cell.col-1,(e.canMove(t,o)||e.canEatDefend(t,o))&&l.push(new a(this.cell,new h(t,o),this)),l};movePiece=(e,l)=>{const t=l.getBoard(),o=e.newCell.row,s=e.newCell.col;if(e.isEnPassant){const o=l.moves.slice(-1)[0],s=t[o.newCell.row][o.newCell.col];null!==s&&(e.ate=s),t[o.newCell.row][o.newCell.col]=null}const n=t[o][s];return null!==n&&(e.ate=n),t[o][s]=this,t[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(o,s),e.isPromotion?(t[o][s]=new g(this.colour,this.cell),{promotion:!0,row:o,col:s}):(this.moves.push(e),{row:o,col:s})};getString=()=>(this.colour===u.WHITE?"w":"b")+"p"}class g extends u{directions=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];points=900;name=u.QUEEN;whiteScore=[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,5,5,5,0,-10],[-5,0,5,5,5,5,0,-5],[0,0,5,5,5,5,0,-5],[-10,5,5,5,5,5,0,-10],[-10,0,5,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]];blackScore=[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,5,0,0,0,0,-10],[-10,5,5,5,5,5,0,-10],[0,0,5,5,5,5,0,-5],[-5,0,5,5,5,5,0,-5],[-10,0,5,5,5,5,0,-10],[-10,0,0,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]];constructor(e,l,t){super(e,l,t)}getMoves=e=>{const l=[];for(const t of this.directions){const o=this.cell.row,s=this.cell.col,n=t[0],c=t[1];let i=n+o,r=c+s;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const t=new a(this.cell,new h(i,r),this);if(e.willCheck(this,t)||l.push(t),e.canEat(i,r,this.colour))break;i+=n,r+=c}}return l};getAttack=e=>{const l=[];for(const t of this.directions){const o=this.cell.row,s=this.cell.col,n=t[0],c=t[1];let i=n+o,r=c+s;for(;(e.canMove(i,r)||e.canEatDefend(i,r))&&(l.push(new a(this.cell,new h(i,r),this)),!e.canEatDefend(i,r));)i+=n,r+=c}return l};movePiece=(e,l)=>{const t=l.getBoard(),o=e.newCell.row,s=e.newCell.col,n=t[o][s];return null!==n&&(e.ate=n),t[o][s]=this,t[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(o,s),this.moves.push(e),{row:o,col:s}};getString=()=>(this.colour===u.WHITE?"w":"b")+"q"}class v extends u{directions=[[0,1],[1,0],[0,-1],[-1,0]];points=500;name=u.ROOK;whiteScore=[[0,0,0,0,0,0,0,0],[5,10,10,10,10,10,10,5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[0,0,0,5,5,0,0,0]];blackScore=[[0,0,4,5,5,10,0,0],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[5,10,10,10,10,10,10,5],[0,0,0,0,0,0,0,0]];constructor(e,l,t){super(e,l,t)}getMoves=e=>{const l=[];for(const t of this.directions){const o=this.cell.row,s=this.cell.col,n=t[0],c=t[1];let i=n+o,r=c+s;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const t=new a(this.cell,new h(i,r),this);if(e.willCheck(this,t)||l.push(t),e.canEat(i,r,this.colour))break;i+=n,r+=c}}return l};getAttack=e=>{const l=[];for(const t of this.directions){const o=this.cell.row,s=this.cell.col,n=t[0],c=t[1];let i=n+o,r=c+s;for(;e.canMove(i,r)||e.canEatDefend(i,r);){const t=new a(this.cell,new h(i,r),this);if(l.push(t),e.canEatDefend(i,r))break;i+=n,r+=c}}return l};movePiece=(e,l)=>{const t=l.getBoard(),o=e.newCell.row,s=e.newCell.col,n=t[o][s];return null!==n&&(e.ate=n),t[o][s]=this,t[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(o,s),this.moves.push(e),{row:o,col:s}};getString=()=>(this.colour===u.WHITE?"w":"b")+"r"}try{const e=t.data,l=((e,l,t,s)=>{o=0;const n=new w;return n.setBoardString(e),n.moves=t.map((e=>a.parseMove(n,e))),c(n,l,-Number.MAX_VALUE,Number.MAX_VALUE,!0,s,s)[0]})(e[0],e[1],e[2],e[3]);postMessage(l.getMoveString())}catch(E){postMessage({isError:!0,message:"Error: "+E})}}))}();
//# sourceMappingURL=worker.worker.f70b3a08.worker.js.map