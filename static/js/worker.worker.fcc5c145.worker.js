!function(){let e=0,l=!1;self.addEventListener("message",(async o=>{let t=0;const n=(o,n,s,c)=>{const r=new w;r.setBoardString(o);const h=performance.now();r.moves=s.map((e=>a.parseMove(r,e))),l=r.isEndGame(),l&&(console.log("endgame"),r.setEndGame()),r.updatePieceValues();const u=new Map,C=i(r,n,-Number.MAX_VALUE,Number.MAX_VALUE,!0,c,c,n,u),d=performance.now();return console.log(d-h,e,t),console.log("Score",C[1]),C[0]},s=(e,l)=>e.getScore(l),c=e=>e===u.BLACK?u.WHITE:u.BLACK,i=(e,l,o,n,w,h,a,u,C)=>{if(t++,0===l){let l;const o=e.getBoardHash()+h.toString(),t=C.get(o);return void 0!==t?l=t:(l=s(e,h),C.set(o,l)),[null,l]}const d=e.isGameOver(a);if(d.isGameOver&&a===h)return[null,-Number.MAX_VALUE];if(d.isGameOver&&a!==h)return[null,Number.MAX_VALUE];const f=d.allMoves;f.sort(r);const g=Math.floor(Math.random()*(f.length-1));let p=f.length>0?f[g]:null;if(w){let t=-Number.MAX_VALUE;for(const s of f){e.movePiece(s.piece,s);const r=i(e,l-1,o,n,!1,h,c(a),u,C)[1];if(e.undoMove(),r>t&&(t=r,p=s),n<=(o=Math.max(o,r)))break}return[p,t]}{let t=Number.MAX_VALUE;for(const s of f){e.movePiece(s.piece,s);const r=i(e,l-1,o,n,!0,h,c(a),u,C)[1];if(e.undoMove(),r<t&&(t=r,p=s),(n=Math.min(n,r))<=o)break}return[p,t]}},r=(e,l)=>{if(null!==e.ate&&null!==l.ate){return e.piece.points-e.ate.points<l.piece.points-l.ate.points?-1:1}if(null!==e.ate)return-1;if(null!==l.ate)return 1;return(e.piece.colour===u.WHITE?e.piece.whiteScore[e.newCell.row][e.newCell.col]:e.piece.blackScore[e.newCell.row][e.newCell.col])<(l.piece.colour===u.WHITE?l.piece.whiteScore[l.newCell.row][l.newCell.col]:l.piece.blackScore[l.newCell.row][l.newCell.col])?1:-1};class w{board;constructor(){this.board=this.newBoard(),this.moves=[]}newBoard=()=>[[new E(u.BLACK,new h(0,0)),new f(u.BLACK,new h(0,1)),new C(u.BLACK,new h(0,2)),new p(u.BLACK,new h(0,3)),new d(u.BLACK,new h(0,4)),new C(u.BLACK,new h(0,5)),new f(u.BLACK,new h(0,6)),new E(u.BLACK,new h(0,7))],[new g(u.BLACK,new h(1,0)),new g(u.BLACK,new h(1,1)),new g(u.BLACK,new h(1,2)),new g(u.BLACK,new h(1,3)),new g(u.BLACK,new h(1,4)),new g(u.BLACK,new h(1,5)),new g(u.BLACK,new h(1,6)),new g(u.BLACK,new h(1,7))],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[new g(u.WHITE,new h(6,0)),new g(u.WHITE,new h(6,1)),new g(u.WHITE,new h(6,2)),new g(u.WHITE,new h(6,3)),new g(u.WHITE,new h(6,4)),new g(u.WHITE,new h(6,5)),new g(u.WHITE,new h(6,6)),new g(u.WHITE,new h(6,7))],[new E(u.WHITE,new h(7,0)),new f(u.WHITE,new h(7,1)),new C(u.WHITE,new h(7,2)),new p(u.WHITE,new h(7,3)),new d(u.WHITE,new h(7,4)),new C(u.WHITE,new h(7,5)),new f(u.WHITE,new h(7,6)),new E(u.WHITE,new h(7,7))]];setEndGame=()=>{for(let e=0;e<8;e++)for(let l=0;l<8;l++){const o=this.getPiece(e,l);null!==o&&void 0!==o.whiteScoreEnd&&(o.colour===u.WHITE?o.whiteScore=o.whiteScoreEnd:o.blackScore=o.blackScoreEnd)}};updatePieceValues=()=>{let e=0,l=0;for(let o=0;o<8;o++)for(let t=0;t<8;t++){const n=this.getPiece(o,t);null!==n&&n instanceof g&&(n.colour===u.WHITE?e++:l++)}for(let o=0;o<8;o++)for(let t=0;t<8;t++){const n=this.getPiece(o,t);if(null!==n&&(n instanceof f&&(n.points-=3*(16-e-l)),n instanceof C&&(n.points+=3*(16-e-l)),n instanceof E&&(n.points+=3*(16-e-l)),n instanceof g)){let e=!0;if(t+1<8)for(let o=0;o<8;o++)this.getPiece(o,t+1)instanceof g&&(e=!1);if(t-1>=0)for(let o=0;o<8;o++)this.getPiece(o,t-1)instanceof g&&(e=!1);e&&(n.points+=30);let l=!1;for(let t=0;t<8;t++)n instanceof g&&t!==o&&(l=!0);l&&(n.points-=10)}}};isEndGame=()=>{let e=0,l=0,o=0,t=0;for(let n=0;n<8;n++)for(let s=0;s<8;s++){const c=this.getPiece(n,s);c instanceof p&&(c.colour===u.WHITE?o++:t++),(c instanceof E||c instanceof C||c instanceof f)&&(c.colour===u.WHITE?e++:l++)}return o<=1&&e<=0||t<=1&&l<=0||e<=2&&o<=0||l<=2&&t<=0};setBoardString=e=>{const l=[];for(let o=0;o<8;o++){const t=[];for(let l=0;l<8;l++){const n=e[o][l];if(null===n)t.push(null);else{const e="w"===n.slice(0,1)?u.WHITE:u.BLACK,s=n.slice(1,2);"b"===s?t.push(new C(e,new h(o,l))):"k"===s?t.push(new d(e,new h(o,l))):"n"===s?t.push(new f(e,new h(o,l))):"p"===s?t.push(new g(e,new h(o,l))):"q"===s?t.push(new p(e,new h(o,l))):"r"===s?t.push(new E(e,new h(o,l))):t.push(null)}}l.push(t)}this.board=l};getBoardHash=()=>{let e="";for(let l=0;l<8;l++)for(let o=0;o<8;o++)this.isEmpty(l,o)?e+=" ":e+=this.getPiece(l,o).getString();return e};clonePiece=e=>e instanceof g?new g(e.colour,new h(e.cell.row,e.cell.col)):e instanceof C?new C(e.colour,new h(e.cell.row,e.cell.col)):e instanceof d?new d(e.colour,new h(e.cell.row,e.cell.col)):e instanceof f?new f(e.colour,new h(e.cell.row,e.cell.col)):e instanceof p?new p(e.colour,new h(e.cell.row,e.cell.col)):e instanceof E?new E(e.colour,new h(e.cell.row,e.cell.col)):null;getBoard=()=>this.board;getPiece=(e,l)=>this.board[e][l];isEmpty=(e,l)=>!this.isOutSide(e,l)&&null===this.board[e][l];isUnderCheck=e=>!1;isOutSide=(e,l)=>e<0||l<0||e>7||l>7;canEat=(e,l,o)=>!this.isOutSide(e,l)&&!this.isEmpty(e,l)&&this.getPiece(e,l).colour!==o;canEatDefend=(e,l)=>!this.isOutSide(e,l)&&!this.isEmpty(e,l);canMove=(e,l)=>!this.isOutSide(e,l)&&this.isEmpty(e,l);canKingMove=(e,l,o)=>{const t=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];for(const n of t){const t=e+n[0],s=l+n[1];if(!this.isOutSide(t,s)&&!this.isEmpty(t,s)&&this.getPiece(t,s).name===u.KING&&this.getPiece(t,s).colour!==o)return!1}return!0};getAttackingSquares=e=>{const l=[];for(let o=0;o<8;o++)for(let t=0;t<8;t++)if(!this.isEmpty(o,t)){const n=this.getPiece(o,t);if(n.colour!==e&&n.name!==u.KING){const e=n.getAttack(this);l.push.apply(l,e)}}return[l,[]]};movePiece=(e,l)=>{const o=this.board[l.oldCell.row][l.oldCell.col].movePiece(l,this);return this.moves.push(l),o};undoMove=()=>{if(this.moves.length>0){const e=this.moves.pop(),l=e.oldCell.row,o=e.oldCell.col,t=this.board[e.newCell.row][e.newCell.col];return this.board[l][o]=t,t.moves.pop(),t.cell.row=l,t.cell.col=o,e.isEnPassant?(this.board[e.ate.cell.row][e.ate.cell.col]=e.ate,this.board[e.newCell.row][e.newCell.col]=null,!0):(e.isPromotion?this.board[l][o]=new g(t.colour,t.cell,t.moves):e.castle.isCastle&&(this.board[e.castle.rook.oldCell.row][e.castle.rook.oldCell.col]=e.castle.rook.piece,e.castle.rook.piece.cell.row=e.castle.rook.oldCell.row,e.castle.rook.piece.cell.col=e.castle.rook.oldCell.col,this.board[e.castle.rook.newCell.row][e.castle.rook.newCell.col]=null),this.board[e.newCell.row][e.newCell.col]=e.ate,!0)}return!1};kingHasMoved=e=>{for(const l of this.moves)if(l.piece.name===u.KING&&l.piece.colour===e)return!0;return!1};rookHasMoved=(e,l)=>{const o=e===u.BLACK?0:7,t=l===d.KING_SIDE?7:0;if(null===this.getPiece(o,t)||this.getPiece(o,t).name!==u.ROOK)return!0;for(const n of this.moves)if(n.piece.name===u.ROOK&&n.piece.colour===e&&n.oldCell.row===o&&n.oldCell.col===t)return!0;return!1};castlingSquaresIsEmpty=(e,l)=>{const o=e===u.BLACK?0:7,t=l===d.KING_SIDE?[5,6]:[1,2,3];for(const n of t)if(!this.isEmpty(o,n))return!1;return!0};castlingSquaresUnderAttack=(e,l,o)=>{const t=e===u.BLACK?0:7,n=l===d.KING_SIDE?[4,5,6]:[1,2,3,4];for(const s of n)for(const e of o)if(e.newCell.row===t&&e.newCell.col===s)return!0;return!1};canCastle=(e,l,o)=>this.castlingSquaresIsEmpty(e,l)&&!this.castlingSquaresUnderAttack(e,l,o)&&!this.rookHasMoved(e,l)&&!this.kingHasMoved(e);promotePiece=e=>{const l=e.cell.row,o=e.cell.col;this.board[l][o]=e};isCheck=(e,l=null)=>{const o=null===l?this.getAttackingSquares(e)[0]:l;for(const t of o){const l=this.getPiece(t.newCell.row,t.newCell.col);if(null!==l&&l.name===u.KING&&l.colour===e)return!0}return!1};willCheck=(e,l)=>(this.movePiece(e,l),this.isCheck(e.colour)?(this.undoMove(),!0):(this.undoMove(),!1));getAllMoves=e=>{let l=[];for(let o=0;o<8;o++)for(let t=0;t<8;t++){null!==this.board[o][t]&&this.getPiece(o,t).colour===e&&(l=l.concat(this.getPiece(o,t).getMoves(this)))}return l};isRepeatPosition=e=>{const l=e;if(this.moves.length>=l){const e=this.moves.slice(-l);let o=e[0],t=e[1];for(let n=2;n<l;n+=4){const l=e[n],s=e[n+1];if(l.newCell.row!==o.oldCell.row||l.newCell.col!==o.oldCell.col||o.piece!==l.piece)return!1;if(s.newCell.row!==t.oldCell.row||s.newCell.col!==t.oldCell.col||t.piece!==s.piece)return!1}return!0}return!1};isGameOver=e=>{const l=this.getAllMoves(e),o=e===u.BLACK?"White":"Black";return l.length<=0?{isGameOver:!0,message:o+" wins by checkmate",allMoves:l}:{isGameOver:!1,message:"",allMoves:l}};getAllMoves=e=>{let l=[];for(let o=0;o<8;o++)for(let t=0;t<8;t++)if(!this.isEmpty(o,t)&&this.getPiece(o,t).colour===e){const e=this.getPiece(o,t).getMoves(this);l=l.concat(e)}return l};scanSquaresScore=e=>{let l=0,o=0;for(let t=0;t<8;t++)for(let e=0;e<8;e++){const n=this.getPiece(t,e);null!==n&&(n.colour===u.WHITE?o+=n.points:o-=n.points,n.colour===u.WHITE?l+=n.whiteScore[t][e]:l-=n.blackScore[t][e])}return l+o};getScore=e=>{e===u.WHITE?u.BLACK:u.WHITE;return this.scanSquaresScore(e)*e*-1};getBoardString=()=>{const e=[];for(let l=0;l<8;l++){const o=[];for(let e=0;e<8;e++){const t=this.getPiece(l,e);null!==t?o.push(t.getString()):o.push(null)}e.push(o)}return e}}class h{constructor(e,l){this.row=e,this.col=l}}class a{oldCell;newCell;constructor(e,l,o,t=!1,n={isCastle:!1},s=null,c=!1){this.oldCell=e,this.newCell=l,this.piece=o,this.isEnPassant=t,this.castle=n,this.ate=s,this.isPromotion=c}getMoveString=()=>({oldCellRow:this.oldCell.row,oldCellCol:this.oldCell.col,newCellRow:this.newCell.row,newCellCol:this.newCell.col,pieceString:this.piece.getString(),isEnPassant:this.isEnPassant,castle:!1===this.castle.isCastle?{isCastle:!1}:{isCastle:!0,rook:{pieceString:this.castle.rook.piece.getString(),oldCellRow:this.castle.rook.oldCell.row,oldCellCol:this.castle.rook.oldCell.col,newCellRow:this.castle.rook.newCell.row,newCellCol:this.castle.rook.newCell.col}},ate:null!==this.ate?this.ate.getString():null,isPromotion:this.isPromotion});static parseMove=(e,l)=>{const o=new a(new h(l.oldCellRow,l.oldCellCol),new h(l.newCellRow,l.newCellCol),u.parsePieceString(l.pieceString),l.isEnPassant,{isCastle:!1},null,l.isPromotion);if(l.castle.isCastle){const t=l.castle.rook;o.castle.isCastle=!0,o.castle.rook=new a(new h(t.oldCellRow,t.oldCellCol),new h(t.newCellRow,t.newCellCol),e.getPiece(t.oldCellRow,t.oldCellCol))}return o}}class u{static WHITE=-1;static BLACK=1;static ROOK="r";static BISHOP="b";static KNIGHT="n";static KING="k";static QUEEN="q";static PAWN="p";constructor(e,l,o=[]){this.colour=e,this.cell=l,this.moves=o}static parsePieceString=e=>{const l="w"===e.slice(0,1)?u.WHITE:u.BLACK,o=e.slice(1,2);return"b"===o?new C(l,new h(0,0)):"k"===o?new d(l,new h(0,0)):"n"===o?new f(l,new h(0,0)):"p"===o?new g(l,new h(0,0)):"q"===o?new p(l,new h(0,0)):"r"===o?new E(l,new h(0,0)):null}}class C extends u{directions=[[1,1],[-1,-1],[1,-1],[-1,1]];points=330;name=u.BISHOP;whiteScore=[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,10,10,5,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,10,10,10,10,0,-10],[-10,10,10,10,10,10,10,-10],[-10,5,0,0,0,0,5,-10],[-20,-10,-10,-10,-10,-10,-10,-20]];blackScore=[[-20,-10,-10,-10,-10,-10,-10,-20],[-10,5,0,0,0,0,5,-10],[-10,10,10,10,10,10,10,-10],[-10,0,10,10,10,10,0,-10],[-10,5,5,10,10,5,5,-10],[-10,0,5,10,10,5,0,-10],[-10,0,0,0,0,0,0,-10],[-20,-10,-10,-10,-10,-10,-10,-20]];constructor(e,l,o){super(e,l,o)}getMoves=e=>{const l=[];for(const o of this.directions){const t=this.cell.row,n=this.cell.col,s=o[0],c=o[1];let i=s+t,r=c+n;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const o=new a(this.cell,new h(i,r),this);if(e.willCheck(this,o)||l.push(o),e.canEat(i,r,this.colour))break;i+=s,r+=c}}return l};getAttack=e=>{const l=[];for(const o of this.directions){const t=this.cell.row,n=this.cell.col,s=o[0],c=o[1];let i=s+t,r=c+n;for(;(e.canMove(i,r)||e.canEatDefend(i,r))&&(l.push(new a(this.cell,new h(i,r),this)),!e.canEatDefend(i,r));)i+=s,r+=c}return l};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col,s=o[t][n];return null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n),this.moves.push(e),{row:t,col:n}};getString=()=>(this.colour===u.WHITE?"w":"b")+"b"}class d extends u{directions=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];static KING_SIDE="king";static QUEEN_SIDE="queen";name=u.KING;points=2e4;whiteScore=[[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-20,-30,-30,-40,-40,-30,-30,-20],[-10,-20,-20,-20,-20,-20,-20,-10],[20,20,0,0,0,0,20,20],[20,30,10,0,0,10,30,20]];blackScore=[[20,30,10,0,0,10,30,20],[20,20,0,0,0,0,20,20],[-10,-20,-20,-20,-20,-20,-20,-10],[-20,-30,-30,-40,-40,-30,-30,-20],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30],[-30,-40,-40,-50,-50,-40,-40,-30]];whiteScoreEnd=[[-50,-40,-30,-20,-20,-30,-40,-50],[-30,-20,-10,0,0,-10,-20,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-30,0,0,0,0,-30,-30],[-50,-30,-30,-30,-30,-30,-30,-50]];blackScoreEnd=[[-50,-30,-30,-30,-30,-30,-30,-50],[-30,-30,0,0,0,0,-30,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,30,40,40,30,-10,-30],[-30,-10,20,30,30,20,-10,-30],[-30,-20,-10,0,0,-10,-20,-30],[-50,-40,-30,-20,-20,-30,-40,-50]];constructor(e,l,o){super(e,l,o)}getMoves=e=>{const l=[],o=e.getAttackingSquares(this.colour)[0];for(const n of this.directions){const o=n[0],t=n[1],s=o+this.cell.row,c=t+this.cell.col;if((e.canEat(s,c,this.colour)||e.canMove(s,c))&&e.canKingMove(s,c,this.colour)){const o=new a(this.cell,new h(s,c),this);e.willCheck(this,o)||l.push(o)}}const t=l.filter((e=>{for(const l of o)if(e.newCell.row===l.newCell.row&&e.newCell.col===l.newCell.col)return!1;return!0}));if(e.canCastle(this.colour,d.KING_SIDE,o)){const l=this.colour===u.BLACK?0:7,o=6;t.push(new a(this.cell,new h(l,o),this,!1,{isCastle:!0,rook:new a(new h(l,7),new h(l,5),e.getPiece(l,7))}))}if(e.canCastle(this.colour,d.QUEEN_SIDE,o)){const l=this.colour===u.BLACK?0:7,o=2;t.push(new a(this.cell,new h(l,o),this,!1,{isCastle:!0,rook:new a(new h(l,0),new h(l,3),e.getPiece(l,0))}))}return t};getAttack=e=>this.getMoves(e);movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col;e.castle.isCastle&&(o[e.castle.rook.newCell.row][e.castle.rook.newCell.col]=e.castle.rook.piece,o[e.castle.rook.oldCell.row][e.castle.rook.oldCell.col]=null,e.castle.rook.piece.cell.row=e.castle.rook.newCell.row,e.castle.rook.piece.cell.col=e.castle.rook.newCell.col);const s=o[t][n];return null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n),this.moves.push(e),{row:t,col:n}};getString=()=>(this.colour===u.WHITE?"w":"b")+"k"}class f extends u{directions=[[1,2],[1,-2],[2,1],[2,-1],[-1,2],[-1,-2],[-2,1],[-2,-1]];points=320;name=u.KNIGHT;whiteScore=[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,0,0,0,-20,-40],[-30,0,10,15,15,10,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,10,15,15,10,5,-30],[-40,-20,0,5,5,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]];blackScore=[[-50,-40,-30,-30,-30,-30,-40,-50],[-40,-20,0,5,5,0,-20,-40],[-30,5,10,15,15,10,5,-30],[-30,0,15,20,20,15,0,-30],[-30,5,15,20,20,15,5,-30],[-30,0,10,15,15,10,0,-30],[-40,-20,0,0,0,0,-20,-40],[-50,-40,-30,-30,-30,-30,-40,-50]];constructor(e,l,o){super(e,l,o)}getMoves=e=>{const l=[];for(const o of this.directions){const t=o[0],n=o[1],s=t+this.cell.row,c=n+this.cell.col;if(e.canEat(s,c,this.colour)||e.canMove(s,c)){const o=new a(this.cell,new h(s,c),this);e.willCheck(this,o)||l.push(o)}}return l};getAttack=e=>{const l=[];for(const o of this.directions){const t=o[0],n=o[1],s=t+this.cell.row,c=n+this.cell.col;(e.canEatDefend(s,c)||e.canMove(s,c))&&l.push(new a(this.cell,new h(s,c),this))}return l};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col,s=o[t][n];return null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n),this.moves.push(e),{row:t,col:n}};getString=()=>(this.colour===u.WHITE?"w":"b")+"n"}class g extends u{points=100;name=u.PAWN;whiteScore=[[0,0,0,0,0,0,0,0],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]];whiteScoreEnd=[[100,100,100,100,100,100,100,100],[50,50,50,50,50,50,50,50],[10,10,20,30,30,20,10,10],[5,5,10,25,25,10,5,5],[0,0,0,20,20,0,0,0],[5,-5,-10,0,0,-10,-5,5],[5,10,10,-20,-20,10,10,5],[0,0,0,0,0,0,0,0]];blackScore=[[0,0,0,0,0,0,0,0],[5,10,10,-40,-40,10,10,5],[5,10,20,0,0,-10,-5,5],[0,0,0,20,20,0,0,0],[5,5,10,25,25,10,5,5],[10,10,20,30,30,20,10,10],[50,50,50,50,50,50,50,50],[0,0,0,0,0,0,0,0]];blackScoreEnd=[[0,0,0,0,0,0,0,0],[5,10,10,-40,-40,10,10,5],[5,10,20,0,0,-10,-5,5],[0,0,0,20,20,0,0,0],[5,5,10,25,25,10,5,5],[10,10,20,30,30,20,10,10],[50,50,50,50,50,50,50,50],[100,100,100,100,100,100,100,100]];constructor(e,l,o){super(e,l,o)}getMoves=e=>{const l=[];let o=this.cell.row+1*this.colour,t=this.cell.col;if(e.canMove(o,t)){const n=new a(this.cell,new h(o,t),this,void 0,void 0,void 0,0===o||7===o);if(e.willCheck(this,n)||l.push(n),o=this.cell.row+2*this.colour,e.canMove(o,t)&&this.moves.length<=0)if(this.colour===u.BLACK&&1===this.cell.row){const n=new a(this.cell,new h(o,t),this);e.willCheck(this,n)||l.push(n)}else if(this.colour===u.WHITE&&6===this.cell.row){const n=new a(this.cell,new h(o,t),this);e.willCheck(this,n)||l.push(n)}}if(o=this.cell.row+1*this.colour,t=this.cell.col+1,e.canEat(o,t,this.colour)){const n=new a(this.cell,new h(o,t),this,void 0,void 0,e.getPiece(o,t),0===o||7===o);e.willCheck(this,n)||l.push(n)}if(e.canMove(o,t)&&e.moves.length>0){const n=e.moves.slice(-1)[0];if(n.piece.name===u.PAWN&&n.newCell.row===this.cell.row&&n.newCell.col===this.cell.col+1&&2===Math.abs(n.newCell.row-n.oldCell.row)){const n=new a(this.cell,new h(o,t),this,!0);e.willCheck(this,n)||l.push(n)}}if(o=this.cell.row+1*this.colour,t=this.cell.col-1,e.canEat(o,t,this.colour)){const n=new a(this.cell,new h(o,t),this,void 0,void 0,e.getPiece(o,t),0===o||7===o);e.willCheck(this,n)||l.push(n)}if(e.canMove(o,t)&&e.moves.length>0){const n=e.moves.slice(-1)[0];if(n.piece.name===u.PAWN&&n.newCell.row===this.cell.row&&n.newCell.col===this.cell.col-1&&2===Math.abs(n.newCell.row-n.oldCell.row)){const n=new a(this.cell,new h(o,t),this,!0);e.willCheck(this,n)||l.push(n)}}return l};getAttack=e=>{const l=[];let o=this.cell.row+1*this.colour,t=this.cell.col+1;return(e.canMove(o,t)||e.canEatDefend(o,t))&&l.push(new a(this.cell,new h(o,t),this)),o=this.cell.row+1*this.colour,t=this.cell.col-1,(e.canMove(o,t)||e.canEatDefend(o,t))&&l.push(new a(this.cell,new h(o,t),this)),l};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col;if(e.isEnPassant){const t=l.moves.slice(-1)[0],n=o[t.newCell.row][t.newCell.col];null!==n&&(e.ate=n),o[t.newCell.row][t.newCell.col]=null}const s=o[t][n];return null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n),e.isPromotion?(o[t][n]=new p(this.colour,this.cell),{promotion:!0,row:t,col:n}):(this.moves.push(e),{row:t,col:n})};getString=()=>(this.colour===u.WHITE?"w":"b")+"p"}class p extends u{directions=[[1,1],[-1,-1],[1,-1],[-1,1],[0,1],[1,0],[0,-1],[-1,0]];points=900;name=u.QUEEN;whiteScore=[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,0,0,0,0,0,-10],[-10,0,5,5,5,5,0,-10],[-5,0,5,5,5,5,0,-5],[0,0,5,5,5,5,0,-5],[-10,5,5,5,5,5,0,-10],[-10,0,5,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]];blackScore=[[-20,-10,-10,-5,-5,-10,-10,-20],[-10,0,5,0,0,0,0,-10],[-10,5,5,5,5,5,0,-10],[0,0,5,5,5,5,0,-5],[-5,0,5,5,5,5,0,-5],[-10,0,5,5,5,5,0,-10],[-10,0,0,0,0,0,0,-10],[-20,-10,-10,-5,-5,-10,-10,-20]];constructor(e,l,o){super(e,l,o)}getMoves=e=>{const l=[];for(const o of this.directions){const t=this.cell.row,n=this.cell.col,s=o[0],c=o[1];let i=s+t,r=c+n;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const o=new a(this.cell,new h(i,r),this);if(e.willCheck(this,o)||l.push(o),e.canEat(i,r,this.colour))break;i+=s,r+=c}}return l};getAttack=e=>{const l=[];for(const o of this.directions){const t=this.cell.row,n=this.cell.col,s=o[0],c=o[1];let i=s+t,r=c+n;for(;(e.canMove(i,r)||e.canEatDefend(i,r))&&(l.push(new a(this.cell,new h(i,r),this)),!e.canEatDefend(i,r));)i+=s,r+=c}return l};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col,s=o[t][n];return null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n),this.moves.push(e),{row:t,col:n}};getString=()=>(this.colour===u.WHITE?"w":"b")+"q"}class E extends u{directions=[[0,1],[1,0],[0,-1],[-1,0]];points=500;name=u.ROOK;whiteScore=[[0,0,0,0,0,0,0,0],[5,10,10,10,10,10,10,5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[0,0,0,5,5,0,0,0]];blackScore=[[0,0,4,5,5,10,0,0],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[-5,0,0,0,0,0,0,-5],[5,10,10,10,10,10,10,5],[0,0,0,0,0,0,0,0]];constructor(e,l,o){super(e,l,o)}getMoves=e=>{const l=[];for(const o of this.directions){const t=this.cell.row,n=this.cell.col,s=o[0],c=o[1];let i=s+t,r=c+n;for(;e.canMove(i,r)||e.canEat(i,r,this.colour);){const o=new a(this.cell,new h(i,r),this);if(e.willCheck(this,o)||l.push(o),e.canEat(i,r,this.colour))break;i+=s,r+=c}}return l};getAttack=e=>{const l=[];for(const o of this.directions){const t=this.cell.row,n=this.cell.col,s=o[0],c=o[1];let i=s+t,r=c+n;for(;e.canMove(i,r)||e.canEatDefend(i,r);){const o=new a(this.cell,new h(i,r),this);if(l.push(o),e.canEatDefend(i,r))break;i+=s,r+=c}}return l};movePiece=(e,l)=>{const o=l.getBoard(),t=e.newCell.row,n=e.newCell.col,s=o[t][n];return null!==s&&(e.ate=s),o[t][n]=this,o[e.oldCell.row][e.oldCell.col]=null,this.cell=new h(t,n),this.moves.push(e),{row:t,col:n}};getString=()=>(this.colour===u.WHITE?"w":"b")+"r"}try{const l=o.data,t=l[0],s=l[1],c=l[2],i=l[3];if(e=c.length,0===e){if(i===u.WHITE){const e=[new a(new h(6,3),new h(4,3),new g(u.WHITE,new h(6,3))),new a(new h(6,4),new h(4,4),new g(u.WHITE,new h(6,4)))],l=Math.round(Math.random()*(e.length-1));postMessage(e[l].getMoveString())}}else if(1===e){const e=c.map((e=>a.parseMove(void 0,e)))[0];if(6===e.oldCell.row&&4===e.oldCell.col&&4===e.newCell.row&&4===e.newCell.col){const e=[new a(new h(1,2),new h(3,2),new g(u.BLACK,new h(1,2))),new a(new h(1,4),new h(3,4),new g(u.BLACK,new h(1,4)))],l=Math.round(Math.random()*(e.length-1));postMessage(e[l].getMoveString())}else{const e=n(t,s,c,i);postMessage(e.getMoveString())}}else{const e=n(t,s,c,i);postMessage(e.getMoveString())}}catch(v){postMessage({isError:!0,message:"Error: "+v})}}))}();
//# sourceMappingURL=worker.worker.fcc5c145.worker.js.map